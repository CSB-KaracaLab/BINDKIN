! waterdock_mini.cns
!    Minimize water molecules in solvated docking
!
! ***********************************************************************
! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           *
! * All rights reserved.                                                *
! * This code is part of the HADDOCK software and governed by its       *
! * license. Please see the LICENSE file that should have been included *
! * as part of this package.                                            *
! ***********************************************************************
!
  minimize rigid
   eval ($nchain1 = 0)
   while ($nchain1 < $data.ncomponents) loop nloop1
            eval($nchain1 = $nchain1 + 1)
            group (segid $Toppar.prot_segid_$nchain1 and not (resn WAT or resn HOH or resn TIP*))
            translation=true
   end loop nloop1
   for $id in id ((resn WAT or resn HOH or resn TIP*) and name OH2 and (attr store5 ne 1)) loop miniwater
    group (byres(id $id))
   end loop miniwater
   translation=$data.transwater
   nstep 100
   nprint 10
  end
  energy end

  !store5 is what is to be removed
  !store4 is used to determine what is at interface
  eval ($surfcutoff = $data.water_surfcutoff)
  do (store4 = 0) (all)

  eval($nchain1 = 0)
  while ($nchain1 < $data.ncomponents) loop nloop1
    eval($nchain1 = $nchain1 + 1)
    do (store4 = store4 + 1) (name oh2 and ((segid $Toppar.prot_segid_$nchain1) around $surfcutoff))
  end loop nloop1

  !an interfacial water should have at least store4=2
  do (store4 = 0) (attribute store4 < 2)
  do (store4 = 1) (attribute store4 > 0)
  do (store5 = 1) ((attr store5 = 1) or (name oh2 and (not resn TIP*) and (attr store4 ne 1)))
  do (store5 = 1) (byres (attr store5 = 1))
  do (store5 = 0) (resn TIP*)

  !"removing" of water: interaction weight 0
  igroup interaction (not all) (not all) end

  igroup
   eval($nchain1 = 0)

   while ($nchain1 < $data.ncomponents) loop nloop1
    eval($nchain1 = $nchain1 + 1)
    eval($nchain2 = $nchain1 )
    while ($nchain2 < $data.ncomponents) loop nloop2
      eval($nchain2 = $nchain2 + 1)
      interaction (segid $Toppar.prot_segid_$nchain1)
                  (segid $Toppar.prot_segid_$nchain2) weight * 1.0 vdw $kinter elec $kinter end
    end loop nloop2
    interaction ((resn WAT or resn HOH or resn TIP*) and (attr store5 ne 1)) (segid $Toppar.prot_segid_$nchain1) weight * 1.0 end
   end loop nloop1

   interaction ((resn WAT or resn HOH or resn TIP*) and (attr store5 ne 1))
	           ((resn WAT or resn HOH or resn TIP*) and (attr store5 ne 1)) weight * 1.0 end
   interaction (attr store5 = 1) (all) weight * 0.0 end
  end

  if ($data.solvate_method eq "restraints") then
   noe reset end
   !read again the NOE data
   @RUN:protocols/read_noes.cns(Iteration=$Iteration; Data=$Data; count=$count)
  end if
