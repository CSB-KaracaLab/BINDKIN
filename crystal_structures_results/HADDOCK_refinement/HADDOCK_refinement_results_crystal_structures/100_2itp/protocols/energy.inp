! energy.inp
!    Calculate statistics for all energy terms 
!
! ***********************************************************************
! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           *
! * Originally adapted from Aria 1.2 from Nilges and Linge, EMBL.       *
! * All rights reserved.                                                *
! * This code is part of the HADDOCK software and governed by its       *
! * license. Please see the LICENSE file that should have been included *
! * as part of this package.                                            *
! ***********************************************************************
!

@RUN:protocols/initialize.cns(iteration=$iteration;)

@NEWIT:iteration.cns(iteration=$iteration;)

@RUN:run.cns(
iteration =$iteration;
filenames =$filenames;
data      =$data;
iterations=$iterations;
saprotocol=$saprotocol;
refine    =$refine;
toppar    =$toppar;
analysis  =$analysis;
)
set message=on echo=on end

!reads in structure, coordinates and parameter files
@RUN:protocols/read_struc.cns

!set the energy flags:
@@RUN:protocols/flags_new.cns(Iteration=$Iteration; Data=$Data; )
flags include dihed elec end

set display NEWIT:analysis/energies.disp end
igroup 
  interaction (not (resn ANI or resn DAN or resn XAN)) (not (resn ANI or resn DAN or resn XAN))
  interaction (resn ANI) (all) weight * 1.0 vdw 0.0 elec 0.0 end
  interaction (resn DAN) (all) weight * 1.0 vdw 0.0 elec 0.0 end
  interaction (resn XAN) (all) weight * 1.0 vdw 0.0 elec 0.0 end
end

display #Complex statistics
display #file Etot Ebond Eangle Eimpr Edihed Evdw Eelec

evaluate ($sum_tot = 0)
evaluate ($sumsq_tot = 0)
evaluate ($sum_bond = 0)
evaluate ($sumsq_bond = 0)
evaluate ($sum_angle = 0)
evaluate ($sumsq_angle = 0)
evaluate ($sum_impr = 0)
evaluate ($sumsq_impr = 0)
evaluate ($sum_dihed= 0)
evaluate ($sumsq_dihed = 0)
evaluate ($sum_vdw = 0)
evaluate ($sumsq_vdw = 0)
evaluate ($sum_elec = 0)
evaluate ($sumsq_elec = 0)

@PREVIT:file.cns(filenames=$filenames)

evaluate ($count = 1)
evaluate ($nstruc1 = 0)
while ($count le $Iterations.anastruc) loop main
   evaluate ($file = $filenames.bestfile_$count)
   coor init end
   if ($file ne "") then
     coor @@$file
     evaluate ($nstruc1 = $nstruc1 + 1)
     energy end
     evaluate ($sum_tot = $sum_tot + $ener)
     evaluate ($sumsq_tot = $sumsq_tot + $ener**2)
     evaluate ($sum_bond = $sum_bond + $bond)
     evaluate ($sumsq_bond = $sumsq_bond + $bond**2)
     evaluate ($sum_angle = $sum_angle + $angl)
     evaluate ($sumsq_angle = $sumsq_angle + $angl**2)
     evaluate ($sum_impr = $sum_impr + $impr)
     evaluate ($sumsq_impr = $sumsq_impr + $impr**2)
     evaluate ($sum_dihed = $sum_dihed + $dihe)
     evaluate ($sumsq_dihed = $sumsq_dihed + $dihe**2)
     evaluate ($sum_vdw = $sum_vdw + $vdw)
     evaluate ($sumsq_vdw = $sumsq_vdw + $vdw**2)
     evaluate ($sum_elec = $sum_elec + $elec)
     evaluate ($sumsq_elec = $sumsq_elec + $elec**2)

     display # $file $ener $bond $angl $impr $dihe $vdw $elec

   end if
   if ($count ge $Iterations.anastruc) then exit loop main end if
   evaluate ($count = $count + 1)
end loop main

evaluate ($mean_tot = $sum_tot / $nstruc1)
evaluate ($stdev_tot = sqrt(($sumsq_tot - $nstruc1*$mean_tot**2)/ $nstruc1))
evaluate ($mean_bond = $sum_bond / $nstruc1)
evaluate ($stdev_bond = sqrt(($sumsq_bond - $nstruc1*$mean_bond**2)/ $nstruc1))
evaluate ($mean_angle = $sum_angle / $nstruc1)
evaluate ($stdev_angle = sqrt(($sumsq_angle - $nstruc1*$mean_angle**2)/ $nstruc1))
evaluate ($mean_impr = $sum_impr / $nstruc1)
evaluate ($stdev_impr = sqrt(($sumsq_impr - $nstruc1*$mean_impr**2)/ $nstruc1))
evaluate ($mean_dihed = $sum_dihed / $nstruc1)
evaluate ($stdev_dihed = sqrt(($sumsq_dihed - $nstruc1*$mean_dihed**2)/ $nstruc1))
evaluate ($mean_vdw = $sum_vdw / $nstruc1)
evaluate ($stdev_vdw = sqrt(($sumsq_vdw - $nstruc1*$mean_vdw**2)/ $nstruc1))
evaluate ($mean_elec = $sum_elec / $nstruc1)
evaluate ($stdev_elec = sqrt(($sumsq_elec - $nstruc1*$mean_elec**2)/ $nstruc1))

display # mean values protein
display # Etot   $mean_tot (+/- $stdev_tot ) [kcal/Mol]
display # Ebond  $mean_bond (+/- $stdev_bond ) [kcal/Mol]
display # Eangle $mean_angle (+/- $stdev_angle ) [kcal/Mol]
display # Eimpr  $mean_impr (+/- $stdev_impr ) [kcal/Mol]
display # Edihed $mean_dihed (+/- $stdev_dihed ) [kcal/Mol]
display # Evdw   $mean_vdw (+/- $stdev_vdw ) [kcal/Mol]
display # Eelec  $mean_elec (+/- $stdev_elec ) [kcal/Mol]

@PREVIT:file.cns(filenames=$filenames)

!define flexible segments 

do (store5 = 0) (all)
eval($nchain1= 0)
while ($nchain1 < $data.ncomponents) loop nloop1
  eval($nchain1 = $nchain1 + 1)
  evaluate($fcounter=0)
  while ($fcounter < $Toppar.nseg_$nchain1) loop flex
    evaluate($fcounter=$fcounter + 1)
    do (store5 = $nchain1) (resid $Toppar.start_seg_$nchain1_$fcounter : $Toppar.end_seg_$nchain1_$fcounter 
                             and segid $Toppar.prot_segid_$nchain1 )
  end loop flex
end loop nloop1

do (store5 = 0) (resn ANI or resn DAN or resn XAN)

igroup interaction (not all) (not all) end

igroup
  eval($nchain1= 1)
  while ($nchain1 <= $data.ncomponents) loop nloop1
    eval($nchain2 = $nchain1)
    while ($nchain2 <= $data.ncomponents) loop nloop2
      interaction (attr store5 = $nchain1) (attr store5 = $nchain2) weights * 1 end
      eval($nchain2 = $nchain2 + 1)
    end loop nloop2
    eval($nchain1 = $nchain1 + 1)
  end loop nloop1
  interaction (resn ANI) (all) weight * 1.0 vdw 0.0 elec 0.0 end
  interaction (resn DAN) (all) weight * 1.0 vdw 0.0 elec 0.0 end
  interaction (resn XAN) (all) weight * 1.0 vdw 0.0 elec 0.0 end
end

evaluate ($sum_tot = 0)
evaluate ($sumsq_tot = 0)
evaluate ($sum_vdw = 0)
evaluate ($sumsq_vdw = 0)
evaluate ($sum_elec = 0)
evaluate ($sumsq_elec = 0)

display #
display #
display #Proteins flexible interface energies
display #file Etot Evdw Eelec

evaluate ($count = 1)
evaluate ($nstruc1 = 0)
while ($count le $Iterations.anastruc) loop main
  evaluate ($file = $filenames.bestfile_$count)
   coor init end
   if ($file ne "") then
     coor @@$file
     evaluate ($nstruc1 = $nstruc1 + 1)
     energy end
     evaluate ($sum_tot = $sum_tot + $ener)
     evaluate ($sumsq_tot = $sumsq_tot + $ener**2)
     evaluate ($sum_vdw = $sum_vdw + $vdw)
     evaluate ($sumsq_vdw = $sumsq_vdw + $vdw**2)
     evaluate ($sum_elec = $sum_elec + $elec)
     evaluate ($sumsq_elec = $sumsq_elec + $elec**2)

     display # $file	$ener	$vdw	$elec
   end if
   if ($count ge $Iterations.anastruc) then exit loop main end if
   evaluate ($count = $count + 1)
end loop main

evaluate ($mean_tot = $sum_tot / $nstruc1)
evaluate ($stdev_tot = sqrt(($sumsq_tot - $nstruc1*$mean_tot**2)/ $nstruc1))
evaluate ($mean_vdw = $sum_vdw / $nstruc1)
evaluate ($stdev_vdw = sqrt(($sumsq_vdw - $nstruc1*$mean_vdw**2)/ $nstruc1))
evaluate ($mean_elec = $sum_elec / $nstruc1)
evaluate ($stdev_elec = sqrt(($sumsq_elec - $nstruc1*$mean_elec**2)/ $nstruc1))

display # mean values
display # Etot   $mean_tot (+/- $stdev_tot ) [kcal/Mol]
display # Evdw   $mean_vdw (+/- $stdev_vdw ) [kcal/Mol]
display # Eelec  $mean_elec (+/- $stdev_elec ) [kcal/Mol]

evaluate ($kinter = 1.0)
@RUN:protocols/scale_inter_only.cns

display #
display #
display #Protein-Protein intermolecular energies
display #file Etot Evdw Eelec 

evaluate ($sum_tot = 0)
evaluate ($sumsq_tot = 0)
evaluate ($sum_vdw = 0)
evaluate ($sumsq_vdw = 0)
evaluate ($sum_elec = 0)
evaluate ($sumsq_elec = 0)

@PREVIT:file.cns(filenames=$filenames)

evaluate ($count = 1)
evaluate ($nstruc1 = 0)
while ($count le $Iterations.anastruc) loop main
   evaluate ($file = $filenames.bestfile_$count)
   coor init end
   if ($file ne "") then
     coor @@$file
     evaluate ($nstruc1 = $nstruc1 + 1)
     energy end
     evaluate ($sum_tot = $sum_tot + $ener)
     evaluate ($sumsq_tot = $sumsq_tot + $ener**2)
     evaluate ($sum_vdw = $sum_vdw + $vdw)
     evaluate ($sumsq_vdw = $sumsq_vdw + $vdw**2)
     evaluate ($sum_elec = $sum_elec + $elec)
     evaluate ($sumsq_elec = $sumsq_elec + $elec**2)

     display # $file $ener $vdw $elec

   end if
   if ($count ge $Iterations.anastruc) then exit loop main end if
   evaluate ($count = $count + 1)
end loop main

evaluate ($mean_tot = $sum_tot / $nstruc1)
evaluate ($stdev_tot = sqrt(($sumsq_tot - $nstruc1*$mean_tot**2)/ $nstruc1))
evaluate ($mean_vdw = $sum_vdw / $nstruc1)
evaluate ($stdev_vdw = sqrt(($sumsq_vdw - $nstruc1*$mean_vdw**2)/ $nstruc1))
evaluate ($mean_elec = $sum_elec / $nstruc1)
evaluate ($stdev_elec = sqrt(($sumsq_elec - $nstruc1*$mean_elec**2)/ $nstruc1))

display # mean values 
display # Etot   $mean_tot (+/- $stdev_tot ) [kcal/Mol]
display # Evdw   $mean_vdw (+/- $stdev_vdw ) [kcal/Mol]
display # Eelec  $mean_elec (+/- $stdev_elec ) [kcal/Mol]

display #
display #
display #Protein-Protein Buried_surface_area

evaluate ($sum_bsa = 0)
evaluate ($sumsq_bsa = 0)

@PREVIT:file.cns(filenames=$filenames)

evaluate ($count = 1)
evaluate ($nstruc1 = 0)
while ($count le $Iterations.anastruc) loop main
   evaluate ($file = $filenames.bestfile_$count)
   coor init end
   if ($file ne "") then
     coor @@$file
     evaluate ($nstruc1 = $nstruc1 + 1)

     evaluate ($nchain1 = 1)
     evaluate ($saafree = 0)
     evaluate ($esolfree = 0)
     while ($nchain1 <= $data.ncomponents) loop nloop1
       {====>} {* buried surface area *}
       do (rmsd = 0) (all)
       surface mode=access accu=0.075 rh2o=1.4 sele=(segid $Toppar.prot_segid_$nchain1) end
       show sum (rmsd) (segid $Toppar.prot_segid_$nchain1 and not ((resn WAT or resn HOH or resn TIP*) or resn DMS))
       evaluate ($saafree = $saafree + $result)
       evaluate ($nchain1 = $nchain1 + 1)
     end loop nloop1
     
     do (rmsd = 0) (all)
     surface mode=access accu=0.075 rh2o=1.4 sele=(not ((resn WAT or resn HOH or resn TIP*) or resn DMS)) end
     show sum (rmsd) (not ((resn WAT or resn HOH or resn TIP*) or resn DMS))
     evaluate ($satot = $result)
     evaluate ($saburied = $saafree - $satot)
     evaluate ($sum_bsa = $sum_bsa + $saburied)
     evaluate ($sumsq_bsa = $sumsq_bsa + $saburied**2)

     display # $file $saburied 

   end if
   if ($count ge $Iterations.anastruc) then exit loop main end if
   evaluate ($count = $count + 1)
end loop main

evaluate ($mean_bsa = $sum_bsa / $nstruc1)
evaluate ($stdev_bsa = sqrt(($sumsq_bsa - $nstruc1*$mean_bsa**2)/ $nstruc1))

display # mean values 
display # BSA    $mean_bsa (+/- $stdev_bsa ) [A^2]

stop
