! protein-ss-restraints-alpha.def
!    Define automatically secondary structure dihedral angle restraints
!    for helical segments
!
! ***********************************************************************
! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           *
! * All rights reserved.                                                *
! * This code is part of the HADDOCK software and governed by its       *
! * license. Please see the LICENSE file that should have been included *
! * as part of this package.                                            *
! ***********************************************************************
!
{+ file: protein-ss-restraints.def       directory: protocols +}
{+ description: Creates dihedral angle restraints to maintain conformation of the protein backbone +}
{+ comment:This file is to be read by refinement files that modify atom coordinates +}
{+ authors: Axel T. Brunger, and Paul D. Adams, <br>
            modified by Alexandre Bonvin for HADDOCK use +}

set message=normal echo=on end

{- begin block parameter definition -} define(

{================================ backbone dihedral angle restraints =============================}

{* Pick the dihedral angles of the protein backbone from the input structure and
   restrain them within the given error range *}
{+ choice: true false +}
{===>} prot_pick_bacdih=true;

{* residues with backbone restrained - group 1 *}
{===>} prot_dihedral_1=(segid A);

{* dihedral angle range *}
{===>} error_dih_1=10.0; 

{* residues with backbone restrained - group 2 *}
{===>} prot_dihedral_2=(segid B);

{* dihedral angle range *}
{===>} error_dih_2=10.0; 

{* residues with backbone restrained - group 3 *}
{===>} prot_dihedral_3=(segid C);

{* dihedral angle range *}
{===>} error_dih_3=10.0; 

{* residues with backbone restrained - group 4 *}
{===>} prot_dihedral_4=(segid D);

{* dihedral angle range *}
{===>} error_dih_4=10.0; 

{* residues with backbone restrained - group 5 *}
{===>} prot_dihedral_5=(segid E);

{* dihedral angle range *}
{===>} error_dih_5=10.0; 

{* residues with backbone restrained - group 6 *}
{===>} prot_dihedral_6=(segid F);

{* dihedral angle range *}
{===>} error_dih_6=10.0; 

{=========================================================================================================}
{                        things below this line do not normally need to be changed                        }
{=========================================================================================================}

 ) {- end block parameter definition -}


{- Dihedral restraints for the protein backbone -}

if (&prot_pick_bacdih=true) then
  restraint dihedral
    nass = 10000
  end
  evaluate ($group=1)
  evaluate ($done=false)
  while ( $done = false ) loop bdihe
   if ( &exist_prot_dihedral_$group = true ) then
     show sum(1) ( &prot_dihedral_$group )
     if ( $result > 0 ) then
       evaluate ($error_phi=&error_dih_$group)
       evaluate ($error_psi=&error_dih_$group)

       for $id in id ( &prot_dihedral_$group and tag and not resn TIP* ) loop resid
         show (segid) (id $id)
         evaluate ($segid=$result)
         show (resid) ( id $id )
         evaluate ($resid=decode($result))
	 evaluate ($alphaphi = 0)
	 evaluate ($alphapsi = 0)
 	 evaluate ($alpha_check = 0)

         evaluate ($rprec = $resid - 1)
         show (resid) (resid $rprec and name CA)
         if ($result ne 0) then
	   pick dihedral
                     ( segid $segid and resid $rprec and name C )
                     ( segid $segid and resid $resid and name N )
                     ( segid $segid and resid $resid and name CA )
                     ( segid $segid and resid $resid and name C ) 
		  geometry
	   evaluate ($dihedral_phi=$result)
           evaluate ($alphaphi=max($dihedral_phi,-77))
           evaluate ($alphaphi=max($dihedral_phi,-37))
	   if ($alphaphi eq -37) then
             evaluate ($alpha_check = 1)
	   else
	     evaluate ($alpha_check = 0)
	   end if
         end if

         evaluate ($rnext = $resid + 1)
         show (resid) (resid $rnext and name CA)
         if ($result ne 0) then
  	   pick dihedral
                     ( segid $segid and resid $resid and name N )
                     ( segid $segid and resid $resid and name CA )
                     ( segid $segid and resid $resid and name C )
                     ( segid $segid and resid $rnext and name N ) 
		  geometry
	   evaluate ($dihedral_psi=$result)
           evaluate ($alphapsi=max($dihedral_psi,-67))
           evaluate ($alphapsi=max($dihedral_psi,-27))
	   if ($alphapsi eq -27) then
             evaluate ($alpha_check = $alpha_check + 1)
	   end if
	 end if
         
	 evaluate ($defrest = 0) 
	 if ($alpha_check eq 2) then
	   evaluate ($defrest = 1)
	 end if
	 if ($defrest = 1) then
           restraint dihedral
	    ! phi
             assign  ( segid $segid and resid $rprec and name C )
                     ( segid $segid and resid $resid and name N )
                     ( segid $segid and resid $resid and name CA )
                     ( segid $segid and resid $resid and name C ) 
                                                       1.0 $dihedral_phi $error_phi 2
	    ! psi
             assign  ( segid $segid and resid $resid and name N )
                     ( segid $segid and resid $resid and name CA )
                     ( segid $segid and resid $resid and name C )
                     ( segid $segid and resid $rnext and name N ) 
                                                       1.0 $dihedral_psi $error_psi 2
             scale 200.0
           end
         end if
       end loop resid
     end if
   else
     evaluate ($done=true)
   end if
     evaluate ($group=$group+1)
 end loop bdihe

 flags include cdih end

end if

set message=off echo=off end


