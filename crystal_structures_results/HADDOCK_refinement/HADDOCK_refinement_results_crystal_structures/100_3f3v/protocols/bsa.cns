! bsa.cns
!   Calculate buried surface area of the complex
!
! ***********************************************************************
! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           *
! * All rights reserved.                                                *
! * This code is part of the HADDOCK software and governed by its       *
! * license. Please see the LICENSE file that should have been included *
! * as part of this package.                                            *
! ***********************************************************************
!
{====>} {* buried surface area *}
evaluate ($nchain1 = 0)
evaluate ($saafree = 0)
while ($nchain1 < $data.ncomponents) loop nloop1
  evaluate ($nchain1 = $nchain1 + 1)
  {====>} {* buried surface area *}
  do (rmsd = 0) (all)
  surface mode=access accu=0.075 rh2o=1.4 sele=(segid $Toppar.prot_segid_$nchain1) end
  show sum (rmsd) (segid $Toppar.prot_segid_$nchain1 and not ((resn WAT or resn HOH or resn TIP*) or resn DMS))
  evaluate ($saafree = $saafree + $result)
end loop nloop1

{====>} {* define ASA-based solvation parameters *}
inline @RUN:protocols/def_solv_param.cns     

do (rmsd = 0) (all)
do (store2 = 0) (all)
surface mode=access accu=0.075 rh2o=1.4 sele=(all) end
show sum (rmsd) (all and not ((resn WAT or resn HOH or resn TIP*) or resn DMS))
evaluate ($satot = $result)
evaluate ($saburied = $saafree - $satot)
evaluate ($bsa = $saburied)
! minimum BSA value set to 15 (one H atom would have SASA of 12.56 A**2)
if ($bsa < 15) then
  evaluate ($bsa = -999999)
end if

do (store2 = rmsd * store1) (not ((resn WAT or resn HOH or resn TIP*) or resn DMS))
show sum (store2) (not ((resn WAT or resn HOH or resn TIP*) or resn DMS))
evaluate ($esolcplx = $result)
evaluate ($desolv = $esolcplx - $esolfree)

if ($data.ncomponents eq 1) then
  evaluate ($bsa = 0)
  evaluate ($desolv = 0)
end if
