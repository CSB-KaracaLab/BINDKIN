! ene-residue.inp
!    Calculate the per-residue intermolecular energies (Evdw, Eelec)
!
! ***********************************************************************
! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           *
! * All rights reserved.                                                *
! * This code is part of the HADDOCK software and governed by its       *
! * license. Please see the LICENSE file that should have been included *
! * as part of this package.                                            *
! ***********************************************************************
!

@RUN:protocols/initialize.cns(iteration=$iteration;)

@NEWIT:iteration.cns(iteration=$iteration;)

@RUN:run.cns(
iteration =$iteration;
filenames =$filenames;
data      =$data;
iterations=$iterations;
saprotocol=$saprotocol;
refine    =$refine;
toppar    =$toppar;
analysis  =$analysis;
)

!reads in structure, coordinates and parameter files
@RUN:protocols/read_struc.cns

@PREVIT:file.cns(filenames=$filenames)

evaluate ($count = 1)
while ($count le $Iterations.anastruc) loop loop00
  evaluate ($file = $filenames.bestfile_$count)
  coor init end
  if ($file ne "") then
    coor @@$file
    dele sele=(not known) end
  end if
  evaluate ($count = $count + 1)
end loop loop00

!set the energy flags:
@@RUN:protocols/flags_new.cns(Iteration=$Iteration; Data=$Data; )
flags exclude * include vdw elec end

set display=NEWIT:analysis/ene-residue.disp end

@PREVIT:file.cns(filenames=$filenames)

{====>} {* define ASA-based solvation parameters *}
! Uses store1
inline @RUN:protocols/def_solv_param.cns

evaluate ($count = 1)
evaluate ($nstruc1 = 0)
do (store2 = 0) (all)
do (store3 = 0) (all)
do (store4 = 0) (all)
do (store5 = 0) (all)
do (store6 = 0) (all)
while ($count le $Iterations.anastruc) loop loop0
  evaluate ($file = $filenames.bestfile_$count)
  coor init end
  if ($file ne "") then
    coor @@$file
    evaluate ($nstruc1 = $nstruc1 + 1)
    eval($nchain1 = 0)
    while ($nchain1 < $data.ncomponents) loop nloop1
      eval($nchain1 = $nchain1 + 1)
      do (store2 = 1) (byres (segid $Toppar.prot_segid_$nchain1 and not hydrogen and
                              (not segid $Toppar.prot_segid_$nchain1 and not hydrogen) around 5.0))
      do (rmsd = 0) (all)
      surface mode=access accu=0.075 rh2o=1.4 sele=(segid $Toppar.prot_segid_$nchain1) end
      do (store3 = store3 + rmsd * store1) (segid $Toppar.prot_segid_$nchain1 and not ((resn WAT or resn HOH or resn TIP*) or resn DMS))
      do (store5 = store5 + rmsd**2 * store1**2) (segid $Toppar.prot_segid_$nchain1 and not ((resn WAT or resn HOH or resn TIP*) or resn DMS))
    end loop nloop1
    surface mode=access accu=0.075 rh2o=1.4 sele=(not ((resn WAT or resn HOH or resn TIP*) or resn DMS)) end
    do (store4 = store4 + rmsd * store1) (not ((resn WAT or resn HOH or resn TIP*) or resn DMS))
    do (store6 = store6 + rmsd**2* store1**2) (not ((resn WAT or resn HOH or resn TIP*) or resn DMS))
  end if
  evaluate ($count = $count + 1)
end loop loop

do (store3 = store3 / $nstruc1) (all)
do (store4 = store4 / $nstruc1) (all)
do (store5 = sqrt(store5 - $nstruc1 * store3**2)/$nstruc1) (all)
do (store6 = sqrt(store6 - $nstruc1 * store4**2)/$nstruc1) (all)

for $id in id (attr store2 = 1 and tag) loop loop2
  show (resid) (id $id)
  evaluate ($ires = $result)
  show (resn) (id $id)
  evaluate ($nres = $result)
  show (segid) (id $id)
  evaluate ($iseg = $result)

  igroup interaction (segid $iseg and resid $ires) (not segid $iseg and not ((resn WAT or resn HOH or resn TIP*) or resn DMSO)) end
  display #
  display #
  display #Residue $nres $ires $iseg - intermolecular energies
  display #file Etot Evdw Eelec

  evaluate ($sum_tot = 0)
  evaluate ($sumsq_tot = 0)
  evaluate ($sum_vdw = 0)
  evaluate ($sumsq_vdw = 0)
  evaluate ($sum_elec = 0)
  evaluate ($sumsq_elec = 0)
  evaluate ($sum_desolv = 0)
  evaluate ($sumsq_desolv = 0)
  evaluate ($sum_haddockscore = 0)
  evaluate ($sumsq_haddockscore = 0)

  @PREVIT:file.cns(filenames=$filenames)

  show sum (store3) (segid $iseg and resid $ires)
  evaluate ($esolfree = $result)
  show sum (store4) (segid $iseg and resid $ires)
  evaluate ($esolcplx = $result)
  evaluate ($edesolv = ($esolcplx - $esolfree))
  evaluate ($mean_desolv = $edesolv)

  evaluate ($count = 1)
  evaluate ($nstruc1 = 0)
  while ($count le $Iterations.anastruc) loop loop3
    evaluate ($file = $filenames.bestfile_$count)
    coor init end
    if ($file ne "") then
      coor @@$file
      evaluate ($nstruc1 = $nstruc1 + 1)
      energy end
      evaluate ($sum_tot = $sum_tot + $ener)
      evaluate ($sumsq_tot = $sumsq_tot + $ener**2)
      evaluate ($sum_vdw = $sum_vdw + $vdw)
      evaluate ($sumsq_vdw = $sumsq_vdw + $vdw**2)
      evaluate ($sum_elec = $sum_elec + $elec)
      evaluate ($sumsq_elec = $sumsq_elec + $elec**2)

      evaluate ($haddockscore = $iterations.w_vdw * $vdw + $iterations.w_elec * $elec + $iterations.w_desolv * $edesolv)
      evaluate ($sum_haddockscore = $sum_haddockscore + $haddockscore)
      evaluate ($sumsq_haddockscore = $sumsq_haddockscore + $haddockscore**2)

      display # $file $ener $vdw $elec
   end if
   evaluate ($count = $count + 1)
  end loop loop3

  show sum (store5) (segid $iseg and resid $ires)
  evaluate ($stdev_esolfree = $result**2)
  show sum (store6) (segid $iseg and resid $ires)
  evaluate ($stdev_esolcplx = $result**2)
  evaluate ($stdev_desolv = sqrt($stdev_esolfree+$stdev_esolcplx))

  evaluate ($mean_tot = $sum_tot / $nstruc1)
  evaluate ($stdev_tot = sqrt(max(0.0,($sumsq_tot - $nstruc1*$mean_tot**2))/ $nstruc1))
  evaluate ($mean_vdw = $sum_vdw / $nstruc1)
  evaluate ($stdev_vdw = sqrt(max(0.0,($sumsq_vdw - $nstruc1*$mean_vdw**2))/ $nstruc1))
  evaluate ($mean_elec = $sum_elec / $nstruc1)
  evaluate ($stdev_elec = sqrt(max(0.0,($sumsq_elec - $nstruc1*$mean_elec**2))/ $nstruc1))
  evaluate ($mean_haddockscore = $sum_haddockscore / $nstruc1)
  evaluate ($stdev_haddockscore = sqrt(($sumsq_haddockscore - $nstruc1*$mean_haddockscore**2)/ $nstruc1))

  display # mean values for interaction with residue $nres $ires $iseg
  display # $nres $ires $iseg : Etot   $mean_tot (+/- $stdev_tot ) [kcal/Mol]
  display # $nres $ires $iseg : Evdw   $mean_vdw (+/- $stdev_vdw ) [kcal/Mol]
  display # $nres $ires $iseg : Eelec  $mean_elec (+/- $stdev_elec ) [kcal/Mol]
  display # $nres $ires $iseg : Edesol $mean_desolv (+/- $stdev_desolv ) [kcal/Mol]
  display # $nres $ires $iseg : HADDOCKscore $mean_haddockscore (+/- $stdev_haddockscore ) [a.u.]

end loop loop2

close NEWIT:analysis/ene-residue.disp end

evaluate ($outdis  = "NEWIT:analysis/ENE_DONE")
set display=$outdis end
display DONE

stop
