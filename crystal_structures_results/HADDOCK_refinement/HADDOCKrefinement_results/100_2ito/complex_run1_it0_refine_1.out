          ============================================================
          |                                                          |
          |            Crystallography & NMR System (CNS)            |
          |                         CNSsolve                         |
          |                                                          |
          ============================================================
           Version: 1.3 at patch level U
           Status: Special UU release with Rg and paramagnetic
                   restraints (A. Bonvin, UU 2011)
          ============================================================
           Written by: A.T.Brunger, P.D.Adams, G.M.Clore, W.L.DeLano,
                       P.Gros, R.W.Grosse-Kunstleve,J.-S.Jiang,J.M.Krahn,
                       J.Kuszewski, M.Nilges, N.S.Pannu, R.J.Read,
                       L.M.Rice, G.F.Schroeder, T.Simonson, G.L.Warren.
           Copyright (c) 1997-2010 Yale University
          ============================================================
           Running on machine: wn-mars-039.farm.nikhef.nl (x86_64/Linux,64-bit)
           Program started by: enmr049
           Program started at: 19:16:12 on 28-Dec-2019
          ============================================================

 FFT3C: Using FFTPACK4.1

 CNSsolve>! refine.inp 
 CNSsolve>!    The core docking script of HADDOCK performing rigid-body docking 
 CNSsolve>!    and semi-flexible refinement in torsion angle space 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * Originally adapted from Aria 1.2 from Nilges and Linge, EMBL.       * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve> 
 CNSsolve>@RUN:protocols/initialize.cns(iteration=$iteration;) 
 ASSFIL: file initialize.cns opened.
 CNSsolve>! initialize.cns 
 CNSsolve>!    Iteration initialization 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * Originally adapted from Aria 1.2 from Nilges and Linge, EMBL.       * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve> 
 CNSsolve>module (iteration;) 
 &_2_ITERATION set to $_1_ITERATION 
 CNSsolve>evaluate (&iteration = "") 
 EVALUATE: symbol $_1_ITERATION set to "" (string)
 CNSsolve> 
 CNSsolve> 
 CNSsolve>@NEWIT:iteration.cns(iteration=$iteration;) 
 ASSFIL: file iteration.cns opened.
 CNSsolve>module ( iteration ) 
 &_2_ITERATION set to $_1_ITERATION 
 CNSsolve>evaluate (&iteration=0) 
 EVALUATE: symbol $_1_ITERATION set to    0.00000     (real)
 CNSsolve> 
 CNSsolve>@RUN:run.cns( 
 ASSFIL: file run.cns opened.
 CNSsolve>! run.cns-milou 
 CNSsolve>!    The file containing all parameters for HADDOCK 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * Originally adapted from Aria 1.2 from Nilges and Linge, EMBL.       * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve>module( 
 MODULE-DECLARATION>iteration; 
 MODULE-DECLARATION>filenames; 
 MODULE-DECLARATION>data; 
 MODULE-DECLARATION>iterations; 
 MODULE-DECLARATION>saprotocol; 
 MODULE-DECLARATION>refine; 
 MODULE-DECLARATION>toppar; 
 MODULE-DECLARATION>analysis; 
 MODULE-DECLARATION>) 
 MODULE-INVOCATION>iteration =$iteration; 
 &_2_ITERATION set to $_1_ITERATION 
 MODULE-INVOCATION>filenames =$filenames; 
 &_2_FILENAMES set to $_1_FILENAMES 
 MODULE-INVOCATION>Data      =$Data; 
 &_2_DATA set to $_1_DATA 
 MODULE-INVOCATION>iterations=$iterations; 
 &_2_ITERATIONS set to $_1_ITERATIONS 
 MODULE-INVOCATION>saprotocol=$saprotocol; 
 &_2_SAPROTOCOL set to $_1_SAPROTOCOL 
 MODULE-INVOCATION>refine    =$refine; 
 &_2_REFINE set to $_1_REFINE 
 MODULE-INVOCATION>toppar    =$toppar; 
 &_2_TOPPAR set to $_1_TOPPAR 
 MODULE-INVOCATION>analysis  =$analysis;) 
 &_2_ANALYSIS set to $_1_ANALYSIS 
 CNSsolve>{+ File: run.cns +} 
 CNSsolve>{+ Description: this file contains all necessary information to run HADDOCK. +} 
 CNSsolve>{+ Authors: Alexandre Bonvin<br> 
 CNSsolve>Version: 2.2, Aug 22, 2012 <br><br> 
 CNSsolve>Initially adapted from ARIA of Nilges and Linge +} 
 CNSsolve>! Please cite the following references when using this protocol: 
 CNSsolve>{+ reference: Cyril Dominguez, Rolf Boelens and Alexandre M.J.J. Bonvin (2003).  HADDOCK: a protein-protein docking approach 
 CNSsolve>based on biochemical and/or biophysical information. <i>J. Am. Chem. Soc.</i> <b>125</b>, 1731-1737. 
 CNSsolve><p> 
 CNSsolve><b>When using <i>residual dipolar couplings</i> in HADDOCK cite in addition:</b><p> 
 CNSsolve><LI>A.D.J. van Dijk, D. Fushman and A.M.J.J. Bonvin (2005). Various strategies of using residual dipolar 
 CNSsolve>couplings in NMR-driven protein docking: Application to Lys48-linked di-ubiquitin and validation against 
 CNSsolve>15N-relaxation data. <EM>Proteins: Struc. Funct. & Bioinformatics</EM>, <STRONG>60</STRONG>, 367-381.</li> 
 CNSsolve><p> 
 CNSsolve><b>When using <i>diffusion anisotropy data</i> in HADDOCK cite in addition:</b><p> 
 CNSsolve><li>A.D.J. van Dijk, R. Kaptein, R. Boelens and A.M.J.J. Bonvin (2006). Combining NMR relaxation with 
 CNSsolve>chemical shift perturbation data to drive protein-protein docking. <EM>J. Biomol. NMR</EM>, 
 CNSsolve><STRONG>34</STRONG>, 237-244.</li> 
 CNSsolve><p> 
 CNSsolve><b>When using <i>solvated docking</i> in HADDOCK cite in addition:</b><p> 
 CNSsolve><li>A.D.J. van Dijk and A.M.J.J. Bonvin (2006). Solvated docking: introducing water into the modelling 
 CNSsolve>of biomolecular complexes. <EM>Bioinformatics</EM>,  <STRONG>22</STRONG> 2340-2347. 
 CNSsolve><p> 
 CNSsolve><b>When performing <i>flexible protein-DNA docking</i> using HADDOCK cite in addition:</b><p> 
 CNSsolve><li>M. van Dijk, A.D.J. van Dijk, V. Hsu, R. Boelens and  A.M.J.J. Bonvin (2006). 
 CNSsolve>Information-driven Protein-DNA Docking using HADDOCK: it is a matter of flexibility. 
 CNSsolve><EM>Nucl. Acids Res.</EM>, <STRONG>34</STRONG> 3317-3325.</li> 
 CNSsolve>+} 
 CNSsolve>{- Guidelines for using this file: 
 CNSsolve>   - all strings must be quoted by double-quotes 
 CNSsolve>   - logical variables (true/false) are not quoted 
 CNSsolve>   - do not remove any evaluate statements from the file 
 CNSsolve>   - pathnames should not exceed 80 characters -} 
 CNSsolve>{- begin block parameter definition -} define( 
 DEFINE>{======== number of molecules for docking ==================} 
 DEFINE>{* number of components *} 
 DEFINE>{===>} ncomponents=2; 
 DEFINE>{======================= filenames =========================} 
 DEFINE>{*  the name of your current project *} 
 DEFINE>{*  this will be used as name for the generated structures *} 
 DEFINE>{===>} fileroot="complex"; 
 DEFINE>{* RUN directory *} 
 DEFINE>{*  the absolute path of your current run, e.g. /home/haddock/server/run1*} 
 DEFINE>{===>} run_dir="/home/enmr/services-enmr/HADDOCK2.2/server/run/userrun000106/run1"; 
 DEFINE>{* PDB file of molecule (protein) A *} 
 DEFINE>{===>} prot_coor_A="protein1.pdb"; 
 DEFINE>{* PSF file of molecule (protein) A *} 
 DEFINE>{===>} prot_psf_A="protein1.psf"; 
 DEFINE>{* segid of molecule (protein) A *} 
 DEFINE>{===>} prot_segid_A="A"; 
 DEFINE>{* fileroot of molecule (protein) A *} 
 DEFINE>{===>} prot_root_A="protein1"; 
 DEFINE>{* Is molecule A DNA? *} 
 DEFINE>{+ choice: true false +} 
 DEFINE>{===>} dna_A=false; 
 DEFINE>{* PDB file of molecule (protein) B *} 
 DEFINE>{===>} prot_coor_B="protein2.pdb"; 
 DEFINE>{* PSF file of molecule (protein) B *} 
 DEFINE>{===>} prot_psf_B="protein2.psf"; 
 DEFINE>{* segid of molecule (protein) B *} 
 DEFINE>{===>} prot_segid_B="B"; 
 DEFINE>{* fileroot of molecule (protein) B *} 
 DEFINE>{===>} prot_root_B="protein2"; 
 DEFINE>{* Is molecule B DNA? *} 
 DEFINE>{+ choice: true false +} 
 DEFINE>{===>} dna_B=false; 
 DEFINE>{* PDB file of molecule (protein) C *} 
 DEFINE>{===>} prot_coor_C=""; 
 DEFINE>{* PSF file of molecule (protein) C *} 
 DEFINE>{===>} prot_psf_C=""; 
 DEFINE>{* segid of molecule (protein) C *} 
 DEFINE>{===>} prot_segid_C="C"; 
 DEFINE>{* fileroot of molecule (protein) C *} 
 DEFINE>{===>} prot_root_C=""; 
 DEFINE>{* Is molecule C DNA? *} 
 DEFINE>{+ choice: true false +} 
 DEFINE>{===>} dna_C=false; 
 DEFINE>{* PDB file of molecule (protein) D *} 
 DEFINE>{===>} prot_coor_D=""; 
 DEFINE>{* PSF file of molecule (protein) D *} 
 DEFINE>{===>} prot_psf_D=""; 
 DEFINE>{* segid of molecule (protein) D *} 
 DEFINE>{===>} prot_segid_D="D"; 
 DEFINE>{* fileroot of molecule (protein) D *} 
 DEFINE>{===>} prot_root_D=""; 
 DEFINE>{* Is molecule D DNA? *} 
 DEFINE>{+ choice: true false +} 
 DEFINE>{===>} dna_D=false; 
 DEFINE>{* PDB file of molecule (protein) E *} 
 DEFINE>{===>} prot_coor_E=""; 
 DEFINE>{* PSF file of molecule (protein) E *} 
 DEFINE>{===>} prot_psf_E=""; 
 DEFINE>{* segid of molecule (protein) E *} 
 DEFINE>{===>} prot_segid_E="E"; 
 DEFINE>{* fileroot of molecule (protein) E *} 
 DEFINE>{===>} prot_root_E=""; 
 DEFINE>{* Is molecule E DNA? *} 
 DEFINE>{+ choice: true false +} 
 DEFINE>{===>} dna_E=false; 
 DEFINE>{* PDB file of molecule (protein) F *} 
 DEFINE>{===>} prot_coor_F=""; 
 DEFINE>{* PSF file of molecule (protein) F *} 
 DEFINE>{===>} prot_psf_F=""; 
 DEFINE>{* segid of molecule (protein) F *} 
 DEFINE>{===>} prot_segid_F="F"; 
 DEFINE>{* fileroot of molecule (protein) F *} 
 DEFINE>{===>} prot_root_F=""; 
 DEFINE>{* Is molecule F DNA? *} 
 DEFINE>{+ choice: true false +} 
 DEFINE>{===>} dna_F=false; 
 DEFINE>{ Atomname nomenclature } 
 DEFINE>{ set true if you have IUPAC (e.g. LEU HB2 and HB3 and not HB2 and HB1) data (e.g. from XEASY) } 
 DEFINE>{ choice: true false } 
 DEFINE>xplortodiana=false; 
 DEFINE>{* Remove non-polar hydrogens? *} 
 DEFINE>{+ choice: true false +} 
 DEFINE>{===>} delenph=true; 
 DEFINE>{* HADDOCK directory *} 
 DEFINE>{*  the absolute path of the HADDOCK program files *} 
 DEFINE>{===>} haddock_dir="/home/enmr/software/haddock2.2-grid"; 
 DEFINE>{* Logfile directory *} 
 DEFINE>{* specify a directory for the large CNS log files *} 
 DEFINE>{===>} temptrash_dir="/home/enmr/services-enmr/HADDOCK2.2/server/run/userrun000106/run1"; 
 DEFINE>{==================== histidine patches =====================} 
 DEFINE>{* Patch to change doubly protonated HIS to singly protonated histidine (HD1) *} 
 DEFINE>{* just give the residue number of the histidines for the HISD patch, set them to zero if you don't want them *} 
 DEFINE>numhisd=10; 
 DEFINE>{+ table: rows=6 "molecule (Protein) A" "molecule (Protein) B"  "molecule (Protein) C"  "molecule (Protein) D"  "molecule (Protein) E"  "molecule (Protein) F" cols=10 "1" "2" "3" "4" "5" "6" "7" "8" "9" "10" +} 
 DEFINE>{===>} A_hisd_resid_1=78; 
 DEFINE>{===>} A_hisd_resid_2=0; 
 DEFINE>{===>} A_hisd_resid_3=0; 
 DEFINE>{===>} A_hisd_resid_4=0; 
 DEFINE>{===>} A_hisd_resid_5=0; 
 DEFINE>{===>} A_hisd_resid_6=0; 
 DEFINE>{===>} A_hisd_resid_7=0; 
 DEFINE>{===>} A_hisd_resid_8=0; 
 DEFINE>{===>} A_hisd_resid_9=0; 
 DEFINE>{===>} A_hisd_resid_10=0; 
 DEFINE>{===>} B_hisd_resid_1=0; 
 DEFINE>{===>} B_hisd_resid_2=0; 
 DEFINE>{===>} B_hisd_resid_3=0; 
 DEFINE>{===>} B_hisd_resid_4=0; 
 DEFINE>{===>} B_hisd_resid_5=0; 
 DEFINE>{===>} B_hisd_resid_6=0; 
 DEFINE>{===>} B_hisd_resid_7=0; 
 DEFINE>{===>} B_hisd_resid_8=0; 
 DEFINE>{===>} B_hisd_resid_9=0; 
 DEFINE>{===>} B_hisd_resid_10=0; 
 DEFINE>{===>} C_hisd_resid_1=0; 
 DEFINE>{===>} C_hisd_resid_2=0; 
 DEFINE>{===>} C_hisd_resid_3=0; 
 DEFINE>{===>} C_hisd_resid_4=0; 
 DEFINE>{===>} C_hisd_resid_5=0; 
 DEFINE>{===>} C_hisd_resid_6=0; 
 DEFINE>{===>} C_hisd_resid_7=0; 
 DEFINE>{===>} C_hisd_resid_8=0; 
 DEFINE>{===>} C_hisd_resid_9=0; 
 DEFINE>{===>} C_hisd_resid_10=0; 
 DEFINE>{===>} D_hisd_resid_1=0; 
 DEFINE>{===>} D_hisd_resid_2=0; 
 DEFINE>{===>} D_hisd_resid_3=0; 
 DEFINE>{===>} D_hisd_resid_4=0; 
 DEFINE>{===>} D_hisd_resid_5=0; 
 DEFINE>{===>} D_hisd_resid_6=0; 
 DEFINE>{===>} D_hisd_resid_7=0; 
 DEFINE>{===>} D_hisd_resid_8=0; 
 DEFINE>{===>} D_hisd_resid_9=0; 
 DEFINE>{===>} D_hisd_resid_10=0; 
 DEFINE>{===>} E_hisd_resid_1=0; 
 DEFINE>{===>} E_hisd_resid_2=0; 
 DEFINE>{===>} E_hisd_resid_3=0; 
 DEFINE>{===>} E_hisd_resid_4=0; 
 DEFINE>{===>} E_hisd_resid_5=0; 
 DEFINE>{===>} E_hisd_resid_6=0; 
 DEFINE>{===>} E_hisd_resid_7=0; 
 DEFINE>{===>} E_hisd_resid_8=0; 
 DEFINE>{===>} E_hisd_resid_9=0; 
 DEFINE>{===>} E_hisd_resid_10=0; 
 DEFINE>{===>} F_hisd_resid_1=0; 
 DEFINE>{===>} F_hisd_resid_2=0; 
 DEFINE>{===>} F_hisd_resid_3=0; 
 DEFINE>{===>} F_hisd_resid_4=0; 
 DEFINE>{===>} F_hisd_resid_5=0; 
 DEFINE>{===>} F_hisd_resid_6=0; 
 DEFINE>{===>} F_hisd_resid_7=0; 
 DEFINE>{===>} F_hisd_resid_8=0; 
 DEFINE>{===>} F_hisd_resid_9=0; 
 DEFINE>{===>} F_hisd_resid_10=0; 
 DEFINE>{* Patch to change doubly protonated HIS to singly protonated histidine (HE2) *} 
 DEFINE>{* just give the residue number of the histidines for the HISE patch, set them to zero if you don't want them *} 
 DEFINE>numhise=10; 
 DEFINE>{+ table: rows=6 "molecule (Protein) A" "molecule (Protein) B"  "molecule (Protein) C"  "molecule (Protein) D"  "molecule (Protein) E"  "molecule (Protein) F" cols=10 "1" "2" "3" "4" "5" "6" "7" "8" "9" "10" +} 
 DEFINE>{===>} A_hise_resid_1=193; 
 DEFINE>{===>} A_hise_resid_2=198; 
 DEFINE>{===>} A_hise_resid_3=140; 
 DEFINE>{===>} A_hise_resid_4=110; 
 DEFINE>{===>} A_hise_resid_5=155; 
 DEFINE>{===>} A_hise_resid_6=0; 
 DEFINE>{===>} A_hise_resid_7=0; 
 DEFINE>{===>} A_hise_resid_8=0; 
 DEFINE>{===>} A_hise_resid_9=0; 
 DEFINE>{===>} A_hise_resid_10=0; 
 DEFINE>{===>} B_hise_resid_1=0; 
 DEFINE>{===>} B_hise_resid_2=0; 
 DEFINE>{===>} B_hise_resid_3=0; 
 DEFINE>{===>} B_hise_resid_4=0; 
 DEFINE>{===>} B_hise_resid_5=0; 
 DEFINE>{===>} B_hise_resid_6=0; 
 DEFINE>{===>} B_hise_resid_7=0; 
 DEFINE>{===>} B_hise_resid_8=0; 
 DEFINE>{===>} B_hise_resid_9=0; 
 DEFINE>{===>} B_hise_resid_10=0; 
 DEFINE>{===>} C_hise_resid_1=0; 
 DEFINE>{===>} C_hise_resid_2=0; 
 DEFINE>{===>} C_hise_resid_3=0; 
 DEFINE>{===>} C_hise_resid_4=0; 
 DEFINE>{===>} C_hise_resid_5=0; 
 DEFINE>{===>} C_hise_resid_6=0; 
 DEFINE>{===>} C_hise_resid_7=0; 
 DEFINE>{===>} C_hise_resid_8=0; 
 DEFINE>{===>} C_hise_resid_9=0; 
 DEFINE>{===>} C_hise_resid_10=0; 
 DEFINE>{===>} D_hise_resid_1=0; 
 DEFINE>{===>} D_hise_resid_2=0; 
 DEFINE>{===>} D_hise_resid_3=0; 
 DEFINE>{===>} D_hise_resid_4=0; 
 DEFINE>{===>} D_hise_resid_5=0; 
 DEFINE>{===>} D_hise_resid_6=0; 
 DEFINE>{===>} D_hise_resid_7=0; 
 DEFINE>{===>} D_hise_resid_8=0; 
 DEFINE>{===>} D_hise_resid_9=0; 
 DEFINE>{===>} D_hise_resid_10=0; 
 DEFINE>{===>} E_hise_resid_1=0; 
 DEFINE>{===>} E_hise_resid_2=0; 
 DEFINE>{===>} E_hise_resid_3=0; 
 DEFINE>{===>} E_hise_resid_4=0; 
 DEFINE>{===>} E_hise_resid_5=0; 
 DEFINE>{===>} E_hise_resid_6=0; 
 DEFINE>{===>} E_hise_resid_7=0; 
 DEFINE>{===>} E_hise_resid_8=0; 
 DEFINE>{===>} E_hise_resid_9=0; 
 DEFINE>{===>} E_hise_resid_10=0; 
 DEFINE>{===>} F_hise_resid_1=0; 
 DEFINE>{===>} F_hise_resid_2=0; 
 DEFINE>{===>} F_hise_resid_3=0; 
 DEFINE>{===>} F_hise_resid_4=0; 
 DEFINE>{===>} F_hise_resid_5=0; 
 DEFINE>{===>} F_hise_resid_6=0; 
 DEFINE>{===>} F_hise_resid_7=0; 
 DEFINE>{===>} F_hise_resid_8=0; 
 DEFINE>{===>} F_hise_resid_9=0; 
 DEFINE>{===>} F_hise_resid_10=0; 
 DEFINE>{========= Definition of semi-flexible interface ============} 
 DEFINE>{* Define the interface of each molecule.*} 
 DEFINE>{* Side-chains and backbone of these residues will be allowed to move during semi-flexible refinement*} 
 DEFINE>{* number of semi-flexible segments for molecule (protein) A (-1 for automated mode) *} 
 DEFINE>{* Note that current max is 10 (edit the run.cns to add more segments *} 
 DEFINE>{===>} nseg_A=-1; 
 DEFINE>{* Residues of molecule (protein) A at interface *} 
 DEFINE>{+ table: rows=10 "segment 1" "segment 2" "segment 3" "segment 4" "segment 5" "segment 6" "segment 7" "segment 8" "segment 9" "segment 10" cols=2 "Start residue" "End residue" +} 
 DEFINE>{===>} A_start_seg_1=""; 
 DEFINE>{===>} A_end_seg_1=""; 
 DEFINE>{===>} A_start_seg_2=""; 
 DEFINE>{===>} A_end_seg_2=""; 
 DEFINE>{===>} A_start_seg_3=""; 
 DEFINE>{===>} A_end_seg_3=""; 
 DEFINE>{===>} A_start_seg_4=""; 
 DEFINE>{===>} A_end_seg_4=""; 
 DEFINE>{===>} A_start_seg_5=""; 
 DEFINE>{===>} A_end_seg_5=""; 
 DEFINE>{===>} A_start_seg_6=""; 
 DEFINE>{===>} A_end_seg_6=""; 
 DEFINE>{===>} A_start_seg_7=""; 
 DEFINE>{===>} A_end_seg_7=""; 
 DEFINE>{===>} A_start_seg_8=""; 
 DEFINE>{===>} A_end_seg_8=""; 
 DEFINE>{===>} A_start_seg_9=""; 
 DEFINE>{===>} A_end_seg_9=""; 
 DEFINE>{===>} A_start_seg_10=""; 
 DEFINE>{===>} A_end_seg_10=""; 
 DEFINE>{* number of semi-flexible segments for molecule (protein) B (-1 for automated mode) *} 
 DEFINE>{* Note that current max is 10 (edit the run.cns to add more segments *} 
 DEFINE>{===>} nseg_B=-1; 
 DEFINE>{* Residues of molecule (protein) B at interface *} 
 DEFINE>{+ table: rows=10 "segment 1" "segment 2" "segment 3" "segment 4" "segment 5" "segment 6" "segment 7" "segment 8" "segment 9" "segment 10" cols=2 "Start residue" "End residue" +} 
 DEFINE>{===>} B_start_seg_1=""; 
 DEFINE>{===>} B_end_seg_1=""; 
 DEFINE>{===>} B_start_seg_2=""; 
 DEFINE>{===>} B_end_seg_2=""; 
 DEFINE>{===>} B_start_seg_3=""; 
 DEFINE>{===>} B_end_seg_3=""; 
 DEFINE>{===>} B_start_seg_4=""; 
 DEFINE>{===>} B_end_seg_4=""; 
 DEFINE>{===>} B_start_seg_5=""; 
 DEFINE>{===>} B_end_seg_5=""; 
 DEFINE>{===>} B_start_seg_6=""; 
 DEFINE>{===>} B_end_seg_6=""; 
 DEFINE>{===>} B_start_seg_7=""; 
 DEFINE>{===>} B_end_seg_7=""; 
 DEFINE>{===>} B_start_seg_8=""; 
 DEFINE>{===>} B_end_seg_8=""; 
 DEFINE>{===>} B_start_seg_9=""; 
 DEFINE>{===>} B_end_seg_9=""; 
 DEFINE>{===>} B_start_seg_10=""; 
 DEFINE>{===>} B_end_seg_10=""; 
 DEFINE>{* number of semi-flexible segments for molecule (protein) C (-1 for automated mode) *} 
 DEFINE>{* Note that current max is 10 (edit the run.cns to add more segments *} 
 DEFINE>{===>} nseg_C=-1; 
 DEFINE>{* Residues of molecule (protein) C at interface *} 
 DEFINE>{+ table: rows=10 "segment 1" "segment 2" "segment 3" "segment 4" "segment 5" "segment 6" "segment 7" "segment 8" "segment 9" "segment 10" cols=2 "Start residue" "End residue" +} 
 DEFINE>{===>} C_start_seg_1=""; 
 DEFINE>{===>} C_end_seg_1=""; 
 DEFINE>{===>} C_start_seg_2=""; 
 DEFINE>{===>} C_end_seg_2=""; 
 DEFINE>{===>} C_start_seg_3=""; 
 DEFINE>{===>} C_end_seg_3=""; 
 DEFINE>{===>} C_start_seg_4=""; 
 DEFINE>{===>} C_end_seg_4=""; 
 DEFINE>{===>} C_start_seg_5=""; 
 DEFINE>{===>} C_end_seg_5=""; 
 DEFINE>{===>} C_start_seg_6=""; 
 DEFINE>{===>} C_end_seg_6=""; 
 DEFINE>{===>} C_start_seg_7=""; 
 DEFINE>{===>} C_end_seg_7=""; 
 DEFINE>{===>} C_start_seg_8=""; 
 DEFINE>{===>} C_end_seg_8=""; 
 DEFINE>{===>} C_start_seg_9=""; 
 DEFINE>{===>} C_end_seg_9=""; 
 DEFINE>{===>} C_start_seg_10=""; 
 DEFINE>{===>} C_end_seg_10=""; 
 DEFINE>{* number of semi-flexible segments for molecule (protein) D (-1 for automated mode) *} 
 DEFINE>{* Note that current max is 10 (edit the run.cns to add more segments *} 
 DEFINE>{===>} nseg_D=-1; 
 DEFINE>{* Residues of molecule (protein) D at interface *} 
 DEFINE>{+ table: rows=10 "segment 1" "segment 2" "segment 3" "segment 4" "segment 5" "segment 6" "segment 7" "segment 8" "segment 9" "segment 10" cols=2 "Start residue" "End residue" +} 
 DEFINE>{===>} D_start_seg_1=""; 
 DEFINE>{===>} D_end_seg_1=""; 
 DEFINE>{===>} D_start_seg_2=""; 
 DEFINE>{===>} D_end_seg_2=""; 
 DEFINE>{===>} D_start_seg_3=""; 
 DEFINE>{===>} D_end_seg_3=""; 
 DEFINE>{===>} D_start_seg_4=""; 
 DEFINE>{===>} D_end_seg_4=""; 
 DEFINE>{===>} D_start_seg_5=""; 
 DEFINE>{===>} D_end_seg_5=""; 
 DEFINE>{===>} D_start_seg_6=""; 
 DEFINE>{===>} D_end_seg_6=""; 
 DEFINE>{===>} D_start_seg_7=""; 
 DEFINE>{===>} D_end_seg_7=""; 
 DEFINE>{===>} D_start_seg_8=""; 
 DEFINE>{===>} D_end_seg_8=""; 
 DEFINE>{===>} D_start_seg_9=""; 
 DEFINE>{===>} D_end_seg_9=""; 
 DEFINE>{===>} D_start_seg_10=""; 
 DEFINE>{===>} D_end_seg_10=""; 
 DEFINE>{* number of semi-flexible segments for molecule (protein) E (-1 for automated mode) *} 
 DEFINE>{* Note that current max is 10 (edit the run.cns to add more segments *} 
 DEFINE>{===>} nseg_E=-1; 
 DEFINE>{* Residues of molecule (protein) E at interface *} 
 DEFINE>{+ table: rows=10 "segment 1" "segment 2" "segment 3" "segment 4" "segment 5" "segment 6" "segment 7" "segment 8" "segment 9" "segment 10" cols=2 "Start residue" "End residue" +} 
 DEFINE>{===>} E_start_seg_1=""; 
 DEFINE>{===>} E_end_seg_1=""; 
 DEFINE>{===>} E_start_seg_2=""; 
 DEFINE>{===>} E_end_seg_2=""; 
 DEFINE>{===>} E_start_seg_3=""; 
 DEFINE>{===>} E_end_seg_3=""; 
 DEFINE>{===>} E_start_seg_4=""; 
 DEFINE>{===>} E_end_seg_4=""; 
 DEFINE>{===>} E_start_seg_5=""; 
 DEFINE>{===>} E_end_seg_5=""; 
 DEFINE>{===>} E_start_seg_6=""; 
 DEFINE>{===>} E_end_seg_6=""; 
 DEFINE>{===>} E_start_seg_7=""; 
 DEFINE>{===>} E_end_seg_7=""; 
 DEFINE>{===>} E_start_seg_8=""; 
 DEFINE>{===>} E_end_seg_8=""; 
 DEFINE>{===>} E_start_seg_9=""; 
 DEFINE>{===>} E_end_seg_9=""; 
 DEFINE>{===>} E_start_seg_10=""; 
 DEFINE>{===>} E_end_seg_10=""; 
 DEFINE>{* number of semi-flexible segments for molecule (protein) F (-1 for automated mode) *} 
 DEFINE>{* Note that current max is 10 (edit the run.cns to add more segments *} 
 DEFINE>{===>} nseg_F=-1; 
 DEFINE>{* Residues of molecule (protein) F at interface *} 
 DEFINE>{+ table: rows=10 "segment 1" "segment 2" "segment 3" "segment 4" "segment 5" "segment 6" "segment 7" "segment 8" "segment 9" "segment 10" cols=2 "Start residue" "End residue" +} 
 DEFINE>{===>} F_start_seg_1=""; 
 DEFINE>{===>} F_end_seg_1=""; 
 DEFINE>{===>} F_start_seg_2=""; 
 DEFINE>{===>} F_end_seg_2=""; 
 DEFINE>{===>} F_start_seg_3=""; 
 DEFINE>{===>} F_end_seg_3=""; 
 DEFINE>{===>} F_start_seg_4=""; 
 DEFINE>{===>} F_end_seg_4=""; 
 DEFINE>{===>} F_start_seg_5=""; 
 DEFINE>{===>} F_end_seg_5=""; 
 DEFINE>{===>} F_start_seg_6=""; 
 DEFINE>{===>} F_end_seg_6=""; 
 DEFINE>{===>} F_start_seg_7=""; 
 DEFINE>{===>} F_end_seg_7=""; 
 DEFINE>{===>} F_start_seg_8=""; 
 DEFINE>{===>} F_end_seg_8=""; 
 DEFINE>{===>} F_start_seg_9=""; 
 DEFINE>{===>} F_end_seg_9=""; 
 DEFINE>{===>} F_start_seg_10=""; 
 DEFINE>{===>} F_end_seg_10=""; 
 DEFINE> 
 DEFINE>{=========== Definition of fully flexible segments ==========} 
 DEFINE>{* Define the fully flexible segment of each molecule.*} 
 DEFINE>{* These segments will be allowed to move at all stages of it1 *} 
 DEFINE>{* Fully flexible segments for molecule (protein) A            *} 
 DEFINE>{* Note that current max is 5 (edit the run.cns to add more segments     *} 
 DEFINE>{===>} nfle_A=0; 
 DEFINE>{* Residues of molecule (protein) A at interface *} 
 DEFINE>{+ table: rows=5 "segment 1" "segment 2" "segment 3" "segment 4" "segment 5" cols=2 "Start residue" "End residue" +} 
 DEFINE>{===>} A_start_fle_1=""; 
 DEFINE>{===>} A_end_fle_1=""; 
 DEFINE>{===>} A_start_fle_2=""; 
 DEFINE>{===>} A_end_fle_2=""; 
 DEFINE>{===>} A_start_fle_3=""; 
 DEFINE>{===>} A_end_fle_3=""; 
 DEFINE>{===>} A_start_fle_4=""; 
 DEFINE>{===>} A_end_fle_4=""; 
 DEFINE>{===>} A_start_fle_5=""; 
 DEFINE>{===>} A_end_fle_5=""; 
 DEFINE>{* Fully flexible segments for molecule (protein) B            *} 
 DEFINE>{* Note that current max is 5 (edit the run.cns to add more segments     *} 
 DEFINE>{===>} nfle_B=0; 
 DEFINE>{* Residues of molecule (protein) B at interface *} 
 DEFINE>{+ table: rows=5 "segment 1" "segment 2" "segment 3" "segment 4" "segment 5" cols=2 "Start residue" "End residue" +} 
 DEFINE>{===>} B_start_fle_1=""; 
 DEFINE>{===>} B_end_fle_1=""; 
 DEFINE>{===>} B_start_fle_2=""; 
 DEFINE>{===>} B_end_fle_2=""; 
 DEFINE>{===>} B_start_fle_3=""; 
 DEFINE>{===>} B_end_fle_3=""; 
 DEFINE>{===>} B_start_fle_4=""; 
 DEFINE>{===>} B_end_fle_4=""; 
 DEFINE>{===>} B_start_fle_5=""; 
 DEFINE>{===>} B_end_fle_5=""; 
 DEFINE>{* Fully flexible segments for molecule (protein) C            *} 
 DEFINE>{* Note that current max is 5 (edit the run.cns to add more segments     *} 
 DEFINE>{===>} nfle_C=0; 
 DEFINE>{* Residues of molecule (protein) C at interface *} 
 DEFINE>{+ table: rows=5 "segment 1" "segment 2" "segment 3" "segment 4" "segment 5" cols=2 "Start residue" "End residue" +} 
 DEFINE>{===>} C_start_fle_1=""; 
 DEFINE>{===>} C_end_fle_1=""; 
 DEFINE>{===>} C_start_fle_2=""; 
 DEFINE>{===>} C_end_fle_2=""; 
 DEFINE>{===>} C_start_fle_3=""; 
 DEFINE>{===>} C_end_fle_3=""; 
 DEFINE>{===>} C_start_fle_4=""; 
 DEFINE>{===>} C_end_fle_4=""; 
 DEFINE>{===>} C_start_fle_5=""; 
 DEFINE>{===>} C_end_fle_5=""; 
 DEFINE>{* Fully flexible segments for molecule (protein) D            *} 
 DEFINE>{* Note that current max is 5 (edit the run.cns to add more segments     *} 
 DEFINE>{===>} nfle_D=0; 
 DEFINE>{* Residues of molecule (protein) D at interface *} 
 DEFINE>{+ table: rows=5 "segment 1" "segment 2" "segment 3" "segment 4" "segment 5" cols=2 "Start residue" "End residue" +} 
 DEFINE>{===>} D_start_fle_1=""; 
 DEFINE>{===>} D_end_fle_1=""; 
 DEFINE>{===>} D_start_fle_2=""; 
 DEFINE>{===>} D_end_fle_2=""; 
 DEFINE>{===>} D_start_fle_3=""; 
 DEFINE>{===>} D_end_fle_3=""; 
 DEFINE>{===>} D_start_fle_4=""; 
 DEFINE>{===>} D_end_fle_4=""; 
 DEFINE>{===>} D_start_fle_5=""; 
 DEFINE>{===>} D_end_fle_5=""; 
 DEFINE>{* Fully flexible segments for molecule (protein) E            *} 
 DEFINE>{* Note that current max is 5 (edit the run.cns to add more segments     *} 
 DEFINE>{===>} nfle_E=0; 
 DEFINE>{* Residues of molecule (protein) E at interface *} 
 DEFINE>{+ table: rows=5 "segment 1" "segment 2" "segment 3" "segment 4" "segment 5" cols=2 "Start residue" "End residue" +} 
 DEFINE>{===>} E_start_fle_1=""; 
 DEFINE>{===>} E_end_fle_1=""; 
 DEFINE>{===>} E_start_fle_2=""; 
 DEFINE>{===>} E_end_fle_2=""; 
 DEFINE>{===>} E_start_fle_3=""; 
 DEFINE>{===>} E_end_fle_3=""; 
 DEFINE>{===>} E_start_fle_4=""; 
 DEFINE>{===>} E_end_fle_4=""; 
 DEFINE>{===>} E_start_fle_5=""; 
 DEFINE>{===>} E_end_fle_5=""; 
 DEFINE>{* Fully flexible segments for molecule (protein) F            *} 
 DEFINE>{* Note that current max is 5 (edit the run.cns to add more segments     *} 
 DEFINE>{===>} nfle_F=0; 
 DEFINE>{* Residues of molecule (protein) F at interface *} 
 DEFINE>{+ table: rows=5 "segment 1" "segment 2" "segment 3" "segment 4" "segment 5" cols=2 "Start residue" "End residue" +} 
 DEFINE>{===>} F_start_fle_1=""; 
 DEFINE>{===>} F_end_fle_1=""; 
 DEFINE>{===>} F_start_fle_2=""; 
 DEFINE>{===>} F_end_fle_2=""; 
 DEFINE>{===>} F_start_fle_3=""; 
 DEFINE>{===>} F_end_fle_3=""; 
 DEFINE>{===>} F_start_fle_4=""; 
 DEFINE>{===>} F_end_fle_4=""; 
 DEFINE>{===>} F_start_fle_5=""; 
 DEFINE>{===>} F_end_fle_5=""; 
 DEFINE> 
 DEFINE>{====================== NCS restraints  =====================} 
 DEFINE>{* Do you want to use NCS restraints? *} 
 DEFINE>{+ choice: true false +} 
 DEFINE>{===>} ncs_on=false; 
 DEFINE>{* Force constant for NCS restraints *} 
 DEFINE>{===>} kncs=1.0; 
 DEFINE>{* Number of NCS pairs *} 
 DEFINE>{===>} numncs=0; 
 DEFINE>{* Define the segments pairs for NCS restraints *} 
 DEFINE>{+ table: rows=5 "pair 1" "pair 2" "pair 3" "pair 4" "pair 5" cols=6 "Start res seg1" "End res seg1" "Segid seg1" "Start res seg2" "End res seg2" "Segid seg2" +} 
 DEFINE>{===>} ncs_sta1_1=""; 
 DEFINE>{===>} ncs_end1_1=""; 
 DEFINE>{===>} ncs_seg1_1=""; 
 DEFINE>{===>} ncs_sta2_1=""; 
 DEFINE>{===>} ncs_end2_1=""; 
 DEFINE>{===>} ncs_seg2_1=""; 
 DEFINE>{===>} ncs_sta1_2=""; 
 DEFINE>{===>} ncs_end1_2=""; 
 DEFINE>{===>} ncs_seg1_2=""; 
 DEFINE>{===>} ncs_sta2_2=""; 
 DEFINE>{===>} ncs_end2_2=""; 
 DEFINE>{===>} ncs_seg2_2=""; 
 DEFINE>{===>} ncs_sta1_3=""; 
 DEFINE>{===>} ncs_end1_3=""; 
 DEFINE>{===>} ncs_seg1_3=""; 
 DEFINE>{===>} ncs_sta2_3=""; 
 DEFINE>{===>} ncs_end2_3=""; 
 DEFINE>{===>} ncs_seg2_3=""; 
 DEFINE>{===>} ncs_sta1_4=""; 
 DEFINE>{===>} ncs_end1_4=""; 
 DEFINE>{===>} ncs_seg1_4=""; 
 DEFINE>{===>} ncs_sta2_4=""; 
 DEFINE>{===>} ncs_end2_4=""; 
 DEFINE>{===>} ncs_seg2_4=""; 
 DEFINE>{===>} ncs_sta1_5=""; 
 DEFINE>{===>} ncs_end1_5=""; 
 DEFINE>{===>} ncs_seg1_5=""; 
 DEFINE>{===>} ncs_sta2_5=""; 
 DEFINE>{===>} ncs_end2_5=""; 
 DEFINE>{===>} ncs_seg2_5=""; 
 DEFINE>{==================== Symmetry restraints  ==================} 
 DEFINE>{* Do you want to use symmetry restraints ? *} 
 DEFINE>{+ choice: true false +} 
 DEFINE>{===>} sym_on=false; 
 DEFINE>{* Force constant for symmetry restraints ? *} 
 DEFINE>{===>} ksym=10.0; 
 DEFINE>{* Number of C2 symmetry pairs *} 
 DEFINE>{===>} numc2sym=0; 
 DEFINE>{* Define the segment pairs for C2 symmetry restraints *} 
 DEFINE>{+ table: rows=10 "pair 1" "pair 2" "pair 3" "pair 4" "pair 5" "pair 6" "pair 7" "pair 8" "pair 9" "pair 10" cols=6 "Start res seg1" "End res seg1" "Segid seg1" "Start res seg2" "End res seg2" "Segid seg2" +} 
 DEFINE>{===>} c2sym_sta1_1=""; 
 DEFINE>{===>} c2sym_end1_1=""; 
 DEFINE>{===>} c2sym_seg1_1=""; 
 DEFINE>  {===>} c2sym_sta2_1=""; 
 DEFINE>{===>} c2sym_end2_1=""; 
 DEFINE>{===>} c2sym_seg2_1=""; 
 DEFINE>  {===>} c2sym_sta1_2=""; 
 DEFINE>{===>} c2sym_end1_2=""; 
 DEFINE>{===>} c2sym_seg1_2=""; 
 DEFINE>  {===>} c2sym_sta2_2=""; 
 DEFINE>{===>} c2sym_end2_2=""; 
 DEFINE>{===>} c2sym_seg2_2=""; 
 DEFINE>  {===>} c2sym_sta1_3=""; 
 DEFINE>{===>} c2sym_end1_3=""; 
 DEFINE>{===>} c2sym_seg1_3=""; 
 DEFINE>  {===>} c2sym_sta2_3=""; 
 DEFINE>{===>} c2sym_end2_3=""; 
 DEFINE>{===>} c2sym_seg2_3=""; 
 DEFINE>  {===>} c2sym_sta1_4=""; 
 DEFINE>{===>} c2sym_end1_4=""; 
 DEFINE>{===>} c2sym_seg1_4=""; 
 DEFINE>  {===>} c2sym_sta2_4=""; 
 DEFINE>{===>} c2sym_end2_4=""; 
 DEFINE>{===>} c2sym_seg2_4=""; 
 DEFINE>  {===>} c2sym_sta1_5=""; 
 DEFINE>{===>} c2sym_end1_5=""; 
 DEFINE>{===>} c2sym_seg1_5=""; 
 DEFINE>  {===>} c2sym_sta2_5=""; 
 DEFINE>{===>} c2sym_end2_5=""; 
 DEFINE>{===>} c2sym_seg2_5=""; 
 DEFINE>  {===>} c2sym_sta1_6=""; 
 DEFINE>{===>} c2sym_end1_6=""; 
 DEFINE>{===>} c2sym_seg1_6=""; 
 DEFINE>  {===>} c2sym_sta2_6=""; 
 DEFINE>{===>} c2sym_end2_6=""; 
 DEFINE>{===>} c2sym_seg2_6=""; 
 DEFINE>  {===>} c2sym_sta1_7=""; 
 DEFINE>{===>} c2sym_end1_7=""; 
 DEFINE>{===>} c2sym_seg1_7=""; 
 DEFINE>  {===>} c2sym_sta2_7=""; 
 DEFINE>{===>} c2sym_end2_7=""; 
 DEFINE>{===>} c2sym_seg2_7=""; 
 DEFINE>  {===>} c2sym_sta1_8=""; 
 DEFINE>{===>} c2sym_end1_8=""; 
 DEFINE>{===>} c2sym_seg1_8=""; 
 DEFINE>  {===>} c2sym_sta2_8=""; 
 DEFINE>{===>} c2sym_end2_8=""; 
 DEFINE>{===>} c2sym_seg2_8=""; 
 DEFINE>  {===>} c2sym_sta1_9=""; 
 DEFINE>{===>} c2sym_end1_9=""; 
 DEFINE>{===>} c2sym_seg1_9=""; 
 DEFINE>  {===>} c2sym_sta2_9=""; 
 DEFINE>{===>} c2sym_end2_9=""; 
 DEFINE>{===>} c2sym_seg2_9=""; 
 DEFINE>  {===>} c2sym_sta1_10=""; 
 DEFINE>{===>} c2sym_end1_10=""; 
 DEFINE>{===>} c2sym_seg1_10=""; 
 DEFINE>  {===>} c2sym_sta2_10=""; 
 DEFINE>{===>} c2sym_end2_10=""; 
 DEFINE>{===>} c2sym_seg2_10=""; 
 DEFINE> 
 DEFINE>{* Number of C3 symmetry triples *} 
 DEFINE>{===>} numc3sym=0; 
 DEFINE>{* Define the segment triples for C3 symmetry restraints *} 
 DEFINE>{+ table: rows=2 "triple 1" "triple 2" cols=9 "Start res seg1" "End res seg1" "Segid seg1" "Start res seg2" "End res seg2" "Segid seg2" "Start res seg3" "End res seg3" "Segid seg3" +} 
 DEFINE>{===>} c3sym_sta1_1=""; 
 DEFINE>{===>} c3sym_end1_1=""; 
 DEFINE>{===>} c3sym_seg1_1=""; 
 DEFINE>  {===>} c3sym_sta2_1=""; 
 DEFINE>{===>} c3sym_end2_1=""; 
 DEFINE>{===>} c3sym_seg2_1=""; 
 DEFINE>  {===>} c3sym_sta3_1=""; 
 DEFINE>{===>} c3sym_end3_1=""; 
 DEFINE>{===>} c3sym_seg3_1=""; 
 DEFINE>  {===>} c3sym_sta1_2=""; 
 DEFINE>{===>} c3sym_end1_2=""; 
 DEFINE>{===>} c3sym_seg1_2=""; 
 DEFINE>  {===>} c3sym_sta2_2=""; 
 DEFINE>{===>} c3sym_end2_2=""; 
 DEFINE>{===>} c3sym_seg2_2=""; 
 DEFINE>  {===>} c3sym_sta3_2=""; 
 DEFINE>{===>} c3sym_end3_2=""; 
 DEFINE>{===>} c3sym_seg3_2=""; 
 DEFINE> 
 DEFINE>{* Number of S3 symmetry triples *} 
 DEFINE>{===>} nums3sym=0; 
 DEFINE>{* Define the segment triples for S3 symmetry restraints *} 
 DEFINE>{+ table: rows=4 "triple 1" "triple 2" "triple 3" "triple 4" cols=9 "Start res seg1" "End res seg1" "Segid seg1" "Start res seg2" "End res seg2" "Segid seg2" "Start res seg3" "End res seg3" "Segid seg3" +} 
 DEFINE>{===>} s3sym_sta1_1=""; 
 DEFINE>{===>} s3sym_end1_1=""; 
 DEFINE>{===>} s3sym_seg1_1=""; 
 DEFINE>  {===>} s3sym_sta2_1=""; 
 DEFINE>{===>} s3sym_end2_1=""; 
 DEFINE>{===>} s3sym_seg2_1=""; 
 DEFINE>  {===>} s3sym_sta3_1=""; 
 DEFINE>{===>} s3sym_end3_1=""; 
 DEFINE>{===>} s3sym_seg3_1=""; 
 DEFINE>  {===>} s3sym_sta1_2=""; 
 DEFINE>{===>} s3sym_end1_2=""; 
 DEFINE>{===>} s3sym_seg1_2=""; 
 DEFINE>  {===>} s3sym_sta2_2=""; 
 DEFINE>{===>} s3sym_end2_2=""; 
 DEFINE>{===>} s3sym_seg2_2=""; 
 DEFINE>  {===>} s3sym_sta3_2=""; 
 DEFINE>{===>} s3sym_end3_2=""; 
 DEFINE>{===>} s3sym_seg3_2=""; 
 DEFINE>  {===>} s3sym_sta1_3=""; 
 DEFINE>{===>} s3sym_end1_3=""; 
 DEFINE>{===>} s3sym_seg1_3=""; 
 DEFINE>  {===>} s3sym_sta2_3=""; 
 DEFINE>{===>} s3sym_end2_3=""; 
 DEFINE>{===>} s3sym_seg2_3=""; 
 DEFINE>  {===>} s3sym_sta3_3=""; 
 DEFINE>{===>} s3sym_end3_3=""; 
 DEFINE>{===>} s3sym_seg3_3=""; 
 DEFINE>  {===>} s3sym_sta1_4=""; 
 DEFINE>{===>} s3sym_end1_4=""; 
 DEFINE>{===>} s3sym_seg1_4=""; 
 DEFINE>  {===>} s3sym_sta2_4=""; 
 DEFINE>{===>} s3sym_end2_4=""; 
 DEFINE>{===>} s3sym_seg2_4=""; 
 DEFINE>  {===>} s3sym_sta3_4=""; 
 DEFINE>{===>} s3sym_end3_4=""; 
 DEFINE>{===>} s3sym_seg3_4=""; 
 DEFINE> 
 DEFINE>{* Number of C4 symmetry quadruples *} 
 DEFINE>{===>} numc4sym=0; 
 DEFINE>{* Define the segment quadruples for C4 symmetry restraints *} 
 DEFINE>{+ table: rows=2 "quadruple 1" "quadruple 2" cols=12 "Start res seg1" "End res seg1" "Segid seg1" "Start res seg2" "End res seg2" "Segid seg2" "Start res seg3" "End res seg3" "Segid seg3" "Start res seg4" "End res seg4" "Segid seg4" +} 
 DEFINE>{===>} c4sym_sta1_1=""; 
 DEFINE>{===>} c4sym_end1_1=""; 
 DEFINE>{===>} c4sym_seg1_1=""; 
 DEFINE>  {===>} c4sym_sta2_1=""; 
 DEFINE>{===>} c4sym_end2_1=""; 
 DEFINE>{===>} c4sym_seg2_1=""; 
 DEFINE>  {===>} c4sym_sta3_1=""; 
 DEFINE>{===>} c4sym_end3_1=""; 
 DEFINE>{===>} c4sym_seg3_1=""; 
 DEFINE>  {===>} c4sym_sta4_1=""; 
 DEFINE>{===>} c4sym_end4_1=""; 
 DEFINE>{===>} c4sym_seg4_1=""; 
 DEFINE>  {===>} c4sym_sta1_2=""; 
 DEFINE>{===>} c4sym_end1_2=""; 
 DEFINE>{===>} c4sym_seg1_2=""; 
 DEFINE>  {===>} c4sym_sta2_2=""; 
 DEFINE>{===>} c4sym_end2_2=""; 
 DEFINE>{===>} c4sym_seg2_2=""; 
 DEFINE>  {===>} c4sym_sta3_2=""; 
 DEFINE>{===>} c4sym_end3_2=""; 
 DEFINE>{===>} c4sym_seg3_2=""; 
 DEFINE>  {===>} c4sym_sta4_2=""; 
 DEFINE>{===>} c4sym_end4_2=""; 
 DEFINE>{===>} c4sym_seg4_2=""; 
 DEFINE> 
 DEFINE>{* Number of C5 symmetry *} 
 DEFINE>{===>} numc5sym=0; 
 DEFINE>{* Define the segments for C5 symmetry restraints *} 
 DEFINE>{+ table: rows=5 "Segment1" "Segment2" "Segment3" "Segment4" "Segment5" cols=3 "Start residue" "End residue" "Segid" +} 
 DEFINE>{===>} c5sym_sta1_1=""; 
 DEFINE>{===>} c5sym_end1_1=""; 
 DEFINE>{===>} c5sym_seg1_1=""; 
 DEFINE>  {===>} c5sym_sta2_1=""; 
 DEFINE>{===>} c5sym_end2_1=""; 
 DEFINE>{===>} c5sym_seg2_1=""; 
 DEFINE>  {===>} c5sym_sta3_1=""; 
 DEFINE>{===>} c5sym_end3_1=""; 
 DEFINE>{===>} c5sym_seg3_1=""; 
 DEFINE>  {===>} c5sym_sta4_1=""; 
 DEFINE>{===>} c5sym_end4_1=""; 
 DEFINE>{===>} c5sym_seg4_1=""; 
 DEFINE>  {===>} c5sym_sta5_1=""; 
 DEFINE>{===>} c5sym_end5_1=""; 
 DEFINE>{===>} c5sym_seg5_1=""; 
 DEFINE> 
 DEFINE>{=========================== Distance restraints  ========================} 
 DEFINE>{* Turn on/off and energy constants for distance restraints *} 
 DEFINE>{+ table: rows=3 "distances" "AIR (ambig)" "hbonds" cols=6 "firstIteration" "lastIteration" "hot" "cool1" "cool2" "cool3"+} 
 DEFINE>{===>} unamb_firstit=0; 
 DEFINE>{===>} unamb_lastit=2; 
 DEFINE>{===>} unamb_hot=10; 
 DEFINE>{===>} unamb_cool1=10; 
 DEFINE>{===>} unamb_cool2=50; 
 DEFINE>{===>} unamb_cool3=50; 
 DEFINE>{===>} amb_firstit=0; 
 DEFINE>{===>} amb_lastit=2; 
 DEFINE>{===>} amb_hot=10; 
 DEFINE>{===>} amb_cool1=10; 
 DEFINE>{===>} amb_cool2=50; 
 DEFINE>{===>} amb_cool3=50; 
 DEFINE>{===>} hbond_firstit=1; 
 DEFINE>{===>} hbond_lastit=2; 
 DEFINE>{===>} hbond_hot=10; 
 DEFINE>{===>} hbond_cool1=10; 
 DEFINE>{===>} hbond_cool2=50; 
 DEFINE>{===>} hbond_cool3=50; 
 DEFINE>{* Do you want to randomly exclude a fraction of the ambiguous restraints (AIRs)? *} 
 DEFINE>{+ choice: true false +} 
 DEFINE>{===>} noecv=true; 
 DEFINE>{* Number of partitions for random exclusion (%excluded=100/number of partitions)? *} 
 DEFINE>{===>} ncvpart=2.0; 
 DEFINE>{* Do you want to use hydrogen bond restraints? *} 
 DEFINE>{+ choice: true false +} 
 DEFINE>{===>} hbonds_on=false; 
 DEFINE>{* Do you want to define randomly ambiguous interaction restraints from accessible residues? *} 
 DEFINE>{* Only residues in the defined flexible segments will be considered *} 
 DEFINE>{* Note that this option is exclusive with any other distance restraints and only for it0    *} 
 DEFINE>{+ choice: true false +} 
 DEFINE>{===>} ranair=false; 
 DEFINE>{* Do you want to define center of mass restraints to enforce contact between the molecules? *} 
 DEFINE>{* Note that these are only active during it0 and it1 *} 
 DEFINE>{+ choice: true false +} 
 DEFINE>{===>} cmrest=true; 
 DEFINE>{* Force constant for center of mass restraints *} 
 DEFINE>{===>} kcont=1.0; 
 DEFINE>{* Do you want to define surface contact restraints to enforce contact between the molecules? *} 
 DEFINE>{* Note that these are only active during it0 and it1 *} 
 DEFINE>{+ choice: true false +} 
 DEFINE>{===>} surfrest=true; 
 DEFINE>{* Force constant for surface contact restraints *} 
 DEFINE>{===>} ksurf=1.0; 
 DEFINE>{* Do you want to define a radius of gyration restraint (e.g. from SAXS)? *} 
 DEFINE>{+ choice: true false +} 
 DEFINE>{===>} rgrest=false; 
 DEFINE>{* Radius of gyration *} 
 DEFINE>{===>} rgtarg=17.78; 
 DEFINE>{* Force constant for radius of gyration restraint *} 
 DEFINE>{===>} krg_hot=100; 
 DEFINE>{===>} krg_cool1=100; 
 DEFINE>{===>} krg_cool2=100; 
 DEFINE>{===>} krg_cool3=100; 
 DEFINE>{* Atom selections for the radius of gyration restraint *} 
 DEFINE>{===>} rgsele="all"; 
 DEFINE>{ Use automated distance restraints weighting } 
 DEFINE>{ choice: true false } 
 DEFINE>air_scaling=false; 
 DEFINE>{ Define the number of distance restraints for automated weighting } 
 DEFINE>tot_unamb=25; 
 DEFINE>{ Define the number of AIR restraints for automated weighting } 
 DEFINE>tot_amb=0; 
 DEFINE>{ potential shape } 
 DEFINE>mrswi_hot=0.5; 
 DEFINE>mrswi_cool1=0.5; 
 DEFINE>mrswi_cool2=0.5; 
 DEFINE>mrswi_cool3=0.5; 
 DEFINE>rswi_hot=0.5; 
 DEFINE>rswi_cool1=0.5; 
 DEFINE>rswi_cool2=0.5; 
 DEFINE>rswi_cool3=0.5; 
 DEFINE>masy_hot=-1.0; 
 DEFINE>masy_cool1=-1.0; 
 DEFINE>masy_cool2=-0.1; 
 DEFINE>masy_cool3=-0.1; 
 DEFINE>asy_hot=1.0; 
 DEFINE>asy_cool1=1.0; 
 DEFINE>asy_cool2=0.1; 
 DEFINE>asy_cool3=0.1; 
 DEFINE>{======================DNA-RNA restraints ============================} 
 DEFINE>{* Use DNA/RNA restraints (dna-rna_restraints.def in data/sequence)? *} 
 DEFINE>{+ choice: true false +} 
 DEFINE>{===>} dnarest_on=false; 
 DEFINE>{=========================== dihedrals restraints ====================} 
 DEFINE>{* energy constants *} 
 DEFINE>{+ table: rows=1 "dihedrals" cols=5 "use?" "hot" "cool1" "cool2" "cool3" +} 
 DEFINE>{+ choice: true false +} 
 DEFINE>{===>} dihedrals_on=false; 
 DEFINE>{===>} dihedrals_hot=5; 
 DEFINE>{===>} dihedrals_cool1=5; 
 DEFINE>{===>} dihedrals_cool2=50; 
 DEFINE>{===>} dihedrals_cool3=200; 
 DEFINE>{* Automatically define backbone dihedral angle restraints from structure? *} 
 DEFINE>{+ choice: none all alpha alphabeta +} 
 DEFINE>{===>} ssdihed=none; 
 DEFINE>{=========================== Karplus coupling restraints ====================} 
 DEFINE>{* Karplus coefficients: edit manually the run.cns file to specify them if needed   *} 
 DEFINE>{* The jcoupling restraint files should be present in the data/jcouplings directory *} 
 DEFINE>{* and named c1.tbl, c2.tbl, ... *} 
 DEFINE> c1_on=false; 
 DEFINE> c1_karplusa=6.98; 
 DEFINE> c1_karplusb=-1.38; 
 DEFINE> c1_karplusc=1.72; 
 DEFINE> c1_karplusd=-60.0; 
 DEFINE> c1_hot=0.0; 
 DEFINE> c1_cool1=0.2; 
 DEFINE> c1_cool2=1.0; 
 DEFINE> c1_cool3=1.0; 
 DEFINE> c2_on=false; 
 DEFINE> c2_karplusa=6.98; 
 DEFINE> c2_karplusb=-1.38; 
 DEFINE> c2_karplusc=1.72; 
 DEFINE> c2_karplusd=-120.0; 
 DEFINE> c2_hot=0.0; 
 DEFINE> c2_cool1=0.2; 
 DEFINE> c2_cool2=1.0; 
 DEFINE> c2_cool3=1.0; 
 DEFINE> c3_on=false; 
 DEFINE> c3_karplusa=6.98; 
 DEFINE> c3_karplusb=-1.38; 
 DEFINE> c3_karplusc=1.72; 
 DEFINE> c3_karplusd=-120.0; 
 DEFINE> c3_hot=0.0; 
 DEFINE> c3_cool1=0.2; 
 DEFINE> c3_cool2=1.0; 
 DEFINE> c3_cool3=1.0; 
 DEFINE> c4_on=false; 
 DEFINE> c4_karplusa=6.98; 
 DEFINE> c4_karplusb=-1.38; 
 DEFINE> c4_karplusc=1.72; 
 DEFINE> c4_karplusd=-120.0; 
 DEFINE> c4_hot=0.0; 
 DEFINE> c4_cool1=0.2; 
 DEFINE> c4_cool2=1.0; 
 DEFINE> c4_cool3=1.0; 
 DEFINE> c5_on=false; 
 DEFINE> c5_karplusa=6.98; 
 DEFINE> c5_karplusb=-1.38; 
 DEFINE> c5_karplusc=1.72; 
 DEFINE> c5_karplusd=-120.0; 
 DEFINE> c5_hot=0.0; 
 DEFINE> c5_cool1=0.2; 
 DEFINE> c5_cool2=1.0; 
 DEFINE> c5_cool3=1.0; 
 DEFINE>{=========================== residual dipolar couplings ======================} 
 DEFINE>{* Parameters *} 
 DEFINE>{+ table: rows=5 "class1" "class2" "class3" "class4" "class5" 
 DEFINE>          cols=25 "type" "firstIt" "lastIt" "Ksani<br>(hot)" "Ksani<br>(cool1)" "Ksani<br>(cool2)" "Ksani<br>(cool3)" "R" "D" 
 DEFINE> "Kvean<br>(ini_bor_hot)" "Kvean<br>(fin_bor_hot)" 
 DEFINE> "Kvean<br>(ini_bor_cool1)" "Kvean<br>(fin_bor_cool1)" 
 DEFINE> "Kvean<br>(ini_bor_cool2)" "Kvean<br>(fin_bor_cool2)" 
 DEFINE> "Kvean<br>(ini_bor_cool3)" "Kvean<br>(fin_bor_cool3)" 
 DEFINE> "Kvean<br>(ini_cen_hot)" "Kvean<br>(fin_cen_hot)" 
 DEFINE> "Kvean<br>(ini_cen_cool1)" "Kvean<br>(fin_cen_cool1)" 
 DEFINE> "Kvean<br>(ini_cen_cool2)" "Kvean<br>(fin_cen_cool2)" 
 DEFINE> "Kvean<br>(ini_cen_cool3)" "Kvean<br>(fin_cen_cool3)"+} 
 DEFINE>{+ choice: "NO" "SANI" "XRDC" "VANGLE" +} 
 DEFINE>{===>} rdc1_choice="NO"; 
 DEFINE>{===>} rdc1_firstIt=0; 
 DEFINE>{===>} rdc1_lastIt=2; 
 DEFINE>{===>} rdc1_hot=0.1; 
 DEFINE>{===>} rdc1_cool1=1.0; 
 DEFINE>{===>} rdc1_cool2=1.0; 
 DEFINE>{===>} rdc1_cool3=1.0; 
 DEFINE>{===>} rdc1_r=0.4; 
 DEFINE>{===>} rdc1_d=8.0; 
 DEFINE>{===>} ini_bor_hot_1=1.0; 
 DEFINE>{===>} fin_bor_hot_1=10.0; 
 DEFINE>{===>} ini_bor_cool1_1=10.0; 
 DEFINE>{===>} fin_bor_cool1_1=40.0; 
 DEFINE>{===>} ini_bor_cool2_1=40.0; 
 DEFINE>{===>} fin_bor_cool2_1=40.0; 
 DEFINE>{===>} ini_bor_cool3_1=40.0; 
 DEFINE>{===>} fin_bor_cool3_1=40.0; 
 DEFINE>{===>} ini_cen_hot_1=0.25; 
 DEFINE>{===>} fin_cen_hot_1=2.5; 
 DEFINE>{===>} ini_cen_cool1_1=2.5; 
 DEFINE>{===>} fin_cen_cool1_1=10.0; 
 DEFINE>{===>} ini_cen_cool2_1=10.0; 
 DEFINE>{===>} fin_cen_cool2_1=10.0; 
 DEFINE>{===>} ini_cen_cool3_1=10.0; 
 DEFINE>{===>} fin_cen_cool3_1=10.0; 
 DEFINE>{+ choice: "NO" "SANI" "XRDC" "VANGLE" +} 
 DEFINE>{===>} rdc2_choice="NO"; 
 DEFINE>{===>} rdc2_firstIt=0; 
 DEFINE>{===>} rdc2_lastIt=2; 
 DEFINE>{===>} rdc2_hot=0.1; 
 DEFINE>{===>} rdc2_cool1=1.0; 
 DEFINE>{===>} rdc2_cool2=1.0; 
 DEFINE>{===>} rdc2_cool3=1.0; 
 DEFINE>{===>} rdc2_r=0.4; 
 DEFINE>{===>} rdc2_d=8.0; 
 DEFINE>{===>} ini_bor_hot_2=1.0; 
 DEFINE>{===>} fin_bor_hot_2=10.0; 
 DEFINE>{===>} ini_bor_cool1_2=10.0; 
 DEFINE>{===>} fin_bor_cool1_2=40.0; 
 DEFINE>{===>} ini_bor_cool2_2=40.0; 
 DEFINE>{===>} fin_bor_cool2_2=40.0; 
 DEFINE>{===>} ini_bor_cool3_2=40.0; 
 DEFINE>{===>} fin_bor_cool3_2=40.0; 
 DEFINE>{===>} ini_cen_hot_2=0.25; 
 DEFINE>{===>} fin_cen_hot_2=2.5; 
 DEFINE>{===>} ini_cen_cool1_2=2.5; 
 DEFINE>{===>} fin_cen_cool1_2=10.0; 
 DEFINE>{===>} ini_cen_cool2_2=10.0; 
 DEFINE>{===>} fin_cen_cool2_2=10.0; 
 DEFINE>{===>} ini_cen_cool3_2=10.0; 
 DEFINE>{===>} fin_cen_cool3_2=10.0; 
 DEFINE>{+ choice: "NO" "SANI" "XRDC" "VANGLE" +} 
 DEFINE>{===>} rdc3_choice="NO"; 
 DEFINE>{===>} rdc3_firstIt=0; 
 DEFINE>{===>} rdc3_lastIt=2; 
 DEFINE>{===>} rdc3_hot=0.1; 
 DEFINE>{===>} rdc3_cool1=1.0; 
 DEFINE>{===>} rdc3_cool2=1.0; 
 DEFINE>{===>} rdc3_cool3=1.0; 
 DEFINE>{===>} rdc3_r=0.4; 
 DEFINE>{===>} rdc3_d=8.0; 
 DEFINE>{===>} ini_bor_hot_3=1.0; 
 DEFINE>{===>} fin_bor_hot_3=10.0; 
 DEFINE>{===>} ini_bor_cool1_3=10.0; 
 DEFINE>{===>} fin_bor_cool1_3=40.0; 
 DEFINE>{===>} ini_bor_cool2_3=40.0; 
 DEFINE>{===>} fin_bor_cool2_3=40.0; 
 DEFINE>{===>} ini_bor_cool3_3=40.0; 
 DEFINE>{===>} fin_bor_cool3_3=40.0; 
 DEFINE>{===>} ini_cen_hot_3=0.25; 
 DEFINE>{===>} fin_cen_hot_3=2.5; 
 DEFINE>{===>} ini_cen_cool1_3=2.5; 
 DEFINE>{===>} fin_cen_cool1_3=10.0; 
 DEFINE>{===>} ini_cen_cool2_3=10.0; 
 DEFINE>{===>} fin_cen_cool2_3=10.0; 
 DEFINE>{===>} ini_cen_cool3_3=10.0; 
 DEFINE>{===>} fin_cen_cool3_3=10.0; 
 DEFINE>{+ choice: "NO" "SANI" "XRDC" "VANGLE" +} 
 DEFINE>{===>} rdc4_choice="NO"; 
 DEFINE>{===>} rdc4_firstIt=0; 
 DEFINE>{===>} rdc4_lastIt=2; 
 DEFINE>{===>} rdc4_hot=0.1; 
 DEFINE>{===>} rdc4_cool1=1.0; 
 DEFINE>{===>} rdc4_cool2=1.0; 
 DEFINE>{===>} rdc4_cool3=1.0; 
 DEFINE>{===>} rdc4_r=0.4; 
 DEFINE>{===>} rdc4_d=8.0; 
 DEFINE>{===>} ini_bor_hot_4=1.0; 
 DEFINE>{===>} fin_bor_hot_4=10.0; 
 DEFINE>{===>} ini_bor_cool1_4=10.0; 
 DEFINE>{===>} fin_bor_cool1_4=40.0; 
 DEFINE>{===>} ini_bor_cool2_4=40.0; 
 DEFINE>{===>} fin_bor_cool2_4=40.0; 
 DEFINE>{===>} ini_bor_cool3_4=40.0; 
 DEFINE>{===>} fin_bor_cool3_4=40.0; 
 DEFINE>{===>} ini_cen_hot_4=0.25; 
 DEFINE>{===>} fin_cen_hot_4=2.5; 
 DEFINE>{===>} ini_cen_cool1_4=2.5; 
 DEFINE>{===>} fin_cen_cool1_4=10.0; 
 DEFINE>{===>} ini_cen_cool2_4=10.0; 
 DEFINE>{===>} fin_cen_cool2_4=10.0; 
 DEFINE>{===>} ini_cen_cool3_4=10.0; 
 DEFINE>{===>} fin_cen_cool3_4=10.0; 
 DEFINE>{+ choice: "NO" "SANI" "XRDC" "VANGLE" +} 
 DEFINE>{===>} rdc5_choice="NO"; 
 DEFINE>{===>} rdc5_firstIt=0; 
 DEFINE>{===>} rdc5_lastIt=2; 
 DEFINE>{===>} rdc5_hot=0.1; 
 DEFINE>{===>} rdc5_cool1=1.0; 
 DEFINE>{===>} rdc5_cool2=1.0; 
 DEFINE>{===>} rdc5_cool3=1.0; 
 DEFINE>{===>} rdc5_r=0.4; 
 DEFINE>{===>} rdc5_d=8.0; 
 DEFINE>{===>} ini_bor_hot_5=1.0; 
 DEFINE>{===>} fin_bor_hot_5=10.0; 
 DEFINE>{===>} ini_bor_cool1_5=10.0; 
 DEFINE>{===>} fin_bor_cool1_5=40.0; 
 DEFINE>{===>} ini_bor_cool2_5=40.0; 
 DEFINE>{===>} fin_bor_cool2_5=40.0; 
 DEFINE>{===>} ini_bor_cool3_5=40.0; 
 DEFINE>{===>} fin_bor_cool3_5=40.0; 
 DEFINE>{===>} ini_cen_hot_5=0.25; 
 DEFINE>{===>} fin_cen_hot_5=2.5; 
 DEFINE>{===>} ini_cen_cool1_5=2.5; 
 DEFINE>{===>} fin_cen_cool1_5=10.0; 
 DEFINE>{===>} ini_cen_cool2_5=10.0; 
 DEFINE>{===>} fin_cen_cool2_5=10.0; 
 DEFINE>{===>} ini_cen_cool3_5=10.0; 
 DEFINE>{===>} fin_cen_cool3_5=10.0; 
 DEFINE>{=========================== pseudo contact shifts ===========================} 
 DEFINE>{* Parameters *} 
 DEFINE>{+ table: rows=10 "class1" "class2" "class3" "class4" "class5" "class6" "class7" "class8" "class9" "class10" 
 DEFINE>          cols=9 "type" "firstIt" "lastIt" "Kpcs<br>(hot)" "Kpcs<br>(cool1)" "Kpcs<br>(cool2)" "Kpcs<br>(cool3)" "R" "D" +} 
 DEFINE>{+ choice: "NO" "XPCS" +} 
 DEFINE>{===>} pcs1_choice="NO"; 
 DEFINE>{===>} pcs1_firstIt=0; 
 DEFINE>{===>} pcs1_lastIt=2; 
 DEFINE>{===>} pcs1_hot=100.0; 
 DEFINE>{===>} pcs1_cool1=100.0; 
 DEFINE>{===>} pcs1_cool2=100.0; 
 DEFINE>{===>} pcs1_cool3=1000.0; 
 DEFINE>{===>} pcs1_r=1000.0; 
 DEFINE>{===>} pcs1_d=10000.0; 
 DEFINE>{+ choice: "NO" "XPCS" +} 
 DEFINE>{===>} pcs2_choice="NO"; 
 DEFINE>{===>} pcs2_firstIt=0; 
 DEFINE>{===>} pcs2_lastIt=2; 
 DEFINE>{===>} pcs2_hot=100.0; 
 DEFINE>{===>} pcs2_cool1=100.0; 
 DEFINE>{===>} pcs2_cool2=100.0; 
 DEFINE>{===>} pcs2_cool3=1000.0; 
 DEFINE>{===>} pcs2_r=1000.0; 
 DEFINE>{===>} pcs2_d=10000.0; 
 DEFINE>{+ choice: "NO" "XPCS" +} 
 DEFINE>{===>} pcs3_choice="NO"; 
 DEFINE>{===>} pcs3_firstIt=0; 
 DEFINE>{===>} pcs3_lastIt=2; 
 DEFINE>{===>} pcs3_hot=100.0; 
 DEFINE>{===>} pcs3_cool1=100.0; 
 DEFINE>{===>} pcs3_cool2=100.0; 
 DEFINE>{===>} pcs3_cool3=1000.0; 
 DEFINE>{===>} pcs3_r=1000.0; 
 DEFINE>{===>} pcs3_d=10000.0; 
 DEFINE>{+ choice: "NO" "XPCS" +} 
 DEFINE>{===>} pcs4_choice="NO"; 
 DEFINE>{===>} pcs4_firstIt=0; 
 DEFINE>{===>} pcs4_lastIt=2; 
 DEFINE>{===>} pcs4_hot=100.0; 
 DEFINE>{===>} pcs4_cool1=100.0; 
 DEFINE>{===>} pcs4_cool2=100.0; 
 DEFINE>{===>} pcs4_cool3=1000.0; 
 DEFINE>{===>} pcs4_r=1000.0; 
 DEFINE>{===>} pcs4_d=10000.0; 
 DEFINE>{+ choice: "NO" "XPCS" +} 
 DEFINE>{===>} pcs5_choice="NO"; 
 DEFINE>{===>} pcs5_firstIt=0; 
 DEFINE>{===>} pcs5_lastIt=2; 
 DEFINE>{===>} pcs5_hot=100.0; 
 DEFINE>{===>} pcs5_cool1=100.0; 
 DEFINE>{===>} pcs5_cool2=100.0; 
 DEFINE>{===>} pcs5_cool3=1000.0; 
 DEFINE>{===>} pcs5_r=1000.0; 
 DEFINE>{===>} pcs5_d=10000.0; 
 DEFINE>{+ choice: "NO" "XPCS" +} 
 DEFINE>{===>} pcs6_choice="NO"; 
 DEFINE>{===>} pcs6_firstIt=0; 
 DEFINE>{===>} pcs6_lastIt=2; 
 DEFINE>{===>} pcs6_hot=100.0; 
 DEFINE>{===>} pcs6_cool1=100.0; 
 DEFINE>{===>} pcs6_cool2=100.0; 
 DEFINE>{===>} pcs6_cool3=1000.0; 
 DEFINE>{===>} pcs6_r=1000.0; 
 DEFINE>{===>} pcs6_d=10000.0; 
 DEFINE>{+ choice: "NO" "XPCS" +} 
 DEFINE>{===>} pcs7_choice="NO"; 
 DEFINE>{===>} pcs7_firstIt=0; 
 DEFINE>{===>} pcs7_lastIt=2; 
 DEFINE>{===>} pcs7_hot=100.0; 
 DEFINE>{===>} pcs7_cool1=100.0; 
 DEFINE>{===>} pcs7_cool2=100.0; 
 DEFINE>{===>} pcs7_cool3=1000.0; 
 DEFINE>{===>} pcs7_r=1000.0; 
 DEFINE>{===>} pcs7_d=10000.0; 
 DEFINE>{+ choice: "NO" "XPCS" +} 
 DEFINE>{===>} pcs8_choice="NO"; 
 DEFINE>{===>} pcs8_firstIt=0; 
 DEFINE>{===>} pcs8_lastIt=2; 
 DEFINE>{===>} pcs8_hot=100.0; 
 DEFINE>{===>} pcs8_cool1=100.0; 
 DEFINE>{===>} pcs8_cool2=100.0; 
 DEFINE>{===>} pcs8_cool3=1000.0; 
 DEFINE>{===>} pcs8_r=1000.0; 
 DEFINE>{===>} pcs8_d=10000.0; 
 DEFINE>{+ choice: "NO" "XPCS" +} 
 DEFINE>{===>} pcs9_choice="NO"; 
 DEFINE>{===>} pcs9_firstIt=0; 
 DEFINE>{===>} pcs9_lastIt=2; 
 DEFINE>{===>} pcs9_hot=100.0; 
 DEFINE>{===>} pcs9_cool1=100.0; 
 DEFINE>{===>} pcs9_cool2=100.0; 
 DEFINE>{===>} pcs9_cool3=1000.0; 
 DEFINE>{===>} pcs9_r=1000.0; 
 DEFINE>{===>} pcs9_d=10000.0; 
 DEFINE>{+ choice: "NO" "XPCS" +} 
 DEFINE>{===>} pcsA_choice="NO"; 
 DEFINE>{===>} pcsA_firstIt=0; 
 DEFINE>{===>} pcsA_lastIt=2; 
 DEFINE>{===>} pcsA_hot=100.0; 
 DEFINE>{===>} pcsA_cool1=100.0; 
 DEFINE>{===>} pcsA_cool2=100.0; 
 DEFINE>{===>} pcsA_cool3=1000.0; 
 DEFINE>{===>} pcsA_r=1000.0; 
 DEFINE>{===>} pcsA_d=10000.0; 
 DEFINE>{=========================== relaxation data ======================} 
 DEFINE>{* Parameters *} 
 DEFINE>{+ table: rows=5 "class1" "class2" "class3" "class4" "class5" 
 DEFINE>          cols=12 "type" "firstIt" "lastIt" "Kdani(hot)" "Kdani(cool1)" "Kdani(cool2)" "Kdani(cool3)" "Correlation time" "D" "R" "H frequency" "N frequency" +} 
 DEFINE>{+ choice: "NO" "DANI" +} 
 DEFINE>{===>} dan1_choice="NO"; 
 DEFINE>{===>} dan1_firstIt=0; 
 DEFINE>{===>} dan1_lastIt=2; 
 DEFINE>{===>} dan1_hot=1; 
 DEFINE>{===>} dan1_cool1=5; 
 DEFINE>{===>} dan1_cool2=10; 
 DEFINE>{===>} dan1_cool3=10; 
 DEFINE>{===>} dan1_tc=9.771; 
 DEFINE>{===>} dan1_anis=1.557; 
 DEFINE>{===>} dan1_r=0.455; 
 DEFINE>{===>} dan1_wh=599.91; 
 DEFINE>{===>} dan1_wn=60.82; 
 DEFINE>{+ choice: "NO" "DANI" +} 
 DEFINE>{===>} dan2_choice="NO"; 
 DEFINE>{===>} dan2_firstIt=0; 
 DEFINE>{===>} dan2_lastIt=1; 
 DEFINE>{===>} dan2_hot=1; 
 DEFINE>{===>} dan2_cool1=5; 
 DEFINE>{===>} dan2_cool2=10; 
 DEFINE>{===>} dan2_cool3=10; 
 DEFINE>{===>} dan2_tc=9.84; 
 DEFINE>{===>} dan2_anis=-1.35; 
 DEFINE>{===>} dan2_r=0.308; 
 DEFINE>{===>} dan2_wh=599.91; 
 DEFINE>{===>} dan2_wn=60.82; 
 DEFINE>{+ choice: "NO" "DANI" +} 
 DEFINE>{===>} dan3_choice="NO"; 
 DEFINE>{===>} dan3_firstIt=1; 
 DEFINE>{===>} dan3_lastIt=1; 
 DEFINE>{===>} dan3_hot=1; 
 DEFINE>{===>} dan3_cool1=5; 
 DEFINE>{===>} dan3_cool2=10; 
 DEFINE>{===>} dan3_cool3=10; 
 DEFINE>{===>} dan3_tc=9.84; 
 DEFINE>{===>} dan3_anis=-1.35; 
 DEFINE>{===>} dan3_r=0.308; 
 DEFINE>{===>} dan3_wh=599.91; 
 DEFINE>{===>} dan3_wn=60.82; 
 DEFINE>{+ choice: "NO" "DANI" +} 
 DEFINE>{===>} dan4_choice="NO"; 
 DEFINE>{===>} dan4_firstIt=0; 
 DEFINE>{===>} dan4_lastIt=2; 
 DEFINE>{===>} dan4_hot=1; 
 DEFINE>{===>} dan4_cool1=5; 
 DEFINE>{===>} dan4_cool2=10; 
 DEFINE>{===>} dan4_cool3=10; 
 DEFINE>{===>} dan4_tc=9.84; 
 DEFINE>{===>} dan4_anis=-1.35; 
 DEFINE>{===>} dan4_r=0.308; 
 DEFINE>{===>} dan4_wh=599.91; 
 DEFINE>{===>} dan4_wn=60.82; 
 DEFINE>{+ choice: "NO" "DANI" +} 
 DEFINE>{===>} dan5_choice="NO"; 
 DEFINE>{===>} dan5_firstIt=0; 
 DEFINE>{===>} dan5_lastIt=2; 
 DEFINE>{===>} dan5_hot=1; 
 DEFINE>{===>} dan5_cool1=5; 
 DEFINE>{===>} dan5_cool2=10; 
 DEFINE>{===>} dan5_cool3=10; 
 DEFINE>{===>} dan5_tc=9.84; 
 DEFINE>{===>} dan5_anis=-1.35; 
 DEFINE>{===>} dan5_r=0.308; 
 DEFINE>{===>} dan5_wh=599.91; 
 DEFINE>{===>} dan5_wn=60.82; 
 DEFINE>{===================== topology and parameter files ======================} 
 DEFINE>{* topology file for molecule (protein) A *} 
 DEFINE>{===>} prot_top_A="protein-allhdg5-4.top"; 
 DEFINE>{* topology file for molecule (protein) B *} 
 DEFINE>{===>} prot_top_B="protein-allhdg5-4.top"; 
 DEFINE>{* topology file for molecule (protein) C *} 
 DEFINE>{===>} prot_top_C=""; 
 DEFINE>{* topology file for molecule (protein) D *} 
 DEFINE>{===>} prot_top_D=""; 
 DEFINE>{* topology file for molecule (protein) E *} 
 DEFINE>{===>} prot_top_E=""; 
 DEFINE>{* topology file for molecule (protein) F *} 
 DEFINE>{===>} prot_top_F=""; 
 DEFINE>{* linkage file for molecule (protein) A *} 
 DEFINE>{===>} prot_link_A="protein-allhdg5-4-noter.link"; 
 DEFINE>{* linkage file for molecule (protein) B *} 
 DEFINE>{===>} prot_link_B="protein-allhdg5-4-noter.link"; 
 DEFINE>{* linkage file for molecule (protein) C *} 
 DEFINE>{===>} prot_link_C=""; 
 DEFINE>{* linkage file for molecule (protein) D *} 
 DEFINE>{===>} prot_link_D=""; 
 DEFINE>{* linkage file for molecule (protein) E *} 
 DEFINE>{===>} prot_link_E=""; 
 DEFINE>{* linkage file for molecule (protein) F *} 
 DEFINE>{===>} prot_link_F=""; 
 DEFINE>{* energy parameter file for molecule (protein) A *} 
 DEFINE>{===>} prot_par_A="protein-allhdg5-4.param"; 
 DEFINE>{* energy parameter file for molecule (protein) B *} 
 DEFINE>{===>} prot_par_B="protein-allhdg5-4.param"; 
 DEFINE>{* energy parameter file for molecule (protein) C *} 
 DEFINE>{===>} prot_par_C=""; 
 DEFINE>{* energy parameter file for molecule (protein) D *} 
 DEFINE>{===>} prot_par_D=""; 
 DEFINE>{* energy parameter file for molecule (protein) E *} 
 DEFINE>{===>} prot_par_E=""; 
 DEFINE>{* energy parameter file for molecule (protein) F *} 
 DEFINE>{===>} prot_par_F=""; 
 DEFINE>{* type of non-bonded parameters *} 
 DEFINE>{* specify the type of non-bonded interaction *} 
 DEFINE>{+ choice: "PROLSQ" "PARMALLH6" "PARALLHDG" "OPLSX" +} 
 DEFINE>{===>} par_nonbonded="OPLSX"; 
 DEFINE>{===================== energy and interaction parameters ==================} 
 DEFINE>{ Do you want to include dihedral angle energy terms? } 
 DEFINE>{ choice: true false } 
 DEFINE>dihedflag=true; 
 DEFINE>{* Do you want to include the electrostatic energy term for docking? *} 
 DEFINE>{* Note that it will be automatically included in the solvent refinement *} 
 DEFINE>{* Include electrostatic during rigid body docking (it0)? *} 
 DEFINE>{+ choice: true false +} 
 DEFINE>{===>} elecflag_0=true; 
 DEFINE>{* Include electrostatic during semi-flexible SA (it1)? *} 
 DEFINE>{+ choice: true false +} 
 DEFINE>{===>} elecflag_1=true; 
 DEFINE>{* Give the epsilon constant for the electrostatic energy term? (Note: for water cdie with epsilon=1 is used) *} 
 DEFINE>{* Note that for explicit solvent refinement cdie with epsilon=1 is used *} 
 DEFINE>{===>} epsilon=10.0; 
 DEFINE>{* Use constant (cdie) or distance-dependent (rdie) dielectric? *} 
 DEFINE>{+ choice: cdie rdie +} 
 DEFINE>{===>} dielec=cdie; 
 DEFINE>{* - *} 
 DEFINE>{* Scaling of intermolecular interactions for rigid body EM*} 
 DEFINE>{===>} inter_rigid=1.0; 
 DEFINE>{* Scaling of intermolecular interactions for semi-flexible SA*} 
 DEFINE>{+ table: rows=3 "Rigid body dynamic " "SA with flexible side-chains (cool2)" "SA with flexible backbone and side-chains (cool3)" 
 DEFINE>          cols=2 "Init value" "Final value" +} 
 DEFINE>{===>} init_rigid=0.001; 
 DEFINE>{===>} fin_rigid=0.001; 
 DEFINE>{===>} init_cool2=0.001; 
 DEFINE>{===>} fin_cool2=1.0; 
 DEFINE>{===>} init_cool3=0.05; 
 DEFINE>{===>} fin_cool3=1.0; 
 DEFINE>{* Interaction matrix for non-bonded interactions*} 
 DEFINE>{+ table: rows=6 "Mol 1" "Mol 2" "Mol 3" "Mol 4" "Mol 5" "Mol 6" 
 DEFINE>          cols=6 "Mol 1" "Mol 2" "Mol 3" "Mol 4" "Mol 5" "Mol 6" +} 
 DEFINE>{===>} int_1_1=1.0; 
 DEFINE>{===>} int_1_2=1.0; 
 DEFINE>{===>} int_1_3=1.0; 
 DEFINE>{===>} int_1_4=1.0; 
 DEFINE>{===>} int_1_5=1.0; 
 DEFINE>{===>} int_1_6=1.0; 
 DEFINE>{+ choice: "N.A." +} 
 DEFINE>{===>} int_2_1="N.A."; 
 DEFINE>{===>} int_2_2=1.0; 
 DEFINE>{===>} int_2_3=1.0; 
 DEFINE>{===>} int_2_4=1.0; 
 DEFINE>{===>} int_2_5=1.0; 
 DEFINE>{===>} int_2_6=1.0; 
 DEFINE>{+ choice: "N.A." +} 
 DEFINE>{===>} int_3_1="N.A."; 
 DEFINE>{+ choice: "N.A." +} 
 DEFINE>{===>} int_3_2="N.A."; 
 DEFINE>{===>} int_3_3=1.0; 
 DEFINE>{===>} int_3_4=1.0; 
 DEFINE>{===>} int_3_5=1.0; 
 DEFINE>{===>} int_3_6=1.0; 
 DEFINE>{+ choice: "N.A." +} 
 DEFINE>{===>} int_4_1="N.A."; 
 DEFINE>{+ choice: "N.A." +} 
 DEFINE>{===>} int_4_2="N.A."; 
 DEFINE>{+ choice: "N.A." +} 
 DEFINE>{===>} int_4_3="N.A."; 
 DEFINE>{===>} int_4_4=1.0; 
 DEFINE>{===>} int_4_5=1.0; 
 DEFINE>{===>} int_4_6=1.0; 
 DEFINE>{+ choice: "N.A." +} 
 DEFINE>{===>} int_5_1="N.A."; 
 DEFINE>{+ choice: "N.A." +} 
 DEFINE>{===>} int_5_2="N.A."; 
 DEFINE>{+ choice: "N.A." +} 
 DEFINE>{===>} int_5_3="N.A."; 
 DEFINE>{+ choice: "N.A." +} 
 DEFINE>{===>} int_5_4="N.A."; 
 DEFINE>{===>} int_5_5=1.0; 
 DEFINE>{===>} int_5_6=1.0; 
 DEFINE>{+ choice: "N.A." +} 
 DEFINE>{===>} int_6_1="N.A."; 
 DEFINE>{+ choice: "N.A." +} 
 DEFINE>{===>} int_6_2="N.A."; 
 DEFINE>{+ choice: "N.A." +} 
 DEFINE>{===>} int_6_3="N.A."; 
 DEFINE>{+ choice: "N.A." +} 
 DEFINE>{===>} int_6_4="N.A."; 
 DEFINE>{+ choice: "N.A." +} 
 DEFINE>{===>} int_6_5="N.A."; 
 DEFINE>{===>} int_6_6=1.0; 
 DEFINE>{===================== Number of structures to dock =======================} 
 DEFINE>{* Settings for the rigid body (it0) and semi-flexible refinement (it1) *} 
 DEFINE>{* number of structures for rigid body docking *} 
 DEFINE>{===>} structures_0=20; 
 DEFINE>   keepstruct_0=&structures_0; 
 DEFINE>{* number of structures for refinement *} 
 DEFINE>{===>} structures_1=20; 
 DEFINE>   keepstruct_1=&structures_1; 
 DEFINE>   keepstruct_2=&structures_1; 
 DEFINE>{* number of structures to be analysed*} 
 DEFINE>{===>} anastruc_1=20; 
 DEFINE>   anastruc_0=&anastruc_1; 
 DEFINE>   anastruc_2=&anastruc_1; 
 DEFINE>{* - *} 
 DEFINE>{* Sampling of symmetry related solutions                       *} 
 DEFINE>{* Sample 180 degrees rotated solutions during rigid body EM?   *} 
 DEFINE>{+ choice: true false +} 
 DEFINE>{===>} rotate180_0=false; 
 DEFINE>{* Sample 180 degrees rotated solutions during semi-flexible SA?*} 
 DEFINE>{+ choice: true false +} 
 DEFINE>{===>} rotate180_1=false; 
 DEFINE>{=========================== DOCKING protocol =============================} 
 DEFINE>{* Cross-dock all combinations in the ensembles of starting structures? *} 
 DEFINE>{* Turn off this option if you only want to dock structure 1 of ensemble A *} 
 DEFINE>{*   to structure 1 of ensemble B, structure 2 to structure 2, etc. *} 
 DEFINE>{+ choice: true false +} 
 DEFINE>{===>} crossdock=false; 
 DEFINE>{* Randomize starting orientations? *} 
 DEFINE>{+ choice: true false +} 
 DEFINE>{===>} randorien=false; 
 DEFINE>{* Perform initial rigid body minimisation? *} 
 DEFINE>{+ choice: true false +} 
 DEFINE>{===>} rigidmini=false; 
 DEFINE>{* Allow translation in rigid body minimisation? *} 
 DEFINE>{+ choice: true false +} 
 DEFINE>{===>} rigidtrans=false; 
 DEFINE>{* Number of trials for rigid body minimisation? *} 
 DEFINE>{===>} ntrials=5; 
 DEFINE>{* initial seed for random number generator *} 
 DEFINE>{* change to get different initial velocities *} 
 DEFINE>{===>} iniseed=917; 
 DEFINE>{* temperature for rigid body high temperature TAD *} 
 DEFINE>{===>} tadhigh_t=2000; 
 DEFINE>{* initial temperature for rigid body first TAD cooling step *} 
 DEFINE>{===>} tadinit1_t=2000; 
 DEFINE>{* final temperature after first cooling step *} 
 DEFINE>{===>} tadfinal1_t=500; 
 DEFINE>{* initial temperature for second TAD cooling step with flexible side-chain at the inferface *} 
 DEFINE>{===>} tadinit2_t=1000; 
 DEFINE>{* finale temperature after second cooling step *} 
 DEFINE>{===>} tadfinal2_t=50; 
 DEFINE>{* initial temperature for third TAD cooling step with fully flexible interface *} 
 DEFINE>{===>} tadinit3_t=500; 
 DEFINE>{* finale temperature after third cooling step *} 
 DEFINE>{===>} tadfinal3_t=50; 
 DEFINE>{* time step *} 
 DEFINE>{===>} timestep=0.002; 
 DEFINE>{* factor for timestep in TAD *} 
 DEFINE>{===>} tadfactor=8; 
 DEFINE>{* number of MD steps for rigid body high temperature TAD *} 
 DEFINE>{===>} initiosteps=0; 
 DEFINE>{* number of MD steps during first rigid body cooling stage *} 
 DEFINE>{===>} cool1_steps=0; 
 DEFINE>{* number of MD steps during second cooling stage with flexible side-chains at interface *} 
 DEFINE>{===>} cool2_steps=0; 
 DEFINE>{* number of MD steps during third cooling stage with fully flexible interface *} 
 DEFINE>{===>} cool3_steps=0; 
 DEFINE>{======================= Solvated rigid body docking=======================} 
 DEFINE>{* perform solvated docking ? *} 
 DEFINE>{+ choice: true false +} 
 DEFINE>{===>} waterdock=false; 
 DEFINE>{* which method to use for solvating? *} 
 DEFINE>{* db: database-based (recommended), restraints: for restrained solvating to amino-acid most often forming 
 DEFINE>water mediated contacts and blank (""): for uniform waterlayer *} 
 DEFINE>{+ choice: "db" "restraints" "" +} 
 DEFINE>{===>} solvate_method="db"; 
 DEFINE>{* which propensity database to use? *} 
 DEFINE>{* statistical: based on an analysis of water-mediated contacts in the PDB, kyte-doolittle: based on the Kyte-Doolittle hydrophobicity scalte *} 
 DEFINE>{+ choice: "statistical" "kytedoolittle" +} 
 DEFINE>{===>} db_method="kytedoolittle"; 
 DEFINE>{* initial cutoff for restraints solvating method *} 
 DEFINE>{* all waters further away from a highly occuring water solvated residue will be removed in the generation 
 DEFINE>of the initial solvation shell *} 
 DEFINE>{===>} water_restraint_initial=5.0; 
 DEFINE>{* cutoff for restraints solvating method *} 
 DEFINE>{* upper distance limit for defining distance restraints between water and amino-acids often found to be 
 DEFINE>involved in water-mediated contacts *} 
 DEFINE>{===>} water_restraint_cutoff=5.0; 
 DEFINE>{* force constant for restraints solvating method *} 
 DEFINE>{===>} water_restraint_scale=25.0; 
 DEFINE>{* fraction of water to keep *} 
 DEFINE>{* this is the fraction of all interface water after the initial rigid body docking that will be kept (note 
 DEFINE>that more waters might be removed if the interaction energy is unfavorable  *} 
 DEFINE>{===>} water_tokeep=0.25; 
 DEFINE>{* this is the fraction of interface water involving DNA phosphates after the initial rigid body docking that will be kept 
 DEFINE>(note that more waters might be removed if the interaction energy is unfavorable  *} 
 DEFINE>{===>} dnap_water_tokeep=0.25; 
 DEFINE>{* random fraction to be added to the fraction of water to keep *} 
 DEFINE>{===>} water_randfrac=0.0; 
 DEFINE>{* water-protein surface-cutoff *} 
 DEFINE>{* waters further away than this cutoff distance from any component of the complex will be removed *} 
 DEFINE>{===>} water_surfcutoff=8.0; 
 DEFINE>{* do some water analysis *} 
 DEFINE>{+ choice: true false +} 
 DEFINE>{===>} water_analysis=false; 
 DEFINE>{* allows translation of water molecules during rigid-body docking, true or false: *} 
 DEFINE>{+ choice: true false +} 
 DEFINE>{===>} transwater=true; 
 DEFINE>{* number of different initial solvation shells to generate *} 
 DEFINE>{===>} waterensemble=1; 
 DEFINE>{==================== final explicit solvent refinement  ==================} 
 DEFINE>{* Do you want to refine your docking models in explicit solvent? *} 
 DEFINE>{+ choice: "yes" "no" +} 
 DEFINE>{===>} firstwater="yes"; 
 DEFINE>{* Which solvent do you want to use? *} 
 DEFINE>{+ choice: "water" "dmso" +} 
 DEFINE>{===>} solvent="water"; 
 DEFINE>{* number of structures for the explicit solvent refinement *} 
 DEFINE>{* refine the n best structures regarding energy            *} 
 DEFINE>{===>} waterrefine=20; 
 DEFINE>   structures_2=&waterrefine; 
 DEFINE>{* number of steps for heating phase (100, 200, 300K)?      *} 
 DEFINE>{===>} waterheatsteps=100; 
 DEFINE>{* number of steps for 300K phase?                          *} 
 DEFINE>{===>} watersteps=1250; 
 DEFINE>{* number of steps for cooling phase (300, 200, 100K)?      *} 
 DEFINE>{===>} watercoolsteps=500; 
 DEFINE>{* write additional PDB files including solvent ?           *} 
 DEFINE>{+ choice: true false +} 
 DEFINE>{===>} keepwater=false; 
 DEFINE>{ calculate explicit desolvation energy (note this will double the cpu requirements) } 
 DEFINE>{ choice: true false } 
 DEFINE>calcdesolv=false; 
 DEFINE>{================================ Scoring =================================} 
 DEFINE>{* Settings for the scoring of the docking solutions *} 
 DEFINE>{* Define the weights for the various terms for the sorting of structures (scoring) *} 
 DEFINE>{+ table: rows=14 "Evdw" "Eelec" "Eair" "Erg" "Esani" "Exrdc" "Expcs" "Edani" "Evean" "Ecdih" "Esym" "BSA" "dEint" "Edesolv" 
 DEFINE>          cols=3 "Rigid body EM" "semi-flexible SA" "Water refinement" +} 
 DEFINE>{===>} w_vdw_0=0.01; 
 DEFINE>{===>} w_vdw_1=1.0; 
 DEFINE>{===>} w_vdw_2=1.0; 
 DEFINE>{===>} w_elec_0=1.0; 
 DEFINE>{===>} w_elec_1=1.0; 
 DEFINE>{===>} w_elec_2=0.2; 
 DEFINE>{===>} w_dist_0=0.01; 
 DEFINE>{===>} w_dist_1=0.1; 
 DEFINE>{===>} w_dist_2=0.1; 
 DEFINE>{===>} w_rg_0=0.1; 
 DEFINE>{===>} w_rg_1=1.0; 
 DEFINE>{===>} w_rg_2=1.0; 
 DEFINE>{===>} w_sani_0=0.1; 
 DEFINE>{===>} w_sani_1=0.1; 
 DEFINE>{===>} w_sani_2=0.1; 
 DEFINE>{===>} w_xrdc_0=0.1; 
 DEFINE>{===>} w_xrdc_1=0.1; 
 DEFINE>{===>} w_xrdc_2=0.1; 
 DEFINE>{===>} w_xpcs_0=0.1; 
 DEFINE>{===>} w_xpcs_1=0.1; 
 DEFINE>{===>} w_xpcs_2=0.1; 
 DEFINE>{===>} w_dani_0=0.01; 
 DEFINE>{===>} w_dani_1=0.1; 
 DEFINE>{===>} w_dani_2=0.1; 
 DEFINE>{===>} w_vean_0=0.1; 
 DEFINE>{===>} w_vean_1=0.1; 
 DEFINE>{===>} w_vean_2=0.1; 
 DEFINE>{===>} w_cdih_0=0.0; 
 DEFINE>{===>} w_cdih_1=0.0; 
 DEFINE>{===>} w_cdih_2=0.0; 
 DEFINE>{===>} w_sym_0=0.1; 
 DEFINE>{===>} w_sym_1=0.1; 
 DEFINE>{===>} w_sym_2=0.1; 
 DEFINE>{===>} w_bsa_0=-0.01; 
 DEFINE>{===>} w_bsa_1=-0.01; 
 DEFINE>{===>} w_bsa_2=0.0; 
 DEFINE>{===>} w_deint_0=0.0; 
 DEFINE>{===>} w_deint_1=0.0; 
 DEFINE>{===>} w_deint_2=0.0; 
 DEFINE>{===>} w_desolv_0=1.0; 
 DEFINE>{===>} w_desolv_1=1.0; 
 DEFINE>{===>} w_desolv_2=1.0; 
 DEFINE>{* Perform smoothed-scoring selection for rigid-body docking solutions ? *} 
 DEFINE>{+ choice: true false +} 
 DEFINE>{===>} smoothing=false; 
 DEFINE>{* It is possible to skip structures in the selection of structure in it0 *} 
 DEFINE>{* Give for this the number of structures to skip: *} 
 DEFINE>{===>} skip_struc=0; 
 DEFINE>{======================= analysis and clustering ==========================} 
 DEFINE>{* Cutoff distance (proton-acceptor) to define an hydrogen bond? *} 
 DEFINE>{===>} dist_hb=2.5; 
 DEFINE>{* Cutoff distance (carbon-carbon) to define an hydrophobic contact? *} 
 DEFINE>{===>} dist_nb=3.9; 
 DEFINE>{* Clustering method (RMSD or Fraction of Common Contacts (FCC)) *} 
 DEFINE>{+ choice: "RMSD" "FCC" +} 
 DEFINE>{===>} clust_meth="FCC"; 
 DEFINE>{* RMSD cutoff for clustering? (Recommended values: RMSD 7.5, FCC 0.75) *} 
 DEFINE>{===>} clust_cutoff=0.6; 
 DEFINE>{* Minimum cluster size? *} 
 DEFINE>{===>} clust_size=4; 
 DEFINE>{* Chain-Agnostic Algorithm (used for FCC clustering in symmetrical complexes) *} 
 DEFINE>{+ choice: "true" "false" +} 
 DEFINE>{===>} fcc_ignc=false; 
 DEFINE>{======================= final clean-up ===================================} 
 DEFINE>{* Clean up the run directory after completion (only files for struct #1 are kept) ? *} 
 DEFINE>{+ choice: true false +} 
 DEFINE>{===>} cleanup=true; 
 DEFINE>{============================ parallel jobs ===============================} 
 DEFINE>{* How many nodes do you want to use in parallel? *} 
 DEFINE>{* leave unused fields blank, make sure that the queues are actually running *} 
 DEFINE>{+ table: rows=10 "1" "2" "3" "4" "5" "6" "7" "8" "9" "10" 
 DEFINE> cols=3 "queue command" "cns executable" "number of jobs" +} 
 DEFINE>{===>} queue_1="/home/diracegi/grid/diracsubmit-haddock2.2"; 
 DEFINE>{===>} cns_exe_1="/home/software/software/cns_solve_1.31-UU/intel-x86_64bit-linux/bin/cns"; 
 DEFINE>{===>} cpunumber_1=10000; 
 DEFINE>{===>} queue_2=""; 
 DEFINE>{===>} cns_exe_2=""; 
 DEFINE>{===>} cpunumber_2=0; 
 DEFINE>{===>} queue_3=""; 
 DEFINE>{===>} cns_exe_3=""; 
 DEFINE>{===>} cpunumber_3=0; 
 DEFINE>{===>} queue_4=""; 
 DEFINE>{===>} cns_exe_4=""; 
 DEFINE>{===>} cpunumber_4=0; 
 DEFINE>{===>} queue_5=""; 
 DEFINE>{===>} cns_exe_5=""; 
 DEFINE>{===>} cpunumber_5=0; 
 DEFINE>{===>} queue_6=""; 
 DEFINE>{===>} cns_exe_6=""; 
 DEFINE>{===>} cpunumber_6=0; 
 DEFINE>{===>} queue_7=""; 
 DEFINE>{===>} cns_exe_7=""; 
 DEFINE>{===>} cpunumber_7=0; 
 DEFINE>{===>} queue_8=""; 
 DEFINE>{===>} cns_exe_8=""; 
 DEFINE>{===>} cpunumber_8=0; 
 DEFINE>{===>} queue_9=""; 
 DEFINE>{===>} cns_exe_9=""; 
 DEFINE>{===>} cpunumber_9=0; 
 DEFINE>{===>} queue_10=""; 
 DEFINE>{===>} cns_exe_10=""; 
 DEFINE>{===>} cpunumber_10=0; 
 DEFINE>{===========================================================================} 
 DEFINE>{        things below this line do not normally need to be changed          } 
 DEFINE>{===========================================================================} 
 DEFINE>) {- end block parameter definition -} 
 CNSsolve>!for global parameters (local variables (suffix ) => global variables): 
 CNSsolve>evaluate (&saprotocol.crossdock=&crossdock) 
 EVALUATE: symbol $_1_SAPROTOCOL.CROSSDOCK set to FALSE (logical)
 CNSsolve>evaluate (&saprotocol.randorien=&randorien) 
 EVALUATE: symbol $_1_SAPROTOCOL.RANDORIEN set to FALSE (logical)
 CNSsolve>evaluate (&saprotocol.rigidmini=&rigidmini) 
 EVALUATE: symbol $_1_SAPROTOCOL.RIGIDMINI set to FALSE (logical)
 CNSsolve>evaluate (&saprotocol.rigidtrans=&rigidtrans) 
 EVALUATE: symbol $_1_SAPROTOCOL.RIGIDTRANS set to FALSE (logical)
 CNSsolve>evaluate (&saprotocol.ntrials=&ntrials) 
 EVALUATE: symbol $_1_SAPROTOCOL.NTRIALS set to    5.00000     (real)
 CNSsolve>evaluate (&saprotocol.iniseed=&iniseed) 
 EVALUATE: symbol $_1_SAPROTOCOL.INISEED set to    917.000     (real)
 CNSsolve>evaluate (&saprotocol.tadhigh_t=&tadhigh_t) 
 EVALUATE: symbol $_1_SAPROTOCOL.TADHIGH_T set to    2000.00     (real)
 CNSsolve>evaluate (&saprotocol.t1_init=&tadinit1_t) 
 EVALUATE: symbol $_1_SAPROTOCOL.T1_INIT set to    2000.00     (real)
 CNSsolve>evaluate (&saprotocol.t2_init=&tadinit2_t) 
 EVALUATE: symbol $_1_SAPROTOCOL.T2_INIT set to    1000.00     (real)
 CNSsolve>evaluate (&saprotocol.t3_init=&tadinit3_t) 
 EVALUATE: symbol $_1_SAPROTOCOL.T3_INIT set to    500.000     (real)
 CNSsolve>evaluate (&saprotocol.t1_final=&tadfinal1_t) 
 EVALUATE: symbol $_1_SAPROTOCOL.T1_FINAL set to    500.000     (real)
 CNSsolve>evaluate (&saprotocol.t2_final=&tadfinal2_t) 
 EVALUATE: symbol $_1_SAPROTOCOL.T2_FINAL set to    50.0000     (real)
 CNSsolve>evaluate (&saprotocol.t3_final=&tadfinal3_t) 
 EVALUATE: symbol $_1_SAPROTOCOL.T3_FINAL set to    50.0000     (real)
 CNSsolve>evaluate (&saprotocol.inter_rigid=&inter_rigid) 
 EVALUATE: symbol $_1_SAPROTOCOL.INTER_RIGID set to    1.00000     (real)
 CNSsolve>evaluate (&saprotocol.inter_init_rigid=&init_rigid) 
 EVALUATE: symbol $_1_SAPROTOCOL.INTER_INIT_RIGID set to   0.100000E-02 (real)
 CNSsolve>evaluate (&saprotocol.inter_fin_rigid=&fin_rigid) 
 EVALUATE: symbol $_1_SAPROTOCOL.INTER_FIN_RIGID set to   0.100000E-02 (real)
 CNSsolve>evaluate (&saprotocol.inter_init_cool2=&init_cool2) 
 EVALUATE: symbol $_1_SAPROTOCOL.INTER_INIT_COOL2 set to   0.100000E-02 (real)
 CNSsolve>evaluate (&saprotocol.inter_fin_cool2=&fin_cool2) 
 EVALUATE: symbol $_1_SAPROTOCOL.INTER_FIN_COOL2 set to    1.00000     (real)
 CNSsolve>evaluate (&saprotocol.inter_init_cool3=&init_cool3) 
 EVALUATE: symbol $_1_SAPROTOCOL.INTER_INIT_COOL3 set to   0.500000E-01 (real)
 CNSsolve>evaluate (&saprotocol.inter_fin_cool3=&fin_cool3) 
 EVALUATE: symbol $_1_SAPROTOCOL.INTER_FIN_COOL3 set to    1.00000     (real)
 CNSsolve>evaluate (&saprotocol.tempstep=50) 
 EVALUATE: symbol $_1_SAPROTOCOL.TEMPSTEP set to    50.0000     (real)
 CNSsolve>evaluate (&saprotocol.timestep=&timestep) 
 EVALUATE: symbol $_1_SAPROTOCOL.TIMESTEP set to   0.200000E-02 (real)
 CNSsolve>evaluate (&saprotocol.tadfactor=&tadfactor) 
 EVALUATE: symbol $_1_SAPROTOCOL.TADFACTOR set to    8.00000     (real)
 CNSsolve>evaluate (&saprotocol.initiosteps=&initiosteps) 
 EVALUATE: symbol $_1_SAPROTOCOL.INITIOSTEPS set to    0.00000     (real)
 CNSsolve>evaluate (&saprotocol.cool1_steps=&cool1_steps) 
 EVALUATE: symbol $_1_SAPROTOCOL.COOL1_STEPS set to    0.00000     (real)
 CNSsolve>evaluate (&saprotocol.cool2_steps=&cool2_steps) 
 EVALUATE: symbol $_1_SAPROTOCOL.COOL2_STEPS set to    0.00000     (real)
 CNSsolve>evaluate (&saprotocol.cool3_steps=&cool3_steps) 
 EVALUATE: symbol $_1_SAPROTOCOL.COOL3_STEPS set to    0.00000     (real)
 CNSsolve>evaluate (&saprotocol.fbeta=100) 
 EVALUATE: symbol $_1_SAPROTOCOL.FBETA set to    100.000     (real)
 CNSsolve>evaluate (&saprotocol.mass=100) 
 EVALUATE: symbol $_1_SAPROTOCOL.MASS set to    100.000     (real)
 CNSsolve>evaluate (&filenames.fileroot=&fileroot) 
 EVALUATE: symbol $_1_FILENAMES.FILEROOT set to "complex" (string)
 CNSsolve>evaluate (&filenames.template=&fileroot + "_1.pdb") 
 EVALUATE: symbol $_1_FILENAMES.TEMPLATE set to "complex_1.pdb" (string)
 CNSsolve>evaluate (&iterations.ini_count    =1) 
 EVALUATE: symbol $_1_ITERATIONS.INI_COUNT set to    1.00000     (real)
 CNSsolve>evaluate (&iterations.structures   =&structures_$iteration) 
 EVALUATE: symbol $_1_ITERATIONS.STRUCTURES set to    20.0000     (real)
 CNSsolve>evaluate (&iterations.keepstruct   =&keepstruct_$iteration) 
 EVALUATE: symbol $_1_ITERATIONS.KEEPSTRUCT set to    20.0000     (real)
 CNSsolve>evaluate (&iterations.filesort     =&filesort_$iteration) 
 Assuming literal string "&FILESORT_$ITERATION"
 EVALUATE: symbol $_1_ITERATIONS.FILESORT set to "&FILESORT_$ITERATION" (string)
 CNSsolve>evaluate (&iterations.w_vdw        =&w_vdw_$iteration) 
 EVALUATE: symbol $_1_ITERATIONS.W_VDW set to   0.100000E-01 (real)
 CNSsolve>evaluate (&iterations.w_elec       =&w_elec_$iteration) 
 EVALUATE: symbol $_1_ITERATIONS.W_ELEC set to    1.00000     (real)
 CNSsolve>evaluate (&iterations.w_dist       =&w_dist_$iteration) 
 EVALUATE: symbol $_1_ITERATIONS.W_DIST set to   0.100000E-01 (real)
 CNSsolve>evaluate (&iterations.w_rg         =&w_rg_$iteration) 
 EVALUATE: symbol $_1_ITERATIONS.W_RG set to   0.100000     (real)
 CNSsolve>evaluate (&iterations.w_sani       =&w_sani_$iteration) 
 EVALUATE: symbol $_1_ITERATIONS.W_SANI set to   0.100000     (real)
 CNSsolve>evaluate (&iterations.w_xrdc       =&w_xrdc_$iteration) 
 EVALUATE: symbol $_1_ITERATIONS.W_XRDC set to   0.100000     (real)
 CNSsolve>evaluate (&iterations.w_xpcs       =&w_xpcs_$iteration) 
 EVALUATE: symbol $_1_ITERATIONS.W_XPCS set to   0.100000     (real)
 CNSsolve>evaluate (&iterations.w_dani       =&w_dani_$iteration) 
 EVALUATE: symbol $_1_ITERATIONS.W_DANI set to   0.100000E-01 (real)
 CNSsolve>evaluate (&iterations.w_vean       =&w_vean_$iteration) 
 EVALUATE: symbol $_1_ITERATIONS.W_VEAN set to   0.100000     (real)
 CNSsolve>evaluate (&iterations.w_cdih       =&w_cdih_$iteration) 
 EVALUATE: symbol $_1_ITERATIONS.W_CDIH set to    0.00000     (real)
 CNSsolve>evaluate (&iterations.w_sym        =&w_sym_$iteration) 
 EVALUATE: symbol $_1_ITERATIONS.W_SYM set to   0.100000     (real)
 CNSsolve>evaluate (&iterations.w_bsa        =&w_bsa_$iteration) 
 EVALUATE: symbol $_1_ITERATIONS.W_BSA set to  -0.100000E-01 (real)
 CNSsolve>evaluate (&iterations.w_deint      =&w_deint_$iteration) 
 EVALUATE: symbol $_1_ITERATIONS.W_DEINT set to    0.00000     (real)
 CNSsolve>evaluate (&iterations.w_desolv     =&w_desolv_$iteration) 
 EVALUATE: symbol $_1_ITERATIONS.W_DESOLV set to    1.00000     (real)
 CNSsolve>evaluate (&iterations.anastruc     =&anastruc_$iteration) 
 EVALUATE: symbol $_1_ITERATIONS.ANASTRUC set to    20.0000     (real)
 CNSsolve>evaluate (&iterations.rotate180    =&rotate180_$iteration) 
 EVALUATE: symbol $_1_ITERATIONS.ROTATE180 set to FALSE (logical)
 CNSsolve>!topology and parameters, sequence file, template file, interface definition: 
 CNSsolve>evaluate (&toppar.prot_top_1=&prot_top_A ) 
 EVALUATE: symbol $_1_TOPPAR.PROT_TOP_1 set to "protein-allhdg5-4.top" (string)
 CNSsolve>evaluate (&toppar.prot_top_2=&prot_top_B ) 
 EVALUATE: symbol $_1_TOPPAR.PROT_TOP_2 set to "protein-allhdg5-4.top" (string)
 CNSsolve>evaluate (&toppar.prot_top_3=&prot_top_C ) 
 EVALUATE: symbol $_1_TOPPAR.PROT_TOP_3 set to "" (string)
 CNSsolve>evaluate (&toppar.prot_top_4=&prot_top_D ) 
 EVALUATE: symbol $_1_TOPPAR.PROT_TOP_4 set to "" (string)
 CNSsolve>evaluate (&toppar.prot_top_5=&prot_top_E ) 
 EVALUATE: symbol $_1_TOPPAR.PROT_TOP_5 set to "" (string)
 CNSsolve>evaluate (&toppar.prot_top_6=&prot_top_F ) 
 EVALUATE: symbol $_1_TOPPAR.PROT_TOP_6 set to "" (string)
 CNSsolve>evaluate (&toppar.prot_link_1=&prot_link_A ) 
 EVALUATE: symbol $_1_TOPPAR.PROT_LINK_1 set to "protein-allhdg5-4-noter.link" (string)
 CNSsolve>evaluate (&toppar.prot_link_2=&prot_link_B ) 
 EVALUATE: symbol $_1_TOPPAR.PROT_LINK_2 set to "protein-allhdg5-4-noter.link" (string)
 CNSsolve>evaluate (&toppar.prot_link_3=&prot_link_C ) 
 EVALUATE: symbol $_1_TOPPAR.PROT_LINK_3 set to "" (string)
 CNSsolve>evaluate (&toppar.prot_link_4=&prot_link_D ) 
 EVALUATE: symbol $_1_TOPPAR.PROT_LINK_4 set to "" (string)
 CNSsolve>evaluate (&toppar.prot_link_5=&prot_link_E ) 
 EVALUATE: symbol $_1_TOPPAR.PROT_LINK_5 set to "" (string)
 CNSsolve>evaluate (&toppar.prot_link_6=&prot_link_F ) 
 EVALUATE: symbol $_1_TOPPAR.PROT_LINK_6 set to "" (string)
 CNSsolve>evaluate (&toppar.prot_par_1=&prot_par_A ) 
 EVALUATE: symbol $_1_TOPPAR.PROT_PAR_1 set to "protein-allhdg5-4.param" (string)
 CNSsolve>evaluate (&toppar.prot_par_2=&prot_par_B ) 
 EVALUATE: symbol $_1_TOPPAR.PROT_PAR_2 set to "protein-allhdg5-4.param" (string)
 CNSsolve>evaluate (&toppar.prot_par_3=&prot_par_C ) 
 EVALUATE: symbol $_1_TOPPAR.PROT_PAR_3 set to "" (string)
 CNSsolve>evaluate (&toppar.prot_par_4=&prot_par_D ) 
 EVALUATE: symbol $_1_TOPPAR.PROT_PAR_4 set to "" (string)
 CNSsolve>evaluate (&toppar.prot_par_5=&prot_par_E ) 
 EVALUATE: symbol $_1_TOPPAR.PROT_PAR_5 set to "" (string)
 CNSsolve>evaluate (&toppar.prot_par_6=&prot_par_F ) 
 EVALUATE: symbol $_1_TOPPAR.PROT_PAR_6 set to "" (string)
 CNSsolve>evaluate (&toppar.par_nonbonded=&par_nonbonded) 
 EVALUATE: symbol $_1_TOPPAR.PAR_NONBONDED set to "OPLSX" (string)
 CNSsolve>evaluate (&toppar.prot_coor_1=&prot_coor_A) 
 EVALUATE: symbol $_1_TOPPAR.PROT_COOR_1 set to "protein1.pdb" (string)
 CNSsolve>evaluate (&toppar.prot_coor_2=&prot_coor_B) 
 EVALUATE: symbol $_1_TOPPAR.PROT_COOR_2 set to "protein2.pdb" (string)
 CNSsolve>evaluate (&toppar.prot_coor_3=&prot_coor_C) 
 EVALUATE: symbol $_1_TOPPAR.PROT_COOR_3 set to "" (string)
 CNSsolve>evaluate (&toppar.prot_coor_4=&prot_coor_D) 
 EVALUATE: symbol $_1_TOPPAR.PROT_COOR_4 set to "" (string)
 CNSsolve>evaluate (&toppar.prot_coor_5=&prot_coor_E) 
 EVALUATE: symbol $_1_TOPPAR.PROT_COOR_5 set to "" (string)
 CNSsolve>evaluate (&toppar.prot_coor_6=&prot_coor_F) 
 EVALUATE: symbol $_1_TOPPAR.PROT_COOR_6 set to "" (string)
 CNSsolve>evaluate (&toppar.prot_root_1=&prot_root_A) 
 EVALUATE: symbol $_1_TOPPAR.PROT_ROOT_1 set to "protein1" (string)
 CNSsolve>evaluate (&toppar.prot_root_2=&prot_root_B) 
 EVALUATE: symbol $_1_TOPPAR.PROT_ROOT_2 set to "protein2" (string)
 CNSsolve>evaluate (&toppar.prot_root_3=&prot_root_C) 
 EVALUATE: symbol $_1_TOPPAR.PROT_ROOT_3 set to "" (string)
 CNSsolve>evaluate (&toppar.prot_root_4=&prot_root_D) 
 EVALUATE: symbol $_1_TOPPAR.PROT_ROOT_4 set to "" (string)
 CNSsolve>evaluate (&toppar.prot_root_5=&prot_root_E) 
 EVALUATE: symbol $_1_TOPPAR.PROT_ROOT_5 set to "" (string)
 CNSsolve>evaluate (&toppar.prot_root_6=&prot_root_F) 
 EVALUATE: symbol $_1_TOPPAR.PROT_ROOT_6 set to "" (string)
 CNSsolve>evaluate (&toppar.dna_1=&dna_A) 
 EVALUATE: symbol $_1_TOPPAR.DNA_1 set to FALSE (logical)
 CNSsolve>evaluate (&toppar.dna_2=&dna_B) 
 EVALUATE: symbol $_1_TOPPAR.DNA_2 set to FALSE (logical)
 CNSsolve>evaluate (&toppar.dna_3=&dna_C) 
 EVALUATE: symbol $_1_TOPPAR.DNA_3 set to FALSE (logical)
 CNSsolve>evaluate (&toppar.dna_4=&dna_D) 
 EVALUATE: symbol $_1_TOPPAR.DNA_4 set to FALSE (logical)
 CNSsolve>evaluate (&toppar.dna_5=&dna_E) 
 EVALUATE: symbol $_1_TOPPAR.DNA_5 set to FALSE (logical)
 CNSsolve>evaluate (&toppar.dna_6=&dna_F) 
 EVALUATE: symbol $_1_TOPPAR.DNA_6 set to FALSE (logical)
 CNSsolve>evaluate (&toppar.prot_segid_1=&prot_segid_A) 
 EVALUATE: symbol $_1_TOPPAR.PROT_SEGID_1 set to "A" (string)
 CNSsolve>evaluate (&toppar.prot_segid_2=&prot_segid_B) 
 EVALUATE: symbol $_1_TOPPAR.PROT_SEGID_2 set to "B" (string)
 CNSsolve>evaluate (&toppar.prot_segid_3=&prot_segid_C) 
 EVALUATE: symbol $_1_TOPPAR.PROT_SEGID_3 set to "C" (string)
 CNSsolve>evaluate (&toppar.prot_segid_4=&prot_segid_D) 
 EVALUATE: symbol $_1_TOPPAR.PROT_SEGID_4 set to "D" (string)
 CNSsolve>evaluate (&toppar.prot_segid_5=&prot_segid_E) 
 EVALUATE: symbol $_1_TOPPAR.PROT_SEGID_5 set to "E" (string)
 CNSsolve>evaluate (&toppar.prot_segid_6=&prot_segid_F) 
 EVALUATE: symbol $_1_TOPPAR.PROT_SEGID_6 set to "F" (string)
 CNSsolve>evaluate (&data.ncomponents=&ncomponents) 
 EVALUATE: symbol $_1_DATA.NCOMPONENTS set to    2.00000     (real)
 CNSsolve>evaluate (&toppar.nseg_1=&nseg_A) 
 EVALUATE: symbol $_1_TOPPAR.NSEG_1 set to   -1.00000     (real)
 CNSsolve>evaluate (&toppar.nseg_2=&nseg_B) 
 EVALUATE: symbol $_1_TOPPAR.NSEG_2 set to   -1.00000     (real)
 CNSsolve>evaluate (&toppar.nseg_3=&nseg_C) 
 EVALUATE: symbol $_1_TOPPAR.NSEG_3 set to   -1.00000     (real)
 CNSsolve>evaluate (&toppar.nseg_4=&nseg_D) 
 EVALUATE: symbol $_1_TOPPAR.NSEG_4 set to   -1.00000     (real)
 CNSsolve>evaluate (&toppar.nseg_5=&nseg_E) 
 EVALUATE: symbol $_1_TOPPAR.NSEG_5 set to   -1.00000     (real)
 CNSsolve>evaluate (&toppar.nseg_6=&nseg_F) 
 EVALUATE: symbol $_1_TOPPAR.NSEG_6 set to   -1.00000     (real)
 CNSsolve>evaluate (&toppar.start_seg_1_1=&A_start_seg_1) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_1_1 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_1_2=&A_start_seg_2) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_1_2 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_1_3=&A_start_seg_3) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_1_3 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_1_4=&A_start_seg_4) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_1_4 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_1_5=&A_start_seg_5) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_1_5 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_1_6=&A_start_seg_6) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_1_6 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_1_7=&A_start_seg_7) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_1_7 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_1_8=&A_start_seg_8) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_1_8 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_1_9=&A_start_seg_9) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_1_9 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_1_10=&A_start_seg_10) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_1_10 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_1_1=&A_end_seg_1) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_1_1 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_1_2=&A_end_seg_2) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_1_2 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_1_3=&A_end_seg_3) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_1_3 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_1_4=&A_end_seg_4) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_1_4 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_1_5=&A_end_seg_5) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_1_5 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_1_6=&A_end_seg_6) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_1_6 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_1_7=&A_end_seg_7) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_1_7 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_1_8=&A_end_seg_8) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_1_8 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_1_9=&A_end_seg_9) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_1_9 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_1_10=&A_end_seg_10) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_1_10 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_2_1=&B_start_seg_1) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_2_1 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_2_2=&B_start_seg_2) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_2_2 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_2_3=&B_start_seg_3) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_2_3 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_2_4=&B_start_seg_4) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_2_4 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_2_5=&B_start_seg_5) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_2_5 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_2_6=&B_start_seg_6) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_2_6 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_2_7=&B_start_seg_7) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_2_7 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_2_8=&B_start_seg_8) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_2_8 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_2_9=&B_start_seg_9) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_2_9 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_2_10=&B_start_seg_10) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_2_10 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_2_1=&B_end_seg_1) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_2_1 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_2_2=&B_end_seg_2) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_2_2 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_2_3=&B_end_seg_3) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_2_3 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_2_4=&B_end_seg_4) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_2_4 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_2_5=&B_end_seg_5) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_2_5 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_2_6=&B_end_seg_6) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_2_6 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_2_7=&B_end_seg_7) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_2_7 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_2_8=&B_end_seg_8) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_2_8 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_2_9=&B_end_seg_9) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_2_9 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_2_10=&B_end_seg_10) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_2_10 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_3_1=&C_start_seg_1) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_3_1 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_3_2=&C_start_seg_2) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_3_2 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_3_3=&C_start_seg_3) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_3_3 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_3_4=&C_start_seg_4) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_3_4 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_3_5=&C_start_seg_5) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_3_5 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_3_6=&C_start_seg_6) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_3_6 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_3_7=&C_start_seg_7) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_3_7 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_3_8=&C_start_seg_8) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_3_8 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_3_9=&C_start_seg_9) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_3_9 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_3_10=&C_start_seg_10) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_3_10 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_3_1=&C_end_seg_1) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_3_1 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_3_2=&C_end_seg_2) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_3_2 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_3_3=&C_end_seg_3) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_3_3 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_3_4=&C_end_seg_4) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_3_4 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_3_5=&C_end_seg_5) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_3_5 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_3_6=&C_end_seg_6) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_3_6 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_3_7=&C_end_seg_7) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_3_7 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_3_8=&C_end_seg_8) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_3_8 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_3_9=&C_end_seg_9) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_3_9 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_3_10=&C_end_seg_10) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_3_10 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_4_1=&D_start_seg_1) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_4_1 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_4_2=&D_start_seg_2) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_4_2 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_4_3=&D_start_seg_3) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_4_3 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_4_4=&D_start_seg_4) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_4_4 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_4_5=&D_start_seg_5) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_4_5 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_4_6=&D_start_seg_6) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_4_6 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_4_7=&D_start_seg_7) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_4_7 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_4_8=&D_start_seg_8) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_4_8 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_4_9=&D_start_seg_9) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_4_9 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_4_10=&D_start_seg_10) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_4_10 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_4_1=&D_end_seg_1) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_4_1 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_4_2=&D_end_seg_2) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_4_2 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_4_3=&D_end_seg_3) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_4_3 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_4_4=&D_end_seg_4) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_4_4 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_4_5=&D_end_seg_5) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_4_5 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_4_6=&D_end_seg_6) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_4_6 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_4_7=&D_end_seg_7) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_4_7 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_4_8=&D_end_seg_8) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_4_8 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_4_9=&D_end_seg_9) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_4_9 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_4_10=&D_end_seg_10) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_4_10 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_5_1=&E_start_seg_1) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_5_1 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_5_2=&E_start_seg_2) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_5_2 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_5_3=&E_start_seg_3) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_5_3 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_5_4=&E_start_seg_4) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_5_4 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_5_5=&E_start_seg_5) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_5_5 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_5_6=&E_start_seg_6) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_5_6 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_5_7=&E_start_seg_7) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_5_7 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_5_8=&E_start_seg_8) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_5_8 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_5_9=&E_start_seg_9) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_5_9 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_5_10=&E_start_seg_10) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_5_10 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_5_1=&E_end_seg_1) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_5_1 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_5_2=&E_end_seg_2) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_5_2 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_5_3=&E_end_seg_3) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_5_3 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_5_4=&E_end_seg_4) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_5_4 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_5_5=&E_end_seg_5) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_5_5 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_5_6=&E_end_seg_6) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_5_6 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_5_7=&E_end_seg_7) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_5_7 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_5_8=&E_end_seg_8) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_5_8 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_5_9=&E_end_seg_9) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_5_9 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_5_10=&E_end_seg_10) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_5_10 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_6_1=&F_start_seg_1) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_6_1 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_6_2=&F_start_seg_2) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_6_2 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_6_3=&F_start_seg_3) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_6_3 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_6_4=&F_start_seg_4) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_6_4 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_6_5=&F_start_seg_5) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_6_5 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_6_6=&F_start_seg_6) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_6_6 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_6_7=&F_start_seg_7) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_6_7 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_6_8=&F_start_seg_8) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_6_8 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_6_9=&F_start_seg_9) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_6_9 set to "" (string)
 CNSsolve>evaluate (&toppar.start_seg_6_10=&F_start_seg_10) 
 EVALUATE: symbol $_1_TOPPAR.START_SEG_6_10 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_6_1=&F_end_seg_1) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_6_1 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_6_2=&F_end_seg_2) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_6_2 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_6_3=&F_end_seg_3) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_6_3 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_6_4=&F_end_seg_4) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_6_4 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_6_5=&F_end_seg_5) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_6_5 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_6_6=&F_end_seg_6) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_6_6 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_6_7=&F_end_seg_7) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_6_7 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_6_8=&F_end_seg_8) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_6_8 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_6_9=&F_end_seg_9) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_6_9 set to "" (string)
 CNSsolve>evaluate (&toppar.end_seg_6_10=&F_end_seg_10) 
 EVALUATE: symbol $_1_TOPPAR.END_SEG_6_10 set to "" (string)
 CNSsolve>evaluate (&toppar.nfle_1=&nfle_A) 
 EVALUATE: symbol $_1_TOPPAR.NFLE_1 set to    0.00000     (real)
 CNSsolve>evaluate (&toppar.start_fle_1_1=&A_start_fle_1) 
 EVALUATE: symbol $_1_TOPPAR.START_FLE_1_1 set to "" (string)
 CNSsolve>evaluate (&toppar.start_fle_1_2=&A_start_fle_2) 
 EVALUATE: symbol $_1_TOPPAR.START_FLE_1_2 set to "" (string)
 CNSsolve>evaluate (&toppar.start_fle_1_3=&A_start_fle_3) 
 EVALUATE: symbol $_1_TOPPAR.START_FLE_1_3 set to "" (string)
 CNSsolve>evaluate (&toppar.start_fle_1_4=&A_start_fle_4) 
 EVALUATE: symbol $_1_TOPPAR.START_FLE_1_4 set to "" (string)
 CNSsolve>evaluate (&toppar.start_fle_1_5=&A_start_fle_5) 
 EVALUATE: symbol $_1_TOPPAR.START_FLE_1_5 set to "" (string)
 CNSsolve>evaluate (&toppar.end_fle_1_1=&A_end_fle_1) 
 EVALUATE: symbol $_1_TOPPAR.END_FLE_1_1 set to "" (string)
 CNSsolve>evaluate (&toppar.end_fle_1_2=&A_end_fle_2) 
 EVALUATE: symbol $_1_TOPPAR.END_FLE_1_2 set to "" (string)
 CNSsolve>evaluate (&toppar.end_fle_1_3=&A_end_fle_3) 
 EVALUATE: symbol $_1_TOPPAR.END_FLE_1_3 set to "" (string)
 CNSsolve>evaluate (&toppar.end_fle_1_4=&A_end_fle_4) 
 EVALUATE: symbol $_1_TOPPAR.END_FLE_1_4 set to "" (string)
 CNSsolve>evaluate (&toppar.end_fle_1_5=&A_end_fle_5) 
 EVALUATE: symbol $_1_TOPPAR.END_FLE_1_5 set to "" (string)
 CNSsolve>evaluate (&toppar.nfle_2=&nfle_B) 
 EVALUATE: symbol $_1_TOPPAR.NFLE_2 set to    0.00000     (real)
 CNSsolve>evaluate (&toppar.start_fle_2_1=&B_start_fle_1) 
 EVALUATE: symbol $_1_TOPPAR.START_FLE_2_1 set to "" (string)
 CNSsolve>evaluate (&toppar.start_fle_2_2=&B_start_fle_2) 
 EVALUATE: symbol $_1_TOPPAR.START_FLE_2_2 set to "" (string)
 CNSsolve>evaluate (&toppar.start_fle_2_3=&B_start_fle_3) 
 EVALUATE: symbol $_1_TOPPAR.START_FLE_2_3 set to "" (string)
 CNSsolve>evaluate (&toppar.start_fle_2_4=&B_start_fle_4) 
 EVALUATE: symbol $_1_TOPPAR.START_FLE_2_4 set to "" (string)
 CNSsolve>evaluate (&toppar.start_fle_2_5=&B_start_fle_5) 
 EVALUATE: symbol $_1_TOPPAR.START_FLE_2_5 set to "" (string)
 CNSsolve>evaluate (&toppar.end_fle_2_1=&B_end_fle_1) 
 EVALUATE: symbol $_1_TOPPAR.END_FLE_2_1 set to "" (string)
 CNSsolve>evaluate (&toppar.end_fle_2_2=&B_end_fle_2) 
 EVALUATE: symbol $_1_TOPPAR.END_FLE_2_2 set to "" (string)
 CNSsolve>evaluate (&toppar.end_fle_2_3=&B_end_fle_3) 
 EVALUATE: symbol $_1_TOPPAR.END_FLE_2_3 set to "" (string)
 CNSsolve>evaluate (&toppar.end_fle_2_4=&B_end_fle_4) 
 EVALUATE: symbol $_1_TOPPAR.END_FLE_2_4 set to "" (string)
 CNSsolve>evaluate (&toppar.end_fle_2_5=&B_end_fle_5) 
 EVALUATE: symbol $_1_TOPPAR.END_FLE_2_5 set to "" (string)
 CNSsolve>evaluate (&toppar.nfle_3=&nfle_C) 
 EVALUATE: symbol $_1_TOPPAR.NFLE_3 set to    0.00000     (real)
 CNSsolve>evaluate (&toppar.start_fle_3_1=&C_start_fle_1) 
 EVALUATE: symbol $_1_TOPPAR.START_FLE_3_1 set to "" (string)
 CNSsolve>evaluate (&toppar.start_fle_3_2=&C_start_fle_2) 
 EVALUATE: symbol $_1_TOPPAR.START_FLE_3_2 set to "" (string)
 CNSsolve>evaluate (&toppar.start_fle_3_3=&C_start_fle_3) 
 EVALUATE: symbol $_1_TOPPAR.START_FLE_3_3 set to "" (string)
 CNSsolve>evaluate (&toppar.start_fle_3_4=&C_start_fle_4) 
 EVALUATE: symbol $_1_TOPPAR.START_FLE_3_4 set to "" (string)
 CNSsolve>evaluate (&toppar.start_fle_3_5=&C_start_fle_5) 
 EVALUATE: symbol $_1_TOPPAR.START_FLE_3_5 set to "" (string)
 CNSsolve>evaluate (&toppar.end_fle_3_1=&C_end_fle_1) 
 EVALUATE: symbol $_1_TOPPAR.END_FLE_3_1 set to "" (string)
 CNSsolve>evaluate (&toppar.end_fle_3_2=&C_end_fle_2) 
 EVALUATE: symbol $_1_TOPPAR.END_FLE_3_2 set to "" (string)
 CNSsolve>evaluate (&toppar.end_fle_3_3=&C_end_fle_3) 
 EVALUATE: symbol $_1_TOPPAR.END_FLE_3_3 set to "" (string)
 CNSsolve>evaluate (&toppar.end_fle_3_4=&C_end_fle_4) 
 EVALUATE: symbol $_1_TOPPAR.END_FLE_3_4 set to "" (string)
 CNSsolve>evaluate (&toppar.end_fle_3_5=&C_end_fle_5) 
 EVALUATE: symbol $_1_TOPPAR.END_FLE_3_5 set to "" (string)
 CNSsolve>evaluate (&toppar.nfle_4=&nfle_D) 
 EVALUATE: symbol $_1_TOPPAR.NFLE_4 set to    0.00000     (real)
 CNSsolve>evaluate (&toppar.start_fle_4_1=&D_start_fle_1) 
 EVALUATE: symbol $_1_TOPPAR.START_FLE_4_1 set to "" (string)
 CNSsolve>evaluate (&toppar.start_fle_4_2=&D_start_fle_2) 
 EVALUATE: symbol $_1_TOPPAR.START_FLE_4_2 set to "" (string)
 CNSsolve>evaluate (&toppar.start_fle_4_3=&D_start_fle_3) 
 EVALUATE: symbol $_1_TOPPAR.START_FLE_4_3 set to "" (string)
 CNSsolve>evaluate (&toppar.start_fle_4_4=&D_start_fle_4) 
 EVALUATE: symbol $_1_TOPPAR.START_FLE_4_4 set to "" (string)
 CNSsolve>evaluate (&toppar.start_fle_4_5=&D_start_fle_5) 
 EVALUATE: symbol $_1_TOPPAR.START_FLE_4_5 set to "" (string)
 CNSsolve>evaluate (&toppar.end_fle_4_1=&D_end_fle_1) 
 EVALUATE: symbol $_1_TOPPAR.END_FLE_4_1 set to "" (string)
 CNSsolve>evaluate (&toppar.end_fle_4_2=&D_end_fle_2) 
 EVALUATE: symbol $_1_TOPPAR.END_FLE_4_2 set to "" (string)
 CNSsolve>evaluate (&toppar.end_fle_4_3=&D_end_fle_3) 
 EVALUATE: symbol $_1_TOPPAR.END_FLE_4_3 set to "" (string)
 CNSsolve>evaluate (&toppar.end_fle_4_4=&D_end_fle_4) 
 EVALUATE: symbol $_1_TOPPAR.END_FLE_4_4 set to "" (string)
 CNSsolve>evaluate (&toppar.end_fle_4_5=&D_end_fle_5) 
 EVALUATE: symbol $_1_TOPPAR.END_FLE_4_5 set to "" (string)
 CNSsolve>evaluate (&toppar.nfle_5=&nfle_E) 
 EVALUATE: symbol $_1_TOPPAR.NFLE_5 set to    0.00000     (real)
 CNSsolve>evaluate (&toppar.start_fle_5_1=&E_start_fle_1) 
 EVALUATE: symbol $_1_TOPPAR.START_FLE_5_1 set to "" (string)
 CNSsolve>evaluate (&toppar.start_fle_5_2=&E_start_fle_2) 
 EVALUATE: symbol $_1_TOPPAR.START_FLE_5_2 set to "" (string)
 CNSsolve>evaluate (&toppar.start_fle_5_3=&E_start_fle_3) 
 EVALUATE: symbol $_1_TOPPAR.START_FLE_5_3 set to "" (string)
 CNSsolve>evaluate (&toppar.start_fle_5_4=&E_start_fle_4) 
 EVALUATE: symbol $_1_TOPPAR.START_FLE_5_4 set to "" (string)
 CNSsolve>evaluate (&toppar.start_fle_5_5=&E_start_fle_5) 
 EVALUATE: symbol $_1_TOPPAR.START_FLE_5_5 set to "" (string)
 CNSsolve>evaluate (&toppar.end_fle_5_1=&E_end_fle_1) 
 EVALUATE: symbol $_1_TOPPAR.END_FLE_5_1 set to "" (string)
 CNSsolve>evaluate (&toppar.end_fle_5_2=&E_end_fle_2) 
 EVALUATE: symbol $_1_TOPPAR.END_FLE_5_2 set to "" (string)
 CNSsolve>evaluate (&toppar.end_fle_5_3=&E_end_fle_3) 
 EVALUATE: symbol $_1_TOPPAR.END_FLE_5_3 set to "" (string)
 CNSsolve>evaluate (&toppar.end_fle_5_4=&E_end_fle_4) 
 EVALUATE: symbol $_1_TOPPAR.END_FLE_5_4 set to "" (string)
 CNSsolve>evaluate (&toppar.end_fle_5_5=&E_end_fle_5) 
 EVALUATE: symbol $_1_TOPPAR.END_FLE_5_5 set to "" (string)
 CNSsolve>evaluate (&toppar.nfle_6=&nfle_F) 
 EVALUATE: symbol $_1_TOPPAR.NFLE_6 set to    0.00000     (real)
 CNSsolve>evaluate (&toppar.start_fle_6_1=&F_start_fle_1) 
 EVALUATE: symbol $_1_TOPPAR.START_FLE_6_1 set to "" (string)
 CNSsolve>evaluate (&toppar.start_fle_6_2=&F_start_fle_2) 
 EVALUATE: symbol $_1_TOPPAR.START_FLE_6_2 set to "" (string)
 CNSsolve>evaluate (&toppar.start_fle_6_3=&F_start_fle_3) 
 EVALUATE: symbol $_1_TOPPAR.START_FLE_6_3 set to "" (string)
 CNSsolve>evaluate (&toppar.start_fle_6_4=&F_start_fle_4) 
 EVALUATE: symbol $_1_TOPPAR.START_FLE_6_4 set to "" (string)
 CNSsolve>evaluate (&toppar.start_fle_6_5=&F_start_fle_5) 
 EVALUATE: symbol $_1_TOPPAR.START_FLE_6_5 set to "" (string)
 CNSsolve>evaluate (&toppar.end_fle_6_1=&F_end_fle_1) 
 EVALUATE: symbol $_1_TOPPAR.END_FLE_6_1 set to "" (string)
 CNSsolve>evaluate (&toppar.end_fle_6_2=&F_end_fle_2) 
 EVALUATE: symbol $_1_TOPPAR.END_FLE_6_2 set to "" (string)
 CNSsolve>evaluate (&toppar.end_fle_6_3=&F_end_fle_3) 
 EVALUATE: symbol $_1_TOPPAR.END_FLE_6_3 set to "" (string)
 CNSsolve>evaluate (&toppar.end_fle_6_4=&F_end_fle_4) 
 EVALUATE: symbol $_1_TOPPAR.END_FLE_6_4 set to "" (string)
 CNSsolve>evaluate (&toppar.end_fle_6_5=&F_end_fle_5) 
 EVALUATE: symbol $_1_TOPPAR.END_FLE_6_5 set to "" (string)
 CNSsolve>evaluate (&data.numncs=&numncs) 
 EVALUATE: symbol $_1_DATA.NUMNCS set to    0.00000     (real)
 CNSsolve>evaluate (&toppar.ncs_sta1_1=&ncs_sta1_1) 
 EVALUATE: symbol $_1_TOPPAR.NCS_STA1_1 set to "" (string)
 CNSsolve>evaluate (&toppar.ncs_sta1_2=&ncs_sta1_2) 
 EVALUATE: symbol $_1_TOPPAR.NCS_STA1_2 set to "" (string)
 CNSsolve>evaluate (&toppar.ncs_sta1_3=&ncs_sta1_3) 
 EVALUATE: symbol $_1_TOPPAR.NCS_STA1_3 set to "" (string)
 CNSsolve>evaluate (&toppar.ncs_sta1_4=&ncs_sta1_4) 
 EVALUATE: symbol $_1_TOPPAR.NCS_STA1_4 set to "" (string)
 CNSsolve>evaluate (&toppar.ncs_sta1_5=&ncs_sta1_5) 
 EVALUATE: symbol $_1_TOPPAR.NCS_STA1_5 set to "" (string)
 CNSsolve>evaluate (&toppar.ncs_end1_1=&ncs_end1_1) 
 EVALUATE: symbol $_1_TOPPAR.NCS_END1_1 set to "" (string)
 CNSsolve>evaluate (&toppar.ncs_end1_2=&ncs_end1_2) 
 EVALUATE: symbol $_1_TOPPAR.NCS_END1_2 set to "" (string)
 CNSsolve>evaluate (&toppar.ncs_end1_3=&ncs_end1_3) 
 EVALUATE: symbol $_1_TOPPAR.NCS_END1_3 set to "" (string)
 CNSsolve>evaluate (&toppar.ncs_end1_4=&ncs_end1_4) 
 EVALUATE: symbol $_1_TOPPAR.NCS_END1_4 set to "" (string)
 CNSsolve>evaluate (&toppar.ncs_end1_5=&ncs_end1_5) 
 EVALUATE: symbol $_1_TOPPAR.NCS_END1_5 set to "" (string)
 CNSsolve>evaluate (&toppar.ncs_seg1_1=&ncs_seg1_1) 
 EVALUATE: symbol $_1_TOPPAR.NCS_SEG1_1 set to "" (string)
 CNSsolve>evaluate (&toppar.ncs_seg1_2=&ncs_seg1_2) 
 EVALUATE: symbol $_1_TOPPAR.NCS_SEG1_2 set to "" (string)
 CNSsolve>evaluate (&toppar.ncs_seg1_3=&ncs_seg1_3) 
 EVALUATE: symbol $_1_TOPPAR.NCS_SEG1_3 set to "" (string)
 CNSsolve>evaluate (&toppar.ncs_seg1_4=&ncs_seg1_4) 
 EVALUATE: symbol $_1_TOPPAR.NCS_SEG1_4 set to "" (string)
 CNSsolve>evaluate (&toppar.ncs_seg1_5=&ncs_seg1_5) 
 EVALUATE: symbol $_1_TOPPAR.NCS_SEG1_5 set to "" (string)
 CNSsolve>evaluate (&toppar.ncs_sta2_1=&ncs_sta2_1) 
 EVALUATE: symbol $_1_TOPPAR.NCS_STA2_1 set to "" (string)
 CNSsolve>evaluate (&toppar.ncs_sta2_2=&ncs_sta2_2) 
 EVALUATE: symbol $_1_TOPPAR.NCS_STA2_2 set to "" (string)
 CNSsolve>evaluate (&toppar.ncs_sta2_3=&ncs_sta2_3) 
 EVALUATE: symbol $_1_TOPPAR.NCS_STA2_3 set to "" (string)
 CNSsolve>evaluate (&toppar.ncs_sta2_4=&ncs_sta2_4) 
 EVALUATE: symbol $_1_TOPPAR.NCS_STA2_4 set to "" (string)
 CNSsolve>evaluate (&toppar.ncs_sta2_5=&ncs_sta2_5) 
 EVALUATE: symbol $_1_TOPPAR.NCS_STA2_5 set to "" (string)
 CNSsolve>evaluate (&toppar.ncs_end2_1=&ncs_end2_1) 
 EVALUATE: symbol $_1_TOPPAR.NCS_END2_1 set to "" (string)
 CNSsolve>evaluate (&toppar.ncs_end2_2=&ncs_end2_2) 
 EVALUATE: symbol $_1_TOPPAR.NCS_END2_2 set to "" (string)
 CNSsolve>evaluate (&toppar.ncs_end2_3=&ncs_end2_3) 
 EVALUATE: symbol $_1_TOPPAR.NCS_END2_3 set to "" (string)
 CNSsolve>evaluate (&toppar.ncs_end2_4=&ncs_end2_4) 
 EVALUATE: symbol $_1_TOPPAR.NCS_END2_4 set to "" (string)
 CNSsolve>evaluate (&toppar.ncs_end2_5=&ncs_end2_5) 
 EVALUATE: symbol $_1_TOPPAR.NCS_END2_5 set to "" (string)
 CNSsolve>evaluate (&toppar.ncs_seg2_1=&ncs_seg2_1) 
 EVALUATE: symbol $_1_TOPPAR.NCS_SEG2_1 set to "" (string)
 CNSsolve>evaluate (&toppar.ncs_seg2_2=&ncs_seg2_2) 
 EVALUATE: symbol $_1_TOPPAR.NCS_SEG2_2 set to "" (string)
 CNSsolve>evaluate (&toppar.ncs_seg2_3=&ncs_seg2_3) 
 EVALUATE: symbol $_1_TOPPAR.NCS_SEG2_3 set to "" (string)
 CNSsolve>evaluate (&toppar.ncs_seg2_4=&ncs_seg2_4) 
 EVALUATE: symbol $_1_TOPPAR.NCS_SEG2_4 set to "" (string)
 CNSsolve>evaluate (&toppar.ncs_seg2_5=&ncs_seg2_5) 
 EVALUATE: symbol $_1_TOPPAR.NCS_SEG2_5 set to "" (string)
 CNSsolve>evaluate (&data.numc2sym=&numc2sym) 
 EVALUATE: symbol $_1_DATA.NUMC2SYM set to    0.00000     (real)
 CNSsolve>evaluate (&toppar.c2sym_sta1_1=&c2sym_sta1_1) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_STA1_1 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_sta1_2=&c2sym_sta1_2) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_STA1_2 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_sta1_3=&c2sym_sta1_3) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_STA1_3 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_sta1_4=&c2sym_sta1_4) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_STA1_4 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_sta1_5=&c2sym_sta1_5) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_STA1_5 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_sta1_6=&c2sym_sta1_6) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_STA1_6 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_sta1_7=&c2sym_sta1_7) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_STA1_7 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_sta1_8=&c2sym_sta1_8) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_STA1_8 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_sta1_9=&c2sym_sta1_8) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_STA1_9 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_sta1_10=&c2sym_sta1_10) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_STA1_10 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_end1_1=&c2sym_end1_1) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_END1_1 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_end1_2=&c2sym_end1_2) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_END1_2 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_end1_3=&c2sym_end1_3) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_END1_3 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_end1_4=&c2sym_end1_4) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_END1_4 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_end1_5=&c2sym_end1_5) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_END1_5 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_end1_6=&c2sym_end1_6) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_END1_6 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_end1_7=&c2sym_end1_7) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_END1_7 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_end1_8=&c2sym_end1_8) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_END1_8 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_end1_9=&c2sym_end1_9) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_END1_9 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_end1_10=&c2sym_end1_10) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_END1_10 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_seg1_1=&c2sym_seg1_1) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_SEG1_1 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_seg1_2=&c2sym_seg1_2) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_SEG1_2 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_seg1_3=&c2sym_seg1_3) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_SEG1_3 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_seg1_4=&c2sym_seg1_4) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_SEG1_4 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_seg1_5=&c2sym_seg1_5) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_SEG1_5 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_seg1_6=&c2sym_seg1_6) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_SEG1_6 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_seg1_7=&c2sym_seg1_7) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_SEG1_7 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_seg1_8=&c2sym_seg1_8) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_SEG1_8 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_seg1_9=&c2sym_seg1_9) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_SEG1_9 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_seg1_10=&c2sym_seg1_10) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_SEG1_10 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_sta2_1=&c2sym_sta2_1) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_STA2_1 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_sta2_2=&c2sym_sta2_2) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_STA2_2 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_sta2_3=&c2sym_sta2_3) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_STA2_3 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_sta2_4=&c2sym_sta2_4) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_STA2_4 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_sta2_5=&c2sym_sta2_5) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_STA2_5 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_sta2_6=&c2sym_sta2_6) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_STA2_6 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_sta2_7=&c2sym_sta2_7) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_STA2_7 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_sta2_8=&c2sym_sta2_8) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_STA2_8 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_sta2_9=&c2sym_sta2_9) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_STA2_9 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_sta2_10=&c2sym_sta2_10) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_STA2_10 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_end2_1=&c2sym_end2_1) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_END2_1 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_end2_2=&c2sym_end2_2) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_END2_2 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_end2_3=&c2sym_end2_3) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_END2_3 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_end2_4=&c2sym_end2_4) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_END2_4 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_end2_5=&c2sym_end2_5) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_END2_5 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_end2_6=&c2sym_end2_6) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_END2_6 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_end2_7=&c2sym_end2_7) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_END2_7 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_end2_8=&c2sym_end2_8) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_END2_8 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_end2_9=&c2sym_end2_9) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_END2_9 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_end2_10=&c2sym_end2_10) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_END2_10 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_seg2_1=&c2sym_seg2_1) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_SEG2_1 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_seg2_2=&c2sym_seg2_2) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_SEG2_2 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_seg2_3=&c2sym_seg2_3) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_SEG2_3 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_seg2_4=&c2sym_seg2_4) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_SEG2_4 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_seg2_5=&c2sym_seg2_5) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_SEG2_5 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_seg2_6=&c2sym_seg2_6) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_SEG2_6 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_seg2_7=&c2sym_seg2_7) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_SEG2_7 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_seg2_8=&c2sym_seg2_8) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_SEG2_8 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_seg2_9=&c2sym_seg2_9) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_SEG2_9 set to "" (string)
 CNSsolve>evaluate (&toppar.c2sym_seg2_10=&c2sym_seg2_10) 
 EVALUATE: symbol $_1_TOPPAR.C2SYM_SEG2_10 set to "" (string)
 CNSsolve>evaluate (&data.numc3sym=&numc3sym) 
 EVALUATE: symbol $_1_DATA.NUMC3SYM set to    0.00000     (real)
 CNSsolve>evaluate (&toppar.c3sym_sta1_1=&c3sym_sta1_1) 
 EVALUATE: symbol $_1_TOPPAR.C3SYM_STA1_1 set to "" (string)
 CNSsolve>evaluate (&toppar.c3sym_sta1_2=&c3sym_sta1_2) 
 EVALUATE: symbol $_1_TOPPAR.C3SYM_STA1_2 set to "" (string)
 CNSsolve>evaluate (&toppar.c3sym_sta2_1=&c3sym_sta2_1) 
 EVALUATE: symbol $_1_TOPPAR.C3SYM_STA2_1 set to "" (string)
 CNSsolve>evaluate (&toppar.c3sym_sta2_2=&c3sym_sta2_2) 
 EVALUATE: symbol $_1_TOPPAR.C3SYM_STA2_2 set to "" (string)
 CNSsolve>evaluate (&toppar.c3sym_sta3_1=&c3sym_sta3_1) 
 EVALUATE: symbol $_1_TOPPAR.C3SYM_STA3_1 set to "" (string)
 CNSsolve>evaluate (&toppar.c3sym_sta3_2=&c3sym_sta3_2) 
 EVALUATE: symbol $_1_TOPPAR.C3SYM_STA3_2 set to "" (string)
 CNSsolve>evaluate (&toppar.c3sym_end1_1=&c3sym_end1_1) 
 EVALUATE: symbol $_1_TOPPAR.C3SYM_END1_1 set to "" (string)
 CNSsolve>evaluate (&toppar.c3sym_end1_2=&c3sym_end1_2) 
 EVALUATE: symbol $_1_TOPPAR.C3SYM_END1_2 set to "" (string)
 CNSsolve>evaluate (&toppar.c3sym_end2_1=&c3sym_end2_1) 
 EVALUATE: symbol $_1_TOPPAR.C3SYM_END2_1 set to "" (string)
 CNSsolve>evaluate (&toppar.c3sym_end2_2=&c3sym_end2_2) 
 EVALUATE: symbol $_1_TOPPAR.C3SYM_END2_2 set to "" (string)
 CNSsolve>evaluate (&toppar.c3sym_end3_1=&c3sym_end3_1) 
 EVALUATE: symbol $_1_TOPPAR.C3SYM_END3_1 set to "" (string)
 CNSsolve>evaluate (&toppar.c3sym_end3_2=&c3sym_end3_2) 
 EVALUATE: symbol $_1_TOPPAR.C3SYM_END3_2 set to "" (string)
 CNSsolve>evaluate (&toppar.c3sym_seg1_1=&c3sym_seg1_1) 
 EVALUATE: symbol $_1_TOPPAR.C3SYM_SEG1_1 set to "" (string)
 CNSsolve>evaluate (&toppar.c3sym_seg1_2=&c3sym_seg1_2) 
 EVALUATE: symbol $_1_TOPPAR.C3SYM_SEG1_2 set to "" (string)
 CNSsolve>evaluate (&toppar.c3sym_seg2_1=&c3sym_seg2_1) 
 EVALUATE: symbol $_1_TOPPAR.C3SYM_SEG2_1 set to "" (string)
 CNSsolve>evaluate (&toppar.c3sym_seg2_2=&c3sym_seg2_2) 
 EVALUATE: symbol $_1_TOPPAR.C3SYM_SEG2_2 set to "" (string)
 CNSsolve>evaluate (&toppar.c3sym_seg3_1=&c3sym_seg3_1) 
 EVALUATE: symbol $_1_TOPPAR.C3SYM_SEG3_1 set to "" (string)
 CNSsolve>evaluate (&toppar.c3sym_seg3_2=&c3sym_seg3_2) 
 EVALUATE: symbol $_1_TOPPAR.C3SYM_SEG3_2 set to "" (string)
 CNSsolve>evaluate (&data.nums3sym=&nums3sym) 
 EVALUATE: symbol $_1_DATA.NUMS3SYM set to    0.00000     (real)
 CNSsolve>evaluate (&toppar.s3sym_sta1_1=&s3sym_sta1_1) 
 EVALUATE: symbol $_1_TOPPAR.S3SYM_STA1_1 set to "" (string)
 CNSsolve>evaluate (&toppar.s3sym_sta1_2=&s3sym_sta1_2) 
 EVALUATE: symbol $_1_TOPPAR.S3SYM_STA1_2 set to "" (string)
 CNSsolve>evaluate (&toppar.s3sym_sta1_3=&s3sym_sta1_3) 
 EVALUATE: symbol $_1_TOPPAR.S3SYM_STA1_3 set to "" (string)
 CNSsolve>evaluate (&toppar.s3sym_sta1_4=&s3sym_sta1_4) 
 EVALUATE: symbol $_1_TOPPAR.S3SYM_STA1_4 set to "" (string)
 CNSsolve>evaluate (&toppar.s3sym_sta2_1=&s3sym_sta2_1) 
 EVALUATE: symbol $_1_TOPPAR.S3SYM_STA2_1 set to "" (string)
 CNSsolve>evaluate (&toppar.s3sym_sta2_2=&s3sym_sta2_2) 
 EVALUATE: symbol $_1_TOPPAR.S3SYM_STA2_2 set to "" (string)
 CNSsolve>evaluate (&toppar.s3sym_sta2_3=&s3sym_sta2_3) 
 EVALUATE: symbol $_1_TOPPAR.S3SYM_STA2_3 set to "" (string)
 CNSsolve>evaluate (&toppar.s3sym_sta2_4=&s3sym_sta2_4) 
 EVALUATE: symbol $_1_TOPPAR.S3SYM_STA2_4 set to "" (string)
 CNSsolve>evaluate (&toppar.s3sym_sta3_1=&s3sym_sta3_1) 
 EVALUATE: symbol $_1_TOPPAR.S3SYM_STA3_1 set to "" (string)
 CNSsolve>evaluate (&toppar.s3sym_sta3_2=&s3sym_sta3_2) 
 EVALUATE: symbol $_1_TOPPAR.S3SYM_STA3_2 set to "" (string)
 CNSsolve>evaluate (&toppar.s3sym_sta3_3=&s3sym_sta3_3) 
 EVALUATE: symbol $_1_TOPPAR.S3SYM_STA3_3 set to "" (string)
 CNSsolve>evaluate (&toppar.s3sym_sta3_4=&s3sym_sta3_4) 
 EVALUATE: symbol $_1_TOPPAR.S3SYM_STA3_4 set to "" (string)
 CNSsolve>evaluate (&toppar.s3sym_end1_1=&s3sym_end1_1) 
 EVALUATE: symbol $_1_TOPPAR.S3SYM_END1_1 set to "" (string)
 CNSsolve>evaluate (&toppar.s3sym_end1_2=&s3sym_end1_2) 
 EVALUATE: symbol $_1_TOPPAR.S3SYM_END1_2 set to "" (string)
 CNSsolve>evaluate (&toppar.s3sym_end1_3=&s3sym_end1_3) 
 EVALUATE: symbol $_1_TOPPAR.S3SYM_END1_3 set to "" (string)
 CNSsolve>evaluate (&toppar.s3sym_end1_4=&s3sym_end1_4) 
 EVALUATE: symbol $_1_TOPPAR.S3SYM_END1_4 set to "" (string)
 CNSsolve>evaluate (&toppar.s3sym_end2_1=&s3sym_end2_1) 
 EVALUATE: symbol $_1_TOPPAR.S3SYM_END2_1 set to "" (string)
 CNSsolve>evaluate (&toppar.s3sym_end2_2=&s3sym_end2_2) 
 EVALUATE: symbol $_1_TOPPAR.S3SYM_END2_2 set to "" (string)
 CNSsolve>evaluate (&toppar.s3sym_end2_3=&s3sym_end2_3) 
 EVALUATE: symbol $_1_TOPPAR.S3SYM_END2_3 set to "" (string)
 CNSsolve>evaluate (&toppar.s3sym_end2_4=&s3sym_end2_4) 
 EVALUATE: symbol $_1_TOPPAR.S3SYM_END2_4 set to "" (string)
 CNSsolve>evaluate (&toppar.s3sym_end3_1=&s3sym_end3_1) 
 EVALUATE: symbol $_1_TOPPAR.S3SYM_END3_1 set to "" (string)
 CNSsolve>evaluate (&toppar.s3sym_end3_2=&s3sym_end3_2) 
 EVALUATE: symbol $_1_TOPPAR.S3SYM_END3_2 set to "" (string)
 CNSsolve>evaluate (&toppar.s3sym_end3_3=&s3sym_end3_3) 
 EVALUATE: symbol $_1_TOPPAR.S3SYM_END3_3 set to "" (string)
 CNSsolve>evaluate (&toppar.s3sym_end3_4=&s3sym_end3_4) 
 EVALUATE: symbol $_1_TOPPAR.S3SYM_END3_4 set to "" (string)
 CNSsolve>evaluate (&toppar.s3sym_seg1_1=&s3sym_seg1_1) 
 EVALUATE: symbol $_1_TOPPAR.S3SYM_SEG1_1 set to "" (string)
 CNSsolve>evaluate (&toppar.s3sym_seg1_2=&s3sym_seg1_2) 
 EVALUATE: symbol $_1_TOPPAR.S3SYM_SEG1_2 set to "" (string)
 CNSsolve>evaluate (&toppar.s3sym_seg1_3=&s3sym_seg1_3) 
 EVALUATE: symbol $_1_TOPPAR.S3SYM_SEG1_3 set to "" (string)
 CNSsolve>evaluate (&toppar.s3sym_seg1_4=&s3sym_seg1_4) 
 EVALUATE: symbol $_1_TOPPAR.S3SYM_SEG1_4 set to "" (string)
 CNSsolve>evaluate (&toppar.s3sym_seg2_1=&s3sym_seg2_1) 
 EVALUATE: symbol $_1_TOPPAR.S3SYM_SEG2_1 set to "" (string)
 CNSsolve>evaluate (&toppar.s3sym_seg2_2=&s3sym_seg2_2) 
 EVALUATE: symbol $_1_TOPPAR.S3SYM_SEG2_2 set to "" (string)
 CNSsolve>evaluate (&toppar.s3sym_seg2_3=&s3sym_seg2_3) 
 EVALUATE: symbol $_1_TOPPAR.S3SYM_SEG2_3 set to "" (string)
 CNSsolve>evaluate (&toppar.s3sym_seg2_4=&s3sym_seg2_4) 
 EVALUATE: symbol $_1_TOPPAR.S3SYM_SEG2_4 set to "" (string)
 CNSsolve>evaluate (&toppar.s3sym_seg3_1=&s3sym_seg3_1) 
 EVALUATE: symbol $_1_TOPPAR.S3SYM_SEG3_1 set to "" (string)
 CNSsolve>evaluate (&toppar.s3sym_seg3_2=&s3sym_seg3_2) 
 EVALUATE: symbol $_1_TOPPAR.S3SYM_SEG3_2 set to "" (string)
 CNSsolve>evaluate (&toppar.s3sym_seg3_3=&s3sym_seg3_3) 
 EVALUATE: symbol $_1_TOPPAR.S3SYM_SEG3_3 set to "" (string)
 CNSsolve>evaluate (&toppar.s3sym_seg3_4=&s3sym_seg3_4) 
 EVALUATE: symbol $_1_TOPPAR.S3SYM_SEG3_4 set to "" (string)
 CNSsolve>evaluate (&data.numc4sym=&numc4sym) 
 EVALUATE: symbol $_1_DATA.NUMC4SYM set to    0.00000     (real)
 CNSsolve>evaluate (&toppar.c4sym_sta1_1=&c4sym_sta1_1) 
 EVALUATE: symbol $_1_TOPPAR.C4SYM_STA1_1 set to "" (string)
 CNSsolve>evaluate (&toppar.c4sym_sta1_2=&c4sym_sta1_2) 
 EVALUATE: symbol $_1_TOPPAR.C4SYM_STA1_2 set to "" (string)
 CNSsolve>evaluate (&toppar.c4sym_sta2_1=&c4sym_sta2_1) 
 EVALUATE: symbol $_1_TOPPAR.C4SYM_STA2_1 set to "" (string)
 CNSsolve>evaluate (&toppar.c4sym_sta2_2=&c4sym_sta2_2) 
 EVALUATE: symbol $_1_TOPPAR.C4SYM_STA2_2 set to "" (string)
 CNSsolve>evaluate (&toppar.c4sym_sta3_1=&c4sym_sta3_1) 
 EVALUATE: symbol $_1_TOPPAR.C4SYM_STA3_1 set to "" (string)
 CNSsolve>evaluate (&toppar.c4sym_sta3_2=&c4sym_sta3_2) 
 EVALUATE: symbol $_1_TOPPAR.C4SYM_STA3_2 set to "" (string)
 CNSsolve>evaluate (&toppar.c4sym_sta4_1=&c4sym_sta4_1) 
 EVALUATE: symbol $_1_TOPPAR.C4SYM_STA4_1 set to "" (string)
 CNSsolve>evaluate (&toppar.c4sym_sta4_2=&c4sym_sta4_2) 
 EVALUATE: symbol $_1_TOPPAR.C4SYM_STA4_2 set to "" (string)
 CNSsolve>evaluate (&toppar.c4sym_end1_1=&c4sym_end1_1) 
 EVALUATE: symbol $_1_TOPPAR.C4SYM_END1_1 set to "" (string)
 CNSsolve>evaluate (&toppar.c4sym_end1_2=&c4sym_end1_2) 
 EVALUATE: symbol $_1_TOPPAR.C4SYM_END1_2 set to "" (string)
 CNSsolve>evaluate (&toppar.c4sym_end2_1=&c4sym_end2_1) 
 EVALUATE: symbol $_1_TOPPAR.C4SYM_END2_1 set to "" (string)
 CNSsolve>evaluate (&toppar.c4sym_end2_2=&c4sym_end2_2) 
 EVALUATE: symbol $_1_TOPPAR.C4SYM_END2_2 set to "" (string)
 CNSsolve>evaluate (&toppar.c4sym_end3_1=&c4sym_end3_1) 
 EVALUATE: symbol $_1_TOPPAR.C4SYM_END3_1 set to "" (string)
 CNSsolve>evaluate (&toppar.c4sym_end3_2=&c4sym_end3_2) 
 EVALUATE: symbol $_1_TOPPAR.C4SYM_END3_2 set to "" (string)
 CNSsolve>evaluate (&toppar.c4sym_end4_1=&c4sym_end4_1) 
 EVALUATE: symbol $_1_TOPPAR.C4SYM_END4_1 set to "" (string)
 CNSsolve>evaluate (&toppar.c4sym_end4_2=&c4sym_end4_2) 
 EVALUATE: symbol $_1_TOPPAR.C4SYM_END4_2 set to "" (string)
 CNSsolve>evaluate (&toppar.c4sym_seg1_1=&c4sym_seg1_1) 
 EVALUATE: symbol $_1_TOPPAR.C4SYM_SEG1_1 set to "" (string)
 CNSsolve>evaluate (&toppar.c4sym_seg1_2=&c4sym_seg1_2) 
 EVALUATE: symbol $_1_TOPPAR.C4SYM_SEG1_2 set to "" (string)
 CNSsolve>evaluate (&toppar.c4sym_seg2_1=&c4sym_seg2_1) 
 EVALUATE: symbol $_1_TOPPAR.C4SYM_SEG2_1 set to "" (string)
 CNSsolve>evaluate (&toppar.c4sym_seg2_2=&c4sym_seg2_2) 
 EVALUATE: symbol $_1_TOPPAR.C4SYM_SEG2_2 set to "" (string)
 CNSsolve>evaluate (&toppar.c4sym_seg3_1=&c4sym_seg3_1) 
 EVALUATE: symbol $_1_TOPPAR.C4SYM_SEG3_1 set to "" (string)
 CNSsolve>evaluate (&toppar.c4sym_seg3_2=&c4sym_seg3_2) 
 EVALUATE: symbol $_1_TOPPAR.C4SYM_SEG3_2 set to "" (string)
 CNSsolve>evaluate (&toppar.c4sym_seg4_1=&c4sym_seg4_1) 
 EVALUATE: symbol $_1_TOPPAR.C4SYM_SEG4_1 set to "" (string)
 CNSsolve>evaluate (&toppar.c4sym_seg3_2=&c4sym_seg4_2) 
 EVALUATE: symbol $_1_TOPPAR.C4SYM_SEG3_2 set to "" (string)
 CNSsolve>evaluate (&data.numc5sym=&numc5sym) 
 EVALUATE: symbol $_1_DATA.NUMC5SYM set to    0.00000     (real)
 CNSsolve>evaluate (&toppar.c5sym_sta1_1=&c5sym_sta1_1) 
 EVALUATE: symbol $_1_TOPPAR.C5SYM_STA1_1 set to "" (string)
 CNSsolve>evaluate (&toppar.c5sym_sta2_1=&c5sym_sta2_1) 
 EVALUATE: symbol $_1_TOPPAR.C5SYM_STA2_1 set to "" (string)
 CNSsolve>evaluate (&toppar.c5sym_sta3_1=&c5sym_sta3_1) 
 EVALUATE: symbol $_1_TOPPAR.C5SYM_STA3_1 set to "" (string)
 CNSsolve>evaluate (&toppar.c5sym_sta4_1=&c5sym_sta4_1) 
 EVALUATE: symbol $_1_TOPPAR.C5SYM_STA4_1 set to "" (string)
 CNSsolve>evaluate (&toppar.c5sym_sta5_1=&c5sym_sta5_1) 
 EVALUATE: symbol $_1_TOPPAR.C5SYM_STA5_1 set to "" (string)
 CNSsolve>evaluate (&toppar.c5sym_end1_1=&c5sym_end1_1) 
 EVALUATE: symbol $_1_TOPPAR.C5SYM_END1_1 set to "" (string)
 CNSsolve>evaluate (&toppar.c5sym_end2_1=&c5sym_end2_1) 
 EVALUATE: symbol $_1_TOPPAR.C5SYM_END2_1 set to "" (string)
 CNSsolve>evaluate (&toppar.c5sym_end3_1=&c5sym_end3_1) 
 EVALUATE: symbol $_1_TOPPAR.C5SYM_END3_1 set to "" (string)
 CNSsolve>evaluate (&toppar.c5sym_end4_1=&c5sym_end4_1) 
 EVALUATE: symbol $_1_TOPPAR.C5SYM_END4_1 set to "" (string)
 CNSsolve>evaluate (&toppar.c5sym_end5_1=&c5sym_end5_1) 
 EVALUATE: symbol $_1_TOPPAR.C5SYM_END5_1 set to "" (string)
 CNSsolve>evaluate (&toppar.c5sym_seg1_1=&c5sym_seg1_1) 
 EVALUATE: symbol $_1_TOPPAR.C5SYM_SEG1_1 set to "" (string)
 CNSsolve>evaluate (&toppar.c5sym_seg2_1=&c5sym_seg2_1) 
 EVALUATE: symbol $_1_TOPPAR.C5SYM_SEG2_1 set to "" (string)
 CNSsolve>evaluate (&toppar.c5sym_seg3_1=&c5sym_seg3_1) 
 EVALUATE: symbol $_1_TOPPAR.C5SYM_SEG3_1 set to "" (string)
 CNSsolve>evaluate (&toppar.c5sym_seg4_1=&c5sym_seg4_1) 
 EVALUATE: symbol $_1_TOPPAR.C5SYM_SEG4_1 set to "" (string)
 CNSsolve>evaluate (&toppar.c5sym_seg5_1=&c5sym_seg5_1) 
 EVALUATE: symbol $_1_TOPPAR.C5SYM_SEG5_1 set to "" (string)
 CNSsolve>if ( &data.numc2sym eq 6) then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate (&iterations.rotate180 = false) 
 CNSsolve>end if 
 CNSsolve>if ( &data.numc3sym ne 0) then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate (&iterations.rotate180 = false) 
 CNSsolve>end if 
 CNSsolve>if ( &data.numc4sym ne 0) then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate (&iterations.rotate180 = false) 
 CNSsolve>end if 
 CNSsolve>if ( &data.numc5sym ne 0) then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate (&iterations.rotate180 = false) 
 CNSsolve>end if 
 CNSsolve>evaluate (&toppar.xplortodiana=&xplortodiana) 
 EVALUATE: symbol $_1_TOPPAR.XPLORTODIANA set to FALSE (logical)
 CNSsolve>evaluate (&toppar.delenph=&delenph) 
 EVALUATE: symbol $_1_TOPPAR.DELENPH set to TRUE (logical)
 CNSsolve>evaluate (&toppar.nhisd=&numhisd) 
 EVALUATE: symbol $_1_TOPPAR.NHISD set to    10.0000     (real)
 CNSsolve>evaluate (&toppar.nhise=&numhise) 
 EVALUATE: symbol $_1_TOPPAR.NHISE set to    10.0000     (real)
 CNSsolve>evaluate ($ncc=1) 
 EVALUATE: symbol $NCC set to    1.00000     (real)
 CNSsolve>while ($ncc <= &numhisd) loop hisd 
 NEXTCD: condition evaluated as true
 CNSsolve>  evaluate (&toppar.hisd_resid_1_$ncc=&A_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_1_1 set to    78.0000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_2_$ncc=&B_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_2_1 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_3_$ncc=&C_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_3_1 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_4_$ncc=&D_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_4_1 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_5_$ncc=&E_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_5_1 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_6_$ncc=&F_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_6_1 set to    0.00000     (real)
 CNSsolve>  evaluate ($ncc = $ncc + 1) 
 EVALUATE: symbol $NCC set to    2.00000     (real)
 CNSsolve>end loop hisd 
 CNSsolve>while ($ncc <= &numhisd) loop hisd 
 NEXTCD: condition evaluated as true
 CNSsolve>  evaluate (&toppar.hisd_resid_1_$ncc=&A_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_1_2 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_2_$ncc=&B_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_2_2 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_3_$ncc=&C_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_3_2 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_4_$ncc=&D_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_4_2 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_5_$ncc=&E_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_5_2 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_6_$ncc=&F_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_6_2 set to    0.00000     (real)
 CNSsolve>  evaluate ($ncc = $ncc + 1) 
 EVALUATE: symbol $NCC set to    3.00000     (real)
 CNSsolve>end loop hisd 
 CNSsolve>while ($ncc <= &numhisd) loop hisd 
 NEXTCD: condition evaluated as true
 CNSsolve>  evaluate (&toppar.hisd_resid_1_$ncc=&A_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_1_3 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_2_$ncc=&B_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_2_3 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_3_$ncc=&C_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_3_3 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_4_$ncc=&D_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_4_3 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_5_$ncc=&E_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_5_3 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_6_$ncc=&F_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_6_3 set to    0.00000     (real)
 CNSsolve>  evaluate ($ncc = $ncc + 1) 
 EVALUATE: symbol $NCC set to    4.00000     (real)
 CNSsolve>end loop hisd 
 CNSsolve>while ($ncc <= &numhisd) loop hisd 
 NEXTCD: condition evaluated as true
 CNSsolve>  evaluate (&toppar.hisd_resid_1_$ncc=&A_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_1_4 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_2_$ncc=&B_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_2_4 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_3_$ncc=&C_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_3_4 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_4_$ncc=&D_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_4_4 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_5_$ncc=&E_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_5_4 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_6_$ncc=&F_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_6_4 set to    0.00000     (real)
 CNSsolve>  evaluate ($ncc = $ncc + 1) 
 EVALUATE: symbol $NCC set to    5.00000     (real)
 CNSsolve>end loop hisd 
 CNSsolve>while ($ncc <= &numhisd) loop hisd 
 NEXTCD: condition evaluated as true
 CNSsolve>  evaluate (&toppar.hisd_resid_1_$ncc=&A_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_1_5 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_2_$ncc=&B_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_2_5 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_3_$ncc=&C_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_3_5 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_4_$ncc=&D_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_4_5 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_5_$ncc=&E_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_5_5 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_6_$ncc=&F_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_6_5 set to    0.00000     (real)
 CNSsolve>  evaluate ($ncc = $ncc + 1) 
 EVALUATE: symbol $NCC set to    6.00000     (real)
 CNSsolve>end loop hisd 
 CNSsolve>while ($ncc <= &numhisd) loop hisd 
 NEXTCD: condition evaluated as true
 CNSsolve>  evaluate (&toppar.hisd_resid_1_$ncc=&A_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_1_6 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_2_$ncc=&B_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_2_6 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_3_$ncc=&C_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_3_6 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_4_$ncc=&D_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_4_6 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_5_$ncc=&E_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_5_6 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_6_$ncc=&F_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_6_6 set to    0.00000     (real)
 CNSsolve>  evaluate ($ncc = $ncc + 1) 
 EVALUATE: symbol $NCC set to    7.00000     (real)
 CNSsolve>end loop hisd 
 CNSsolve>while ($ncc <= &numhisd) loop hisd 
 NEXTCD: condition evaluated as true
 CNSsolve>  evaluate (&toppar.hisd_resid_1_$ncc=&A_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_1_7 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_2_$ncc=&B_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_2_7 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_3_$ncc=&C_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_3_7 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_4_$ncc=&D_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_4_7 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_5_$ncc=&E_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_5_7 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_6_$ncc=&F_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_6_7 set to    0.00000     (real)
 CNSsolve>  evaluate ($ncc = $ncc + 1) 
 EVALUATE: symbol $NCC set to    8.00000     (real)
 CNSsolve>end loop hisd 
 CNSsolve>while ($ncc <= &numhisd) loop hisd 
 NEXTCD: condition evaluated as true
 CNSsolve>  evaluate (&toppar.hisd_resid_1_$ncc=&A_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_1_8 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_2_$ncc=&B_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_2_8 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_3_$ncc=&C_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_3_8 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_4_$ncc=&D_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_4_8 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_5_$ncc=&E_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_5_8 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_6_$ncc=&F_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_6_8 set to    0.00000     (real)
 CNSsolve>  evaluate ($ncc = $ncc + 1) 
 EVALUATE: symbol $NCC set to    9.00000     (real)
 CNSsolve>end loop hisd 
 CNSsolve>while ($ncc <= &numhisd) loop hisd 
 NEXTCD: condition evaluated as true
 CNSsolve>  evaluate (&toppar.hisd_resid_1_$ncc=&A_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_1_9 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_2_$ncc=&B_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_2_9 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_3_$ncc=&C_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_3_9 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_4_$ncc=&D_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_4_9 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_5_$ncc=&E_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_5_9 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_6_$ncc=&F_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_6_9 set to    0.00000     (real)
 CNSsolve>  evaluate ($ncc = $ncc + 1) 
 EVALUATE: symbol $NCC set to    10.0000     (real)
 CNSsolve>end loop hisd 
 CNSsolve>while ($ncc <= &numhisd) loop hisd 
 NEXTCD: condition evaluated as true
 CNSsolve>  evaluate (&toppar.hisd_resid_1_$ncc=&A_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_1_10 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_2_$ncc=&B_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_2_10 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_3_$ncc=&C_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_3_10 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_4_$ncc=&D_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_4_10 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_5_$ncc=&E_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_5_10 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hisd_resid_6_$ncc=&F_hisd_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISD_RESID_6_10 set to    0.00000     (real)
 CNSsolve>  evaluate ($ncc = $ncc + 1) 
 EVALUATE: symbol $NCC set to    11.0000     (real)
 CNSsolve>end loop hisd 
 CNSsolve>while ($ncc <= &numhisd) loop hisd 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate (&toppar.hisd_resid_1_$ncc=&A_hisd_resid_$ncc) 
 CNSsolve>  evaluate (&toppar.hisd_resid_2_$ncc=&B_hisd_resid_$ncc) 
 CNSsolve>  evaluate (&toppar.hisd_resid_3_$ncc=&C_hisd_resid_$ncc) 
 CNSsolve>  evaluate (&toppar.hisd_resid_4_$ncc=&D_hisd_resid_$ncc) 
 CNSsolve>  evaluate (&toppar.hisd_resid_5_$ncc=&E_hisd_resid_$ncc) 
 CNSsolve>  evaluate (&toppar.hisd_resid_6_$ncc=&F_hisd_resid_$ncc) 
 CNSsolve>  evaluate ($ncc = $ncc + 1) 
 CNSsolve>end loop hisd 
 CNSsolve>evaluate ($ncc=1) 
 EVALUATE: symbol $NCC set to    1.00000     (real)
 CNSsolve>while ($ncc <= &numhise) loop hise 
 NEXTCD: condition evaluated as true
 CNSsolve>  evaluate (&toppar.hise_resid_1_$ncc=&A_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_1_1 set to    193.000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_2_$ncc=&B_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_2_1 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_3_$ncc=&C_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_3_1 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_4_$ncc=&D_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_4_1 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_5_$ncc=&E_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_5_1 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_6_$ncc=&F_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_6_1 set to    0.00000     (real)
 CNSsolve>  evaluate ($ncc = $ncc + 1) 
 EVALUATE: symbol $NCC set to    2.00000     (real)
 CNSsolve>end loop hise 
 CNSsolve>while ($ncc <= &numhise) loop hise 
 NEXTCD: condition evaluated as true
 CNSsolve>  evaluate (&toppar.hise_resid_1_$ncc=&A_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_1_2 set to    198.000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_2_$ncc=&B_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_2_2 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_3_$ncc=&C_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_3_2 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_4_$ncc=&D_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_4_2 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_5_$ncc=&E_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_5_2 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_6_$ncc=&F_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_6_2 set to    0.00000     (real)
 CNSsolve>  evaluate ($ncc = $ncc + 1) 
 EVALUATE: symbol $NCC set to    3.00000     (real)
 CNSsolve>end loop hise 
 CNSsolve>while ($ncc <= &numhise) loop hise 
 NEXTCD: condition evaluated as true
 CNSsolve>  evaluate (&toppar.hise_resid_1_$ncc=&A_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_1_3 set to    140.000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_2_$ncc=&B_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_2_3 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_3_$ncc=&C_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_3_3 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_4_$ncc=&D_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_4_3 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_5_$ncc=&E_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_5_3 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_6_$ncc=&F_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_6_3 set to    0.00000     (real)
 CNSsolve>  evaluate ($ncc = $ncc + 1) 
 EVALUATE: symbol $NCC set to    4.00000     (real)
 CNSsolve>end loop hise 
 CNSsolve>while ($ncc <= &numhise) loop hise 
 NEXTCD: condition evaluated as true
 CNSsolve>  evaluate (&toppar.hise_resid_1_$ncc=&A_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_1_4 set to    110.000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_2_$ncc=&B_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_2_4 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_3_$ncc=&C_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_3_4 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_4_$ncc=&D_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_4_4 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_5_$ncc=&E_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_5_4 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_6_$ncc=&F_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_6_4 set to    0.00000     (real)
 CNSsolve>  evaluate ($ncc = $ncc + 1) 
 EVALUATE: symbol $NCC set to    5.00000     (real)
 CNSsolve>end loop hise 
 CNSsolve>while ($ncc <= &numhise) loop hise 
 NEXTCD: condition evaluated as true
 CNSsolve>  evaluate (&toppar.hise_resid_1_$ncc=&A_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_1_5 set to    155.000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_2_$ncc=&B_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_2_5 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_3_$ncc=&C_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_3_5 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_4_$ncc=&D_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_4_5 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_5_$ncc=&E_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_5_5 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_6_$ncc=&F_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_6_5 set to    0.00000     (real)
 CNSsolve>  evaluate ($ncc = $ncc + 1) 
 EVALUATE: symbol $NCC set to    6.00000     (real)
 CNSsolve>end loop hise 
 CNSsolve>while ($ncc <= &numhise) loop hise 
 NEXTCD: condition evaluated as true
 CNSsolve>  evaluate (&toppar.hise_resid_1_$ncc=&A_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_1_6 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_2_$ncc=&B_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_2_6 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_3_$ncc=&C_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_3_6 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_4_$ncc=&D_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_4_6 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_5_$ncc=&E_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_5_6 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_6_$ncc=&F_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_6_6 set to    0.00000     (real)
 CNSsolve>  evaluate ($ncc = $ncc + 1) 
 EVALUATE: symbol $NCC set to    7.00000     (real)
 CNSsolve>end loop hise 
 CNSsolve>while ($ncc <= &numhise) loop hise 
 NEXTCD: condition evaluated as true
 CNSsolve>  evaluate (&toppar.hise_resid_1_$ncc=&A_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_1_7 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_2_$ncc=&B_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_2_7 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_3_$ncc=&C_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_3_7 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_4_$ncc=&D_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_4_7 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_5_$ncc=&E_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_5_7 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_6_$ncc=&F_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_6_7 set to    0.00000     (real)
 CNSsolve>  evaluate ($ncc = $ncc + 1) 
 EVALUATE: symbol $NCC set to    8.00000     (real)
 CNSsolve>end loop hise 
 CNSsolve>while ($ncc <= &numhise) loop hise 
 NEXTCD: condition evaluated as true
 CNSsolve>  evaluate (&toppar.hise_resid_1_$ncc=&A_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_1_8 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_2_$ncc=&B_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_2_8 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_3_$ncc=&C_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_3_8 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_4_$ncc=&D_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_4_8 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_5_$ncc=&E_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_5_8 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_6_$ncc=&F_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_6_8 set to    0.00000     (real)
 CNSsolve>  evaluate ($ncc = $ncc + 1) 
 EVALUATE: symbol $NCC set to    9.00000     (real)
 CNSsolve>end loop hise 
 CNSsolve>while ($ncc <= &numhise) loop hise 
 NEXTCD: condition evaluated as true
 CNSsolve>  evaluate (&toppar.hise_resid_1_$ncc=&A_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_1_9 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_2_$ncc=&B_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_2_9 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_3_$ncc=&C_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_3_9 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_4_$ncc=&D_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_4_9 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_5_$ncc=&E_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_5_9 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_6_$ncc=&F_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_6_9 set to    0.00000     (real)
 CNSsolve>  evaluate ($ncc = $ncc + 1) 
 EVALUATE: symbol $NCC set to    10.0000     (real)
 CNSsolve>end loop hise 
 CNSsolve>while ($ncc <= &numhise) loop hise 
 NEXTCD: condition evaluated as true
 CNSsolve>  evaluate (&toppar.hise_resid_1_$ncc=&A_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_1_10 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_2_$ncc=&B_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_2_10 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_3_$ncc=&C_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_3_10 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_4_$ncc=&D_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_4_10 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_5_$ncc=&E_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_5_10 set to    0.00000     (real)
 CNSsolve>  evaluate (&toppar.hise_resid_6_$ncc=&F_hise_resid_$ncc) 
 EVALUATE: symbol $_1_TOPPAR.HISE_RESID_6_10 set to    0.00000     (real)
 CNSsolve>  evaluate ($ncc = $ncc + 1) 
 EVALUATE: symbol $NCC set to    11.0000     (real)
 CNSsolve>end loop hise 
 CNSsolve>while ($ncc <= &numhise) loop hise 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate (&toppar.hise_resid_1_$ncc=&A_hise_resid_$ncc) 
 CNSsolve>  evaluate (&toppar.hise_resid_2_$ncc=&B_hise_resid_$ncc) 
 CNSsolve>  evaluate (&toppar.hise_resid_3_$ncc=&C_hise_resid_$ncc) 
 CNSsolve>  evaluate (&toppar.hise_resid_4_$ncc=&D_hise_resid_$ncc) 
 CNSsolve>  evaluate (&toppar.hise_resid_5_$ncc=&E_hise_resid_$ncc) 
 CNSsolve>  evaluate (&toppar.hise_resid_6_$ncc=&F_hise_resid_$ncc) 
 CNSsolve>  evaluate ($ncc = $ncc + 1) 
 CNSsolve>end loop hise 
 CNSsolve>!Electrostatics: 
 CNSsolve>evaluate (&Data.flags.dihed = &dihedflag) 
 EVALUATE: symbol $_1_DATA.FLAGS.DIHED set to TRUE (logical)
 CNSsolve>evaluate (&Data.flags.elec0 = &elecflag_0) 
 EVALUATE: symbol $_1_DATA.FLAGS.ELEC0 set to TRUE (logical)
 CNSsolve>evaluate (&Data.flags.elec1 = &elecflag_1) 
 EVALUATE: symbol $_1_DATA.FLAGS.ELEC1 set to TRUE (logical)
 CNSsolve>evaluate (&Data.epsilon = &epsilon) 
 EVALUATE: symbol $_1_DATA.EPSILON set to    10.0000     (real)
 CNSsolve>evaluate (&Data.dielec  = &dielec) 
 Assuming literal string "CDIE"
 EVALUATE: symbol $_1_DATA.DIELEC set to "CDIE" (string)
 CNSsolve>!Interaction matrix: 
 CNSsolve>evaluate ($nmol1=1) 
 EVALUATE: symbol $NMOL1 set to    1.00000     (real)
 CNSsolve>while ($nmol1 <= 6) loop mol1 
 NEXTCD: condition evaluated as true
 CNSsolve>  evaluate ($nmol2=$nmol1 + 1) 
 EVALUATE: symbol $NMOL2 set to    2.00000     (real)
 CNSsolve>  evaluate (&toppar.int_$nmol1_$nmol1 = &int_$nmol1_$nmol1) 
 EVALUATE: symbol $_1_TOPPAR.INT_1_1 set to    1.00000     (real)
 CNSsolve>  while ($nmol2 <= 6) loop mol2 
 NEXTCD: condition evaluated as true
 CNSsolve>    evaluate (&toppar.int_$nmol1_$nmol2 = &int_$nmol1_$nmol2) 
 EVALUATE: symbol $_1_TOPPAR.INT_1_2 set to    1.00000     (real)
 CNSsolve>    evaluate (&toppar.int_$nmol2_$nmol1 = &int_$nmol1_$nmol2) 
 EVALUATE: symbol $_1_TOPPAR.INT_2_1 set to    1.00000     (real)
 CNSsolve>    evaluate ($nmol2=$nmol2 + 1) 
 EVALUATE: symbol $NMOL2 set to    3.00000     (real)
 CNSsolve>  end loop mol2 
 CNSsolve>  while ($nmol2 <= 6) loop mol2 
 NEXTCD: condition evaluated as true
 CNSsolve>    evaluate (&toppar.int_$nmol1_$nmol2 = &int_$nmol1_$nmol2) 
 EVALUATE: symbol $_1_TOPPAR.INT_1_3 set to    1.00000     (real)
 CNSsolve>    evaluate (&toppar.int_$nmol2_$nmol1 = &int_$nmol1_$nmol2) 
 EVALUATE: symbol $_1_TOPPAR.INT_3_1 set to    1.00000     (real)
 CNSsolve>    evaluate ($nmol2=$nmol2 + 1) 
 EVALUATE: symbol $NMOL2 set to    4.00000     (real)
 CNSsolve>  end loop mol2 
 CNSsolve>  while ($nmol2 <= 6) loop mol2 
 NEXTCD: condition evaluated as true
 CNSsolve>    evaluate (&toppar.int_$nmol1_$nmol2 = &int_$nmol1_$nmol2) 
 EVALUATE: symbol $_1_TOPPAR.INT_1_4 set to    1.00000     (real)
 CNSsolve>    evaluate (&toppar.int_$nmol2_$nmol1 = &int_$nmol1_$nmol2) 
 EVALUATE: symbol $_1_TOPPAR.INT_4_1 set to    1.00000     (real)
 CNSsolve>    evaluate ($nmol2=$nmol2 + 1) 
 EVALUATE: symbol $NMOL2 set to    5.00000     (real)
 CNSsolve>  end loop mol2 
 CNSsolve>  while ($nmol2 <= 6) loop mol2 
 NEXTCD: condition evaluated as true
 CNSsolve>    evaluate (&toppar.int_$nmol1_$nmol2 = &int_$nmol1_$nmol2) 
 EVALUATE: symbol $_1_TOPPAR.INT_1_5 set to    1.00000     (real)
 CNSsolve>    evaluate (&toppar.int_$nmol2_$nmol1 = &int_$nmol1_$nmol2) 
 EVALUATE: symbol $_1_TOPPAR.INT_5_1 set to    1.00000     (real)
 CNSsolve>    evaluate ($nmol2=$nmol2 + 1) 
 EVALUATE: symbol $NMOL2 set to    6.00000     (real)
 CNSsolve>  end loop mol2 
 CNSsolve>  while ($nmol2 <= 6) loop mol2 
 NEXTCD: condition evaluated as true
 CNSsolve>    evaluate (&toppar.int_$nmol1_$nmol2 = &int_$nmol1_$nmol2) 
 EVALUATE: symbol $_1_TOPPAR.INT_1_6 set to    1.00000     (real)
 CNSsolve>    evaluate (&toppar.int_$nmol2_$nmol1 = &int_$nmol1_$nmol2) 
 EVALUATE: symbol $_1_TOPPAR.INT_6_1 set to    1.00000     (real)
 CNSsolve>    evaluate ($nmol2=$nmol2 + 1) 
 EVALUATE: symbol $NMOL2 set to    7.00000     (real)
 CNSsolve>  end loop mol2 
 CNSsolve>  while ($nmol2 <= 6) loop mol2 
 NEXTCD: condition evaluated as false
 CNSsolve>    evaluate (&toppar.int_$nmol1_$nmol2 = &int_$nmol1_$nmol2) 
 CNSsolve>    evaluate (&toppar.int_$nmol2_$nmol1 = &int_$nmol1_$nmol2) 
 CNSsolve>    evaluate ($nmol2=$nmol2 + 1) 
 CNSsolve>  end loop mol2 
 CNSsolve>  evaluate ($nmol1 = $nmol1 + 1) 
 EVALUATE: symbol $NMOL1 set to    2.00000     (real)
 CNSsolve>end loop mol1 
 CNSsolve>while ($nmol1 <= 6) loop mol1 
 NEXTCD: condition evaluated as true
 CNSsolve>  evaluate ($nmol2=$nmol1 + 1) 
 EVALUATE: symbol $NMOL2 set to    3.00000     (real)
 CNSsolve>  evaluate (&toppar.int_$nmol1_$nmol1 = &int_$nmol1_$nmol1) 
 EVALUATE: symbol $_1_TOPPAR.INT_2_2 set to    1.00000     (real)
 CNSsolve>  while ($nmol2 <= 6) loop mol2 
 NEXTCD: condition evaluated as true
 CNSsolve>    evaluate (&toppar.int_$nmol1_$nmol2 = &int_$nmol1_$nmol2) 
 EVALUATE: symbol $_1_TOPPAR.INT_2_3 set to    1.00000     (real)
 CNSsolve>    evaluate (&toppar.int_$nmol2_$nmol1 = &int_$nmol1_$nmol2) 
 EVALUATE: symbol $_1_TOPPAR.INT_3_2 set to    1.00000     (real)
 CNSsolve>    evaluate ($nmol2=$nmol2 + 1) 
 EVALUATE: symbol $NMOL2 set to    4.00000     (real)
 CNSsolve>  end loop mol2 
 CNSsolve>  while ($nmol2 <= 6) loop mol2 
 NEXTCD: condition evaluated as true
 CNSsolve>    evaluate (&toppar.int_$nmol1_$nmol2 = &int_$nmol1_$nmol2) 
 EVALUATE: symbol $_1_TOPPAR.INT_2_4 set to    1.00000     (real)
 CNSsolve>    evaluate (&toppar.int_$nmol2_$nmol1 = &int_$nmol1_$nmol2) 
 EVALUATE: symbol $_1_TOPPAR.INT_4_2 set to    1.00000     (real)
 CNSsolve>    evaluate ($nmol2=$nmol2 + 1) 
 EVALUATE: symbol $NMOL2 set to    5.00000     (real)
 CNSsolve>  end loop mol2 
 CNSsolve>  while ($nmol2 <= 6) loop mol2 
 NEXTCD: condition evaluated as true
 CNSsolve>    evaluate (&toppar.int_$nmol1_$nmol2 = &int_$nmol1_$nmol2) 
 EVALUATE: symbol $_1_TOPPAR.INT_2_5 set to    1.00000     (real)
 CNSsolve>    evaluate (&toppar.int_$nmol2_$nmol1 = &int_$nmol1_$nmol2) 
 EVALUATE: symbol $_1_TOPPAR.INT_5_2 set to    1.00000     (real)
 CNSsolve>    evaluate ($nmol2=$nmol2 + 1) 
 EVALUATE: symbol $NMOL2 set to    6.00000     (real)
 CNSsolve>  end loop mol2 
 CNSsolve>  while ($nmol2 <= 6) loop mol2 
 NEXTCD: condition evaluated as true
 CNSsolve>    evaluate (&toppar.int_$nmol1_$nmol2 = &int_$nmol1_$nmol2) 
 EVALUATE: symbol $_1_TOPPAR.INT_2_6 set to    1.00000     (real)
 CNSsolve>    evaluate (&toppar.int_$nmol2_$nmol1 = &int_$nmol1_$nmol2) 
 EVALUATE: symbol $_1_TOPPAR.INT_6_2 set to    1.00000     (real)
 CNSsolve>    evaluate ($nmol2=$nmol2 + 1) 
 EVALUATE: symbol $NMOL2 set to    7.00000     (real)
 CNSsolve>  end loop mol2 
 CNSsolve>  while ($nmol2 <= 6) loop mol2 
 NEXTCD: condition evaluated as false
 CNSsolve>    evaluate (&toppar.int_$nmol1_$nmol2 = &int_$nmol1_$nmol2) 
 CNSsolve>    evaluate (&toppar.int_$nmol2_$nmol1 = &int_$nmol1_$nmol2) 
 CNSsolve>    evaluate ($nmol2=$nmol2 + 1) 
 CNSsolve>  end loop mol2 
 CNSsolve>  evaluate ($nmol1 = $nmol1 + 1) 
 EVALUATE: symbol $NMOL1 set to    3.00000     (real)
 CNSsolve>end loop mol1 
 CNSsolve>while ($nmol1 <= 6) loop mol1 
 NEXTCD: condition evaluated as true
 CNSsolve>  evaluate ($nmol2=$nmol1 + 1) 
 EVALUATE: symbol $NMOL2 set to    4.00000     (real)
 CNSsolve>  evaluate (&toppar.int_$nmol1_$nmol1 = &int_$nmol1_$nmol1) 
 EVALUATE: symbol $_1_TOPPAR.INT_3_3 set to    1.00000     (real)
 CNSsolve>  while ($nmol2 <= 6) loop mol2 
 NEXTCD: condition evaluated as true
 CNSsolve>    evaluate (&toppar.int_$nmol1_$nmol2 = &int_$nmol1_$nmol2) 
 EVALUATE: symbol $_1_TOPPAR.INT_3_4 set to    1.00000     (real)
 CNSsolve>    evaluate (&toppar.int_$nmol2_$nmol1 = &int_$nmol1_$nmol2) 
 EVALUATE: symbol $_1_TOPPAR.INT_4_3 set to    1.00000     (real)
 CNSsolve>    evaluate ($nmol2=$nmol2 + 1) 
 EVALUATE: symbol $NMOL2 set to    5.00000     (real)
 CNSsolve>  end loop mol2 
 CNSsolve>  while ($nmol2 <= 6) loop mol2 
 NEXTCD: condition evaluated as true
 CNSsolve>    evaluate (&toppar.int_$nmol1_$nmol2 = &int_$nmol1_$nmol2) 
 EVALUATE: symbol $_1_TOPPAR.INT_3_5 set to    1.00000     (real)
 CNSsolve>    evaluate (&toppar.int_$nmol2_$nmol1 = &int_$nmol1_$nmol2) 
 EVALUATE: symbol $_1_TOPPAR.INT_5_3 set to    1.00000     (real)
 CNSsolve>    evaluate ($nmol2=$nmol2 + 1) 
 EVALUATE: symbol $NMOL2 set to    6.00000     (real)
 CNSsolve>  end loop mol2 
 CNSsolve>  while ($nmol2 <= 6) loop mol2 
 NEXTCD: condition evaluated as true
 CNSsolve>    evaluate (&toppar.int_$nmol1_$nmol2 = &int_$nmol1_$nmol2) 
 EVALUATE: symbol $_1_TOPPAR.INT_3_6 set to    1.00000     (real)
 CNSsolve>    evaluate (&toppar.int_$nmol2_$nmol1 = &int_$nmol1_$nmol2) 
 EVALUATE: symbol $_1_TOPPAR.INT_6_3 set to    1.00000     (real)
 CNSsolve>    evaluate ($nmol2=$nmol2 + 1) 
 EVALUATE: symbol $NMOL2 set to    7.00000     (real)
 CNSsolve>  end loop mol2 
 CNSsolve>  while ($nmol2 <= 6) loop mol2 
 NEXTCD: condition evaluated as false
 CNSsolve>    evaluate (&toppar.int_$nmol1_$nmol2 = &int_$nmol1_$nmol2) 
 CNSsolve>    evaluate (&toppar.int_$nmol2_$nmol1 = &int_$nmol1_$nmol2) 
 CNSsolve>    evaluate ($nmol2=$nmol2 + 1) 
 CNSsolve>  end loop mol2 
 CNSsolve>  evaluate ($nmol1 = $nmol1 + 1) 
 EVALUATE: symbol $NMOL1 set to    4.00000     (real)
 CNSsolve>end loop mol1 
 CNSsolve>while ($nmol1 <= 6) loop mol1 
 NEXTCD: condition evaluated as true
 CNSsolve>  evaluate ($nmol2=$nmol1 + 1) 
 EVALUATE: symbol $NMOL2 set to    5.00000     (real)
 CNSsolve>  evaluate (&toppar.int_$nmol1_$nmol1 = &int_$nmol1_$nmol1) 
 EVALUATE: symbol $_1_TOPPAR.INT_4_4 set to    1.00000     (real)
 CNSsolve>  while ($nmol2 <= 6) loop mol2 
 NEXTCD: condition evaluated as true
 CNSsolve>    evaluate (&toppar.int_$nmol1_$nmol2 = &int_$nmol1_$nmol2) 
 EVALUATE: symbol $_1_TOPPAR.INT_4_5 set to    1.00000     (real)
 CNSsolve>    evaluate (&toppar.int_$nmol2_$nmol1 = &int_$nmol1_$nmol2) 
 EVALUATE: symbol $_1_TOPPAR.INT_5_4 set to    1.00000     (real)
 CNSsolve>    evaluate ($nmol2=$nmol2 + 1) 
 EVALUATE: symbol $NMOL2 set to    6.00000     (real)
 CNSsolve>  end loop mol2 
 CNSsolve>  while ($nmol2 <= 6) loop mol2 
 NEXTCD: condition evaluated as true
 CNSsolve>    evaluate (&toppar.int_$nmol1_$nmol2 = &int_$nmol1_$nmol2) 
 EVALUATE: symbol $_1_TOPPAR.INT_4_6 set to    1.00000     (real)
 CNSsolve>    evaluate (&toppar.int_$nmol2_$nmol1 = &int_$nmol1_$nmol2) 
 EVALUATE: symbol $_1_TOPPAR.INT_6_4 set to    1.00000     (real)
 CNSsolve>    evaluate ($nmol2=$nmol2 + 1) 
 EVALUATE: symbol $NMOL2 set to    7.00000     (real)
 CNSsolve>  end loop mol2 
 CNSsolve>  while ($nmol2 <= 6) loop mol2 
 NEXTCD: condition evaluated as false
 CNSsolve>    evaluate (&toppar.int_$nmol1_$nmol2 = &int_$nmol1_$nmol2) 
 CNSsolve>    evaluate (&toppar.int_$nmol2_$nmol1 = &int_$nmol1_$nmol2) 
 CNSsolve>    evaluate ($nmol2=$nmol2 + 1) 
 CNSsolve>  end loop mol2 
 CNSsolve>  evaluate ($nmol1 = $nmol1 + 1) 
 EVALUATE: symbol $NMOL1 set to    5.00000     (real)
 CNSsolve>end loop mol1 
 CNSsolve>while ($nmol1 <= 6) loop mol1 
 NEXTCD: condition evaluated as true
 CNSsolve>  evaluate ($nmol2=$nmol1 + 1) 
 EVALUATE: symbol $NMOL2 set to    6.00000     (real)
 CNSsolve>  evaluate (&toppar.int_$nmol1_$nmol1 = &int_$nmol1_$nmol1) 
 EVALUATE: symbol $_1_TOPPAR.INT_5_5 set to    1.00000     (real)
 CNSsolve>  while ($nmol2 <= 6) loop mol2 
 NEXTCD: condition evaluated as true
 CNSsolve>    evaluate (&toppar.int_$nmol1_$nmol2 = &int_$nmol1_$nmol2) 
 EVALUATE: symbol $_1_TOPPAR.INT_5_6 set to    1.00000     (real)
 CNSsolve>    evaluate (&toppar.int_$nmol2_$nmol1 = &int_$nmol1_$nmol2) 
 EVALUATE: symbol $_1_TOPPAR.INT_6_5 set to    1.00000     (real)
 CNSsolve>    evaluate ($nmol2=$nmol2 + 1) 
 EVALUATE: symbol $NMOL2 set to    7.00000     (real)
 CNSsolve>  end loop mol2 
 CNSsolve>  while ($nmol2 <= 6) loop mol2 
 NEXTCD: condition evaluated as false
 CNSsolve>    evaluate (&toppar.int_$nmol1_$nmol2 = &int_$nmol1_$nmol2) 
 CNSsolve>    evaluate (&toppar.int_$nmol2_$nmol1 = &int_$nmol1_$nmol2) 
 CNSsolve>    evaluate ($nmol2=$nmol2 + 1) 
 CNSsolve>  end loop mol2 
 CNSsolve>  evaluate ($nmol1 = $nmol1 + 1) 
 EVALUATE: symbol $NMOL1 set to    6.00000     (real)
 CNSsolve>end loop mol1 
 CNSsolve>while ($nmol1 <= 6) loop mol1 
 NEXTCD: condition evaluated as true
 CNSsolve>  evaluate ($nmol2=$nmol1 + 1) 
 EVALUATE: symbol $NMOL2 set to    7.00000     (real)
 CNSsolve>  evaluate (&toppar.int_$nmol1_$nmol1 = &int_$nmol1_$nmol1) 
 EVALUATE: symbol $_1_TOPPAR.INT_6_6 set to    1.00000     (real)
 CNSsolve>  while ($nmol2 <= 6) loop mol2 
 NEXTCD: condition evaluated as false
 CNSsolve>    evaluate (&toppar.int_$nmol1_$nmol2 = &int_$nmol1_$nmol2) 
 CNSsolve>    evaluate (&toppar.int_$nmol2_$nmol1 = &int_$nmol1_$nmol2) 
 CNSsolve>    evaluate ($nmol2=$nmol2 + 1) 
 CNSsolve>  end loop mol2 
 CNSsolve>  evaluate ($nmol1 = $nmol1 + 1) 
 EVALUATE: symbol $NMOL1 set to    7.00000     (real)
 CNSsolve>end loop mol1 
 CNSsolve>while ($nmol1 <= 6) loop mol1 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($nmol2=$nmol1 + 1) 
 CNSsolve>  evaluate (&toppar.int_$nmol1_$nmol1 = &int_$nmol1_$nmol1) 
 CNSsolve>  while ($nmol2 <= 6) loop mol2 
 CNSsolve>    evaluate (&toppar.int_$nmol1_$nmol2 = &int_$nmol1_$nmol2) 
 CNSsolve>    evaluate (&toppar.int_$nmol2_$nmol1 = &int_$nmol1_$nmol2) 
 CNSsolve>    evaluate ($nmol2=$nmol2 + 1) 
 CNSsolve>  end loop mol2 
 CNSsolve>  evaluate ($nmol1 = $nmol1 + 1) 
 CNSsolve>end loop mol1 
 CNSsolve>!Dihedrals, Jcouplings, Residual dipolar couplints, Hbonds, Analysis: 
 CNSsolve>evaluate (&Data.dnarest = &dnarest_on) 
 EVALUATE: symbol $_1_DATA.DNAREST set to FALSE (logical)
 CNSsolve>evaluate (&Data.flags.noe  =  true) 
 EVALUATE: symbol $_1_DATA.FLAGS.NOE set to TRUE (logical)
 CNSsolve>evaluate (&Data.flags.cdih =  &dihedrals_on) 
 EVALUATE: symbol $_1_DATA.FLAGS.CDIH set to FALSE (logical)
 CNSsolve>evaluate (&Data.cdih.on = &dihedrals_on) 
 EVALUATE: symbol $_1_DATA.CDIH.ON set to FALSE (logical)
 CNSsolve>evaluate (&Data.ssdihed = &ssdihed) 
 Assuming literal string "NONE"
 EVALUATE: symbol $_1_DATA.SSDIHED set to "NONE" (string)
 CNSsolve>evaluate (&Data.flags.coup =  false) 
 EVALUATE: symbol $_1_DATA.FLAGS.COUP set to FALSE (logical)
 CNSsolve>evaluate (&Data.flags.vean =  false) 
 EVALUATE: symbol $_1_DATA.FLAGS.VEAN set to FALSE (logical)
 CNSsolve>if (&rdc1_choice = "VANGLE") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate (&Data.flags.vean =  true) 
 CNSsolve>end if 
 CNSsolve>if (&rdc2_choice = "VANGLE") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate (&Data.flags.vean =  true) 
 CNSsolve>end if 
 CNSsolve>if (&rdc3_choice = "VANGLE") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate (&Data.flags.vean =  true) 
 CNSsolve>end if 
 CNSsolve>if (&rdc4_choice = "VANGLE") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate (&Data.flags.vean =  true) 
 CNSsolve>end if 
 CNSsolve>if (&rdc5_choice = "VANGLE") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate (&Data.flags.vean =  true) 
 CNSsolve>end if 
 CNSsolve>evaluate (&Data.flags.sani =  false) 
 EVALUATE: symbol $_1_DATA.FLAGS.SANI set to FALSE (logical)
 CNSsolve>if (&rdc1_choice = "SANI") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate (&Data.flags.sani =  true) 
 CNSsolve>end if 
 CNSsolve>if (&rdc2_choice = "SANI") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate (&Data.flags.sani =  true) 
 CNSsolve>end if 
 CNSsolve>if (&rdc3_choice = "SANI") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate (&Data.flags.sani =  true) 
 CNSsolve>end if 
 CNSsolve>if (&rdc4_choice = "SANI") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate (&Data.flags.sani =  true) 
 CNSsolve>end if 
 CNSsolve>if (&rdc5_choice = "SANI") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate (&Data.flags.sani =  true) 
 CNSsolve>end if 
 CNSsolve>evaluate (&Data.flags.xrdc =  false) 
 EVALUATE: symbol $_1_DATA.FLAGS.XRDC set to FALSE (logical)
 CNSsolve>if (&rdc1_choice = "XRDC") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate (&Data.flags.xrdc =  true) 
 CNSsolve>end if 
 CNSsolve>if (&rdc2_choice = "XRDC") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate (&Data.flags.xrdc =  true) 
 CNSsolve>end if 
 CNSsolve>if (&rdc3_choice = "XRDC") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate (&Data.flags.xrdc =  true) 
 CNSsolve>end if 
 CNSsolve>if (&rdc4_choice = "XRDC") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate (&Data.flags.xrdc =  true) 
 CNSsolve>end if 
 CNSsolve>if (&rdc5_choice = "XRDC") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate (&Data.flags.xrdc =  true) 
 CNSsolve>end if 
 CNSsolve>evaluate (&Data.flags.xpcs =  false) 
 EVALUATE: symbol $_1_DATA.FLAGS.XPCS set to FALSE (logical)
 CNSsolve>if (&pcs1_choice = "XPCS") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate (&Data.flags.xpcs =  true) 
 CNSsolve>end if 
 CNSsolve>if (&pcs2_choice = "XPCS") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate (&Data.flags.xpcs =  true) 
 CNSsolve>end if 
 CNSsolve>if (&pcs3_choice = "XPCS") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate (&Data.flags.xpcs =  true) 
 CNSsolve>end if 
 CNSsolve>if (&pcs4_choice = "XPCS") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate (&Data.flags.xpcs =  true) 
 CNSsolve>end if 
 CNSsolve>if (&pcs5_choice = "XPCS") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate (&Data.flags.xpcs =  true) 
 CNSsolve>end if 
 CNSsolve>if (&pcs6_choice = "XPCS") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate (&Data.flags.xpcs =  true) 
 CNSsolve>end if 
 CNSsolve>if (&pcs7_choice = "XPCS") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate (&Data.flags.xpcs =  true) 
 CNSsolve>end if 
 CNSsolve>if (&pcs8_choice = "XPCS") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate (&Data.flags.xpcs =  true) 
 CNSsolve>end if 
 CNSsolve>if (&pcs9_choice = "XPCS") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate (&Data.flags.xpcs =  true) 
 CNSsolve>end if 
 CNSsolve>if (&pcsA_choice = "XPCS") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate (&Data.flags.xpcs =  true) 
 CNSsolve>end if 
 CNSsolve>evaluate (&Data.flags.dani =  false) 
 EVALUATE: symbol $_1_DATA.FLAGS.DANI set to FALSE (logical)
 CNSsolve>if (&dan1_choice = "DANI") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate (&Data.flags.dani =  true) 
 CNSsolve>end if 
 CNSsolve>if (&dan2_choice = "DANI") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate (&Data.flags.dani =  true) 
 CNSsolve>end if 
 CNSsolve>if (&dan3_choice = "DANI") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate (&Data.flags.dani =  true) 
 CNSsolve>end if 
 CNSsolve>if (&dan4_choice = "DANI") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate (&Data.flags.dani =  true) 
 CNSsolve>end if 
 CNSsolve>if (&dan5_choice = "DANI") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate (&Data.flags.dani =  true) 
 CNSsolve>end if 
 CNSsolve>evaluate (&Data.flags.plan =  false) 
 EVALUATE: symbol $_1_DATA.FLAGS.PLAN set to FALSE (logical)
 CNSsolve>evaluate (&Data.flags.ncs  =  &ncs_on) 
 EVALUATE: symbol $_1_DATA.FLAGS.NCS set to FALSE (logical)
 CNSsolve>evaluate (&Data.flags.sym  =  &sym_on) 
 EVALUATE: symbol $_1_DATA.FLAGS.SYM set to FALSE (logical)
 CNSsolve>evaluate (&data.scaling=&air_scaling) 
 EVALUATE: symbol $_1_DATA.SCALING set to FALSE (logical)
 CNSsolve>evaluate (&data.totnoe_unamb=&tot_unamb) 
 EVALUATE: symbol $_1_DATA.TOTNOE_UNAMB set to    25.0000     (real)
 CNSsolve>evaluate (&data.unamb_firstit=&unamb_firstit) 
 EVALUATE: symbol $_1_DATA.UNAMB_FIRSTIT set to    0.00000     (real)
 CNSsolve>evaluate (&data.unamb_lastit=&unamb_lastit) 
 EVALUATE: symbol $_1_DATA.UNAMB_LASTIT set to    2.00000     (real)
 CNSsolve>evaluate (&data.unamb_hot=&unamb_hot) 
 EVALUATE: symbol $_1_DATA.UNAMB_HOT set to    10.0000     (real)
 CNSsolve>evaluate (&data.unamb_cool1=&unamb_cool1) 
 EVALUATE: symbol $_1_DATA.UNAMB_COOL1 set to    10.0000     (real)
 CNSsolve>evaluate (&data.unamb_cool2=&unamb_cool2) 
 EVALUATE: symbol $_1_DATA.UNAMB_COOL2 set to    50.0000     (real)
 CNSsolve>evaluate (&data.unamb_cool3=&unamb_cool3) 
 EVALUATE: symbol $_1_DATA.UNAMB_COOL3 set to    50.0000     (real)
 CNSsolve>evaluate (&data.noecv=&noecv) 
 EVALUATE: symbol $_1_DATA.NOECV set to TRUE (logical)
 CNSsolve>evaluate (&data.ncvpart=&ncvpart) 
 EVALUATE: symbol $_1_DATA.NCVPART set to    2.00000     (real)
 CNSsolve>evaluate (&data.ranair=&ranair) 
 EVALUATE: symbol $_1_DATA.RANAIR set to FALSE (logical)
 CNSsolve>if (&data.ranair eq true) then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate (&data.noecv = false) 
 CNSsolve>end if 
 CNSsolve>evaluate (&data.cmrest=&cmrest) 
 EVALUATE: symbol $_1_DATA.CMREST set to TRUE (logical)
 CNSsolve>evaluate (&data.kcont=&kcont) 
 EVALUATE: symbol $_1_DATA.KCONT set to    1.00000     (real)
 CNSsolve>evaluate (&data.surfrest=&surfrest) 
 EVALUATE: symbol $_1_DATA.SURFREST set to TRUE (logical)
 CNSsolve>evaluate (&data.ksurf=&ksurf) 
 EVALUATE: symbol $_1_DATA.KSURF set to    1.00000     (real)
 CNSsolve>evaluate (&data.flags.rg=&rgrest) 
 EVALUATE: symbol $_1_DATA.FLAGS.RG set to FALSE (logical)
 CNSsolve>evaluate (&data.rgtarg=&rgtarg) 
 EVALUATE: symbol $_1_DATA.RGTARG set to    17.7800     (real)
 CNSsolve>evaluate (&data.krg_hot=&krg_hot) 
 EVALUATE: symbol $_1_DATA.KRG_HOT set to    100.000     (real)
 CNSsolve>evaluate (&data.krg_cool1=&krg_cool1) 
 EVALUATE: symbol $_1_DATA.KRG_COOL1 set to    100.000     (real)
 CNSsolve>evaluate (&data.krg_cool2=&krg_cool2) 
 EVALUATE: symbol $_1_DATA.KRG_COOL2 set to    100.000     (real)
 CNSsolve>evaluate (&data.krg_cool3=&krg_cool3) 
 EVALUATE: symbol $_1_DATA.KRG_COOL3 set to    100.000     (real)
 CNSsolve>evaluate (&data.rgsele=&rgsele) 
 EVALUATE: symbol $_1_DATA.RGSELE set to "all" (string)
 CNSsolve>evaluate (&data.totnoe_amb=&tot_amb) 
 EVALUATE: symbol $_1_DATA.TOTNOE_AMB set to    0.00000     (real)
 CNSsolve>evaluate (&data.amb_firstit=&amb_firstit) 
 EVALUATE: symbol $_1_DATA.AMB_FIRSTIT set to    0.00000     (real)
 CNSsolve>evaluate (&data.amb_lastit=&amb_lastit) 
 EVALUATE: symbol $_1_DATA.AMB_LASTIT set to    2.00000     (real)
 CNSsolve>evaluate (&data.amb_hot=&amb_hot) 
 EVALUATE: symbol $_1_DATA.AMB_HOT set to    10.0000     (real)
 CNSsolve>evaluate (&data.amb_cool1=&amb_cool1) 
 EVALUATE: symbol $_1_DATA.AMB_COOL1 set to    10.0000     (real)
 CNSsolve>evaluate (&data.amb_cool2=&amb_cool2) 
 EVALUATE: symbol $_1_DATA.AMB_COOL2 set to    50.0000     (real)
 CNSsolve>evaluate (&data.amb_cool3=&amb_cool3) 
 EVALUATE: symbol $_1_DATA.AMB_COOL3 set to    50.0000     (real)
 CNSsolve>evaluate (&data.kncs=&kncs) 
 EVALUATE: symbol $_1_DATA.KNCS set to    1.00000     (real)
 CNSsolve>evaluate (&data.ksym=&ksym) 
 EVALUATE: symbol $_1_DATA.KSYM set to    10.0000     (real)
 CNSsolve>evaluate (&data.hbond_firstit=&hbond_firstit) 
 EVALUATE: symbol $_1_DATA.HBOND_FIRSTIT set to    1.00000     (real)
 CNSsolve>evaluate (&data.hbond_lastit=&hbond_lastit) 
 EVALUATE: symbol $_1_DATA.HBOND_LASTIT set to    2.00000     (real)
 CNSsolve>evaluate (&data.hbond_hot=&hbond_hot) 
 EVALUATE: symbol $_1_DATA.HBOND_HOT set to    10.0000     (real)
 CNSsolve>evaluate (&data.hbond_cool1=&hbond_cool1) 
 EVALUATE: symbol $_1_DATA.HBOND_COOL1 set to    10.0000     (real)
 CNSsolve>evaluate (&data.hbond_cool2=&hbond_cool2) 
 EVALUATE: symbol $_1_DATA.HBOND_COOL2 set to    50.0000     (real)
 CNSsolve>evaluate (&data.hbond_cool3=&hbond_cool3) 
 EVALUATE: symbol $_1_DATA.HBOND_COOL3 set to    50.0000     (real)
 CNSsolve>evaluate (&data.mrswi_hot=&mrswi_hot) 
 EVALUATE: symbol $_1_DATA.MRSWI_HOT set to   0.500000     (real)
 CNSsolve>evaluate (&data.mrswi_cool1=&mrswi_cool1) 
 EVALUATE: symbol $_1_DATA.MRSWI_COOL1 set to   0.500000     (real)
 CNSsolve>evaluate (&data.mrswi_cool2=&mrswi_cool2) 
 EVALUATE: symbol $_1_DATA.MRSWI_COOL2 set to   0.500000     (real)
 CNSsolve>evaluate (&data.mrswi_cool3=&mrswi_cool3) 
 EVALUATE: symbol $_1_DATA.MRSWI_COOL3 set to   0.500000     (real)
 CNSsolve>evaluate (&data.rswi_hot=&rswi_hot) 
 EVALUATE: symbol $_1_DATA.RSWI_HOT set to   0.500000     (real)
 CNSsolve>evaluate (&data.rswi_cool1=&rswi_cool1) 
 EVALUATE: symbol $_1_DATA.RSWI_COOL1 set to   0.500000     (real)
 CNSsolve>evaluate (&data.rswi_cool2=&rswi_cool2) 
 EVALUATE: symbol $_1_DATA.RSWI_COOL2 set to   0.500000     (real)
 CNSsolve>evaluate (&data.rswi_cool3=&rswi_cool3) 
 EVALUATE: symbol $_1_DATA.RSWI_COOL3 set to   0.500000     (real)
 CNSsolve>evaluate (&data.masy_hot=&masy_hot) 
 EVALUATE: symbol $_1_DATA.MASY_HOT set to   -1.00000     (real)
 CNSsolve>evaluate (&data.masy_cool1=&masy_cool1) 
 EVALUATE: symbol $_1_DATA.MASY_COOL1 set to   -1.00000     (real)
 CNSsolve>evaluate (&data.masy_cool2=&masy_cool2) 
 EVALUATE: symbol $_1_DATA.MASY_COOL2 set to  -0.100000     (real)
 CNSsolve>evaluate (&data.masy_cool3=&masy_cool3) 
 EVALUATE: symbol $_1_DATA.MASY_COOL3 set to  -0.100000     (real)
 CNSsolve>evaluate (&data.asy_hot=&asy_hot) 
 EVALUATE: symbol $_1_DATA.ASY_HOT set to    1.00000     (real)
 CNSsolve>evaluate (&data.asy_cool1=&asy_cool1) 
 EVALUATE: symbol $_1_DATA.ASY_COOL1 set to    1.00000     (real)
 CNSsolve>evaluate (&data.asy_cool2=&asy_cool2) 
 EVALUATE: symbol $_1_DATA.ASY_COOL2 set to   0.100000     (real)
 CNSsolve>evaluate (&data.asy_cool3=&asy_cool3) 
 EVALUATE: symbol $_1_DATA.ASY_COOL3 set to   0.100000     (real)
 CNSsolve>evaluate (&data.dihedrals.on=&dihedrals_on) 
 EVALUATE: symbol $_1_DATA.DIHEDRALS.ON set to FALSE (logical)
 CNSsolve>evaluate (&data.dihedrals_hot=&dihedrals_hot) 
 EVALUATE: symbol $_1_DATA.DIHEDRALS_HOT set to    5.00000     (real)
 CNSsolve>evaluate (&data.dihedrals_cool1=&dihedrals_cool1) 
 EVALUATE: symbol $_1_DATA.DIHEDRALS_COOL1 set to    5.00000     (real)
 CNSsolve>evaluate (&data.dihedrals_cool2=&dihedrals_cool2) 
 EVALUATE: symbol $_1_DATA.DIHEDRALS_COOL2 set to    50.0000     (real)
 CNSsolve>evaluate (&data.dihedrals_cool3=&dihedrals_cool3) 
 EVALUATE: symbol $_1_DATA.DIHEDRALS_COOL3 set to    200.000     (real)
 CNSsolve>evaluate (&data.hbonds_on=&hbonds_on) 
 EVALUATE: symbol $_1_DATA.HBONDS_ON set to FALSE (logical)
 CNSsolve>evaluate (&data.c1_on=&c1_on) 
 EVALUATE: symbol $_1_DATA.C1_ON set to FALSE (logical)
 CNSsolve>evaluate (&data.c1_karplusa=&c1_karplusa) 
 EVALUATE: symbol $_1_DATA.C1_KARPLUSA set to    6.98000     (real)
 CNSsolve>evaluate (&data.c1_karplusb=&c1_karplusb) 
 EVALUATE: symbol $_1_DATA.C1_KARPLUSB set to   -1.38000     (real)
 CNSsolve>evaluate (&data.c1_karplusc=&c1_karplusc) 
 EVALUATE: symbol $_1_DATA.C1_KARPLUSC set to    1.72000     (real)
 CNSsolve>evaluate (&data.c1_karplusd=&c1_karplusd) 
 EVALUATE: symbol $_1_DATA.C1_KARPLUSD set to   -60.0000     (real)
 CNSsolve>evaluate (&data.c1_hot=&c1_hot) 
 EVALUATE: symbol $_1_DATA.C1_HOT set to    0.00000     (real)
 CNSsolve>evaluate (&data.c1_cool1=&c1_cool1) 
 EVALUATE: symbol $_1_DATA.C1_COOL1 set to   0.200000     (real)
 CNSsolve>evaluate (&data.c1_cool2=&c1_cool2) 
 EVALUATE: symbol $_1_DATA.C1_COOL2 set to    1.00000     (real)
 CNSsolve>evaluate (&data.c1_cool3=&c1_cool3) 
 EVALUATE: symbol $_1_DATA.C1_COOL3 set to    1.00000     (real)
 CNSsolve>evaluate (&data.c2_on=&c2_on) 
 EVALUATE: symbol $_1_DATA.C2_ON set to FALSE (logical)
 CNSsolve>evaluate (&data.c2_karplusa=&c2_karplusa) 
 EVALUATE: symbol $_1_DATA.C2_KARPLUSA set to    6.98000     (real)
 CNSsolve>evaluate (&data.c2_karplusb=&c2_karplusb) 
 EVALUATE: symbol $_1_DATA.C2_KARPLUSB set to   -1.38000     (real)
 CNSsolve>evaluate (&data.c2_karplusc=&c2_karplusc) 
 EVALUATE: symbol $_1_DATA.C2_KARPLUSC set to    1.72000     (real)
 CNSsolve>evaluate (&data.c2_karplusd=&c2_karplusd) 
 EVALUATE: symbol $_1_DATA.C2_KARPLUSD set to   -120.000     (real)
 CNSsolve>evaluate (&data.c2_hot=&c2_hot) 
 EVALUATE: symbol $_1_DATA.C2_HOT set to    0.00000     (real)
 CNSsolve>evaluate (&data.c2_cool1=&c2_cool1) 
 EVALUATE: symbol $_1_DATA.C2_COOL1 set to   0.200000     (real)
 CNSsolve>evaluate (&data.c2_cool2=&c2_cool2) 
 EVALUATE: symbol $_1_DATA.C2_COOL2 set to    1.00000     (real)
 CNSsolve>evaluate (&data.c2_cool3=&c2_cool3) 
 EVALUATE: symbol $_1_DATA.C2_COOL3 set to    1.00000     (real)
 CNSsolve>evaluate (&data.c3_on=&c3_on) 
 EVALUATE: symbol $_1_DATA.C3_ON set to FALSE (logical)
 CNSsolve>evaluate (&data.c3_karplusa=&c3_karplusa) 
 EVALUATE: symbol $_1_DATA.C3_KARPLUSA set to    6.98000     (real)
 CNSsolve>evaluate (&data.c3_karplusb=&c3_karplusb) 
 EVALUATE: symbol $_1_DATA.C3_KARPLUSB set to   -1.38000     (real)
 CNSsolve>evaluate (&data.c3_karplusc=&c3_karplusc) 
 EVALUATE: symbol $_1_DATA.C3_KARPLUSC set to    1.72000     (real)
 CNSsolve>evaluate (&data.c3_karplusd=&c3_karplusd) 
 EVALUATE: symbol $_1_DATA.C3_KARPLUSD set to   -120.000     (real)
 CNSsolve>evaluate (&data.c3_hot=&c3_hot) 
 EVALUATE: symbol $_1_DATA.C3_HOT set to    0.00000     (real)
 CNSsolve>evaluate (&data.c3_cool1=&c3_cool1) 
 EVALUATE: symbol $_1_DATA.C3_COOL1 set to   0.200000     (real)
 CNSsolve>evaluate (&data.c3_cool2=&c3_cool2) 
 EVALUATE: symbol $_1_DATA.C3_COOL2 set to    1.00000     (real)
 CNSsolve>evaluate (&data.c3_cool3=&c3_cool3) 
 EVALUATE: symbol $_1_DATA.C3_COOL3 set to    1.00000     (real)
 CNSsolve>evaluate (&data.c4_on=&c4_on) 
 EVALUATE: symbol $_1_DATA.C4_ON set to FALSE (logical)
 CNSsolve>evaluate (&data.c4_karplusa=&c4_karplusa) 
 EVALUATE: symbol $_1_DATA.C4_KARPLUSA set to    6.98000     (real)
 CNSsolve>evaluate (&data.c4_karplusb=&c4_karplusb) 
 EVALUATE: symbol $_1_DATA.C4_KARPLUSB set to   -1.38000     (real)
 CNSsolve>evaluate (&data.c4_karplusc=&c4_karplusc) 
 EVALUATE: symbol $_1_DATA.C4_KARPLUSC set to    1.72000     (real)
 CNSsolve>evaluate (&data.c4_karplusd=&c4_karplusd) 
 EVALUATE: symbol $_1_DATA.C4_KARPLUSD set to   -120.000     (real)
 CNSsolve>evaluate (&data.c4_hot=&c4_hot) 
 EVALUATE: symbol $_1_DATA.C4_HOT set to    0.00000     (real)
 CNSsolve>evaluate (&data.c4_cool1=&c4_cool1) 
 EVALUATE: symbol $_1_DATA.C4_COOL1 set to   0.200000     (real)
 CNSsolve>evaluate (&data.c4_cool2=&c4_cool2) 
 EVALUATE: symbol $_1_DATA.C4_COOL2 set to    1.00000     (real)
 CNSsolve>evaluate (&data.c4_cool3=&c4_cool3) 
 EVALUATE: symbol $_1_DATA.C4_COOL3 set to    1.00000     (real)
 CNSsolve>evaluate (&data.c5_on=&c5_on) 
 EVALUATE: symbol $_1_DATA.C5_ON set to FALSE (logical)
 CNSsolve>evaluate (&data.c5_karplusa=&c5_karplusa) 
 EVALUATE: symbol $_1_DATA.C5_KARPLUSA set to    6.98000     (real)
 CNSsolve>evaluate (&data.c5_karplusb=&c5_karplusb) 
 EVALUATE: symbol $_1_DATA.C5_KARPLUSB set to   -1.38000     (real)
 CNSsolve>evaluate (&data.c5_karplusc=&c5_karplusc) 
 EVALUATE: symbol $_1_DATA.C5_KARPLUSC set to    1.72000     (real)
 CNSsolve>evaluate (&data.c5_karplusd=&c5_karplusd) 
 EVALUATE: symbol $_1_DATA.C5_KARPLUSD set to   -120.000     (real)
 CNSsolve>evaluate (&data.c5_hot=&c5_hot) 
 EVALUATE: symbol $_1_DATA.C5_HOT set to    0.00000     (real)
 CNSsolve>evaluate (&data.c5_cool1=&c5_cool1) 
 EVALUATE: symbol $_1_DATA.C5_COOL1 set to   0.200000     (real)
 CNSsolve>evaluate (&data.c5_cool2=&c5_cool2) 
 EVALUATE: symbol $_1_DATA.C5_COOL2 set to    1.00000     (real)
 CNSsolve>evaluate (&data.c5_cool3=&c5_cool3) 
 EVALUATE: symbol $_1_DATA.C5_COOL3 set to    1.00000     (real)
 CNSsolve>evaluate (&data.rdc1_choice=&rdc1_choice) 
 EVALUATE: symbol $_1_DATA.RDC1_CHOICE set to "NO" (string)
 CNSsolve>evaluate (&data.rdc1_firstIt=&rdc1_firstIt) 
 EVALUATE: symbol $_1_DATA.RDC1_FIRSTIT set to    0.00000     (real)
 CNSsolve>evaluate (&data.rdc1_lastIt=&rdc1_lastIt) 
 EVALUATE: symbol $_1_DATA.RDC1_LASTIT set to    2.00000     (real)
 CNSsolve>evaluate (&data.rdc1_hot=&rdc1_hot) 
 EVALUATE: symbol $_1_DATA.RDC1_HOT set to   0.100000     (real)
 CNSsolve>evaluate (&data.rdc1_cool1=&rdc1_cool1) 
 EVALUATE: symbol $_1_DATA.RDC1_COOL1 set to    1.00000     (real)
 CNSsolve>evaluate (&data.rdc1_cool2=&rdc1_cool2) 
 EVALUATE: symbol $_1_DATA.RDC1_COOL2 set to    1.00000     (real)
 CNSsolve>evaluate (&data.rdc1_cool3=&rdc1_cool3) 
 EVALUATE: symbol $_1_DATA.RDC1_COOL3 set to    1.00000     (real)
 CNSsolve>evaluate (&data.rdc1_r=&rdc1_r) 
 EVALUATE: symbol $_1_DATA.RDC1_R set to   0.400000     (real)
 CNSsolve>evaluate (&data.rdc1_d=&rdc1_d) 
 EVALUATE: symbol $_1_DATA.RDC1_D set to    8.00000     (real)
 CNSsolve>evaluate (&data.rdc2_choice=&rdc2_choice) 
 EVALUATE: symbol $_1_DATA.RDC2_CHOICE set to "NO" (string)
 CNSsolve>evaluate (&data.rdc2_firstIt=&rdc2_firstIt) 
 EVALUATE: symbol $_1_DATA.RDC2_FIRSTIT set to    0.00000     (real)
 CNSsolve>evaluate (&data.rdc2_lastIt=&rdc2_lastIt) 
 EVALUATE: symbol $_1_DATA.RDC2_LASTIT set to    2.00000     (real)
 CNSsolve>evaluate (&data.rdc2_hot=&rdc2_hot) 
 EVALUATE: symbol $_1_DATA.RDC2_HOT set to   0.100000     (real)
 CNSsolve>evaluate (&data.rdc2_cool1=&rdc2_cool1) 
 EVALUATE: symbol $_1_DATA.RDC2_COOL1 set to    1.00000     (real)
 CNSsolve>evaluate (&data.rdc2_cool2=&rdc2_cool2) 
 EVALUATE: symbol $_1_DATA.RDC2_COOL2 set to    1.00000     (real)
 CNSsolve>evaluate (&data.rdc2_cool3=&rdc2_cool3) 
 EVALUATE: symbol $_1_DATA.RDC2_COOL3 set to    1.00000     (real)
 CNSsolve>evaluate (&data.rdc2_r=&rdc2_r) 
 EVALUATE: symbol $_1_DATA.RDC2_R set to   0.400000     (real)
 CNSsolve>evaluate (&data.rdc2_d=&rdc2_d) 
 EVALUATE: symbol $_1_DATA.RDC2_D set to    8.00000     (real)
 CNSsolve>evaluate (&data.rdc3_choice=&rdc3_choice) 
 EVALUATE: symbol $_1_DATA.RDC3_CHOICE set to "NO" (string)
 CNSsolve>evaluate (&data.rdc3_firstIt=&rdc3_firstIt) 
 EVALUATE: symbol $_1_DATA.RDC3_FIRSTIT set to    0.00000     (real)
 CNSsolve>evaluate (&data.rdc3_lastIt=&rdc3_lastIt) 
 EVALUATE: symbol $_1_DATA.RDC3_LASTIT set to    2.00000     (real)
 CNSsolve>evaluate (&data.rdc3_hot=&rdc3_hot) 
 EVALUATE: symbol $_1_DATA.RDC3_HOT set to   0.100000     (real)
 CNSsolve>evaluate (&data.rdc3_cool1=&rdc3_cool1) 
 EVALUATE: symbol $_1_DATA.RDC3_COOL1 set to    1.00000     (real)
 CNSsolve>evaluate (&data.rdc3_cool2=&rdc3_cool2) 
 EVALUATE: symbol $_1_DATA.RDC3_COOL2 set to    1.00000     (real)
 CNSsolve>evaluate (&data.rdc3_cool3=&rdc3_cool3) 
 EVALUATE: symbol $_1_DATA.RDC3_COOL3 set to    1.00000     (real)
 CNSsolve>evaluate (&data.rdc3_r=&rdc3_r) 
 EVALUATE: symbol $_1_DATA.RDC3_R set to   0.400000     (real)
 CNSsolve>evaluate (&data.rdc3_d=&rdc3_d) 
 EVALUATE: symbol $_1_DATA.RDC3_D set to    8.00000     (real)
 CNSsolve>evaluate (&data.rdc4_choice=&rdc4_choice) 
 EVALUATE: symbol $_1_DATA.RDC4_CHOICE set to "NO" (string)
 CNSsolve>evaluate (&data.rdc4_firstIt=&rdc4_firstIt) 
 EVALUATE: symbol $_1_DATA.RDC4_FIRSTIT set to    0.00000     (real)
 CNSsolve>evaluate (&data.rdc4_lastIt=&rdc4_lastIt) 
 EVALUATE: symbol $_1_DATA.RDC4_LASTIT set to    2.00000     (real)
 CNSsolve>evaluate (&data.rdc4_hot=&rdc4_hot) 
 EVALUATE: symbol $_1_DATA.RDC4_HOT set to   0.100000     (real)
 CNSsolve>evaluate (&data.rdc4_cool1=&rdc4_cool1) 
 EVALUATE: symbol $_1_DATA.RDC4_COOL1 set to    1.00000     (real)
 CNSsolve>evaluate (&data.rdc4_cool2=&rdc4_cool2) 
 EVALUATE: symbol $_1_DATA.RDC4_COOL2 set to    1.00000     (real)
 CNSsolve>evaluate (&data.rdc4_cool3=&rdc4_cool3) 
 EVALUATE: symbol $_1_DATA.RDC4_COOL3 set to    1.00000     (real)
 CNSsolve>evaluate (&data.rdc4_r=&rdc4_r) 
 EVALUATE: symbol $_1_DATA.RDC4_R set to   0.400000     (real)
 CNSsolve>evaluate (&data.rdc4_d=&rdc4_d) 
 EVALUATE: symbol $_1_DATA.RDC4_D set to    8.00000     (real)
 CNSsolve>evaluate (&data.rdc5_choice=&rdc5_choice) 
 EVALUATE: symbol $_1_DATA.RDC5_CHOICE set to "NO" (string)
 CNSsolve>evaluate (&data.rdc5_firstIt=&rdc5_firstIt) 
 EVALUATE: symbol $_1_DATA.RDC5_FIRSTIT set to    0.00000     (real)
 CNSsolve>evaluate (&data.rdc5_lastIt=&rdc5_lastIt) 
 EVALUATE: symbol $_1_DATA.RDC5_LASTIT set to    2.00000     (real)
 CNSsolve>evaluate (&data.rdc5_hot=&rdc5_hot) 
 EVALUATE: symbol $_1_DATA.RDC5_HOT set to   0.100000     (real)
 CNSsolve>evaluate (&data.rdc5_cool1=&rdc5_cool1) 
 EVALUATE: symbol $_1_DATA.RDC5_COOL1 set to    1.00000     (real)
 CNSsolve>evaluate (&data.rdc5_cool2=&rdc5_cool2) 
 EVALUATE: symbol $_1_DATA.RDC5_COOL2 set to    1.00000     (real)
 CNSsolve>evaluate (&data.rdc5_cool3=&rdc5_cool3) 
 EVALUATE: symbol $_1_DATA.RDC5_COOL3 set to    1.00000     (real)
 CNSsolve>evaluate (&data.rdc5_r=&rdc5_r) 
 EVALUATE: symbol $_1_DATA.RDC5_R set to   0.400000     (real)
 CNSsolve>evaluate (&data.rdc5_d=&rdc5_d) 
 EVALUATE: symbol $_1_DATA.RDC5_D set to    8.00000     (real)
 CNSsolve>evaluate (&data.pcs1_choice=&pcs1_choice) 
 EVALUATE: symbol $_1_DATA.PCS1_CHOICE set to "NO" (string)
 CNSsolve>evaluate (&data.pcs1_firstIt=&pcs1_firstIt) 
 EVALUATE: symbol $_1_DATA.PCS1_FIRSTIT set to    0.00000     (real)
 CNSsolve>evaluate (&data.pcs1_lastIt=&pcs1_lastIt) 
 EVALUATE: symbol $_1_DATA.PCS1_LASTIT set to    2.00000     (real)
 CNSsolve>evaluate (&data.pcs1_hot=&pcs1_hot) 
 EVALUATE: symbol $_1_DATA.PCS1_HOT set to    100.000     (real)
 CNSsolve>evaluate (&data.pcs1_cool1=&pcs1_cool1) 
 EVALUATE: symbol $_1_DATA.PCS1_COOL1 set to    100.000     (real)
 CNSsolve>evaluate (&data.pcs1_cool2=&pcs1_cool2) 
 EVALUATE: symbol $_1_DATA.PCS1_COOL2 set to    100.000     (real)
 CNSsolve>evaluate (&data.pcs1_cool3=&pcs1_cool3) 
 EVALUATE: symbol $_1_DATA.PCS1_COOL3 set to    1000.00     (real)
 CNSsolve>evaluate (&data.pcs1_r=&pcs1_r) 
 EVALUATE: symbol $_1_DATA.PCS1_R set to    1000.00     (real)
 CNSsolve>evaluate (&data.pcs1_d=&pcs1_d) 
 EVALUATE: symbol $_1_DATA.PCS1_D set to    10000.0     (real)
 CNSsolve>evaluate (&data.pcs2_choice=&pcs2_choice) 
 EVALUATE: symbol $_1_DATA.PCS2_CHOICE set to "NO" (string)
 CNSsolve>evaluate (&data.pcs2_firstIt=&pcs2_firstIt) 
 EVALUATE: symbol $_1_DATA.PCS2_FIRSTIT set to    0.00000     (real)
 CNSsolve>evaluate (&data.pcs2_lastIt=&pcs2_lastIt) 
 EVALUATE: symbol $_1_DATA.PCS2_LASTIT set to    2.00000     (real)
 CNSsolve>evaluate (&data.pcs2_hot=&pcs2_hot) 
 EVALUATE: symbol $_1_DATA.PCS2_HOT set to    100.000     (real)
 CNSsolve>evaluate (&data.pcs2_cool1=&pcs2_cool1) 
 EVALUATE: symbol $_1_DATA.PCS2_COOL1 set to    100.000     (real)
 CNSsolve>evaluate (&data.pcs2_cool2=&pcs2_cool2) 
 EVALUATE: symbol $_1_DATA.PCS2_COOL2 set to    100.000     (real)
 CNSsolve>evaluate (&data.pcs2_cool3=&pcs2_cool3) 
 EVALUATE: symbol $_1_DATA.PCS2_COOL3 set to    1000.00     (real)
 CNSsolve>evaluate (&data.pcs2_r=&pcs2_r) 
 EVALUATE: symbol $_1_DATA.PCS2_R set to    1000.00     (real)
 CNSsolve>evaluate (&data.pcs2_d=&pcs2_d) 
 EVALUATE: symbol $_1_DATA.PCS2_D set to    10000.0     (real)
 CNSsolve>evaluate (&data.pcs3_choice=&pcs3_choice) 
 EVALUATE: symbol $_1_DATA.PCS3_CHOICE set to "NO" (string)
 CNSsolve>evaluate (&data.pcs3_firstIt=&pcs3_firstIt) 
 EVALUATE: symbol $_1_DATA.PCS3_FIRSTIT set to    0.00000     (real)
 CNSsolve>evaluate (&data.pcs3_lastIt=&pcs3_lastIt) 
 EVALUATE: symbol $_1_DATA.PCS3_LASTIT set to    2.00000     (real)
 CNSsolve>evaluate (&data.pcs3_hot=&pcs3_hot) 
 EVALUATE: symbol $_1_DATA.PCS3_HOT set to    100.000     (real)
 CNSsolve>evaluate (&data.pcs3_cool1=&pcs3_cool1) 
 EVALUATE: symbol $_1_DATA.PCS3_COOL1 set to    100.000     (real)
 CNSsolve>evaluate (&data.pcs3_cool2=&pcs3_cool2) 
 EVALUATE: symbol $_1_DATA.PCS3_COOL2 set to    100.000     (real)
 CNSsolve>evaluate (&data.pcs3_cool3=&pcs3_cool3) 
 EVALUATE: symbol $_1_DATA.PCS3_COOL3 set to    1000.00     (real)
 CNSsolve>evaluate (&data.pcs3_r=&pcs3_r) 
 EVALUATE: symbol $_1_DATA.PCS3_R set to    1000.00     (real)
 CNSsolve>evaluate (&data.pcs3_d=&pcs3_d) 
 EVALUATE: symbol $_1_DATA.PCS3_D set to    10000.0     (real)
 CNSsolve>evaluate (&data.pcs4_choice=&pcs4_choice) 
 EVALUATE: symbol $_1_DATA.PCS4_CHOICE set to "NO" (string)
 CNSsolve>evaluate (&data.pcs4_firstIt=&pcs4_firstIt) 
 EVALUATE: symbol $_1_DATA.PCS4_FIRSTIT set to    0.00000     (real)
 CNSsolve>evaluate (&data.pcs4_lastIt=&pcs4_lastIt) 
 EVALUATE: symbol $_1_DATA.PCS4_LASTIT set to    2.00000     (real)
 CNSsolve>evaluate (&data.pcs4_hot=&pcs4_hot) 
 EVALUATE: symbol $_1_DATA.PCS4_HOT set to    100.000     (real)
 CNSsolve>evaluate (&data.pcs4_cool1=&pcs4_cool1) 
 EVALUATE: symbol $_1_DATA.PCS4_COOL1 set to    100.000     (real)
 CNSsolve>evaluate (&data.pcs4_cool2=&pcs4_cool2) 
 EVALUATE: symbol $_1_DATA.PCS4_COOL2 set to    100.000     (real)
 CNSsolve>evaluate (&data.pcs4_cool3=&pcs4_cool3) 
 EVALUATE: symbol $_1_DATA.PCS4_COOL3 set to    1000.00     (real)
 CNSsolve>evaluate (&data.pcs4_r=&pcs4_r) 
 EVALUATE: symbol $_1_DATA.PCS4_R set to    1000.00     (real)
 CNSsolve>evaluate (&data.pcs4_d=&pcs4_d) 
 EVALUATE: symbol $_1_DATA.PCS4_D set to    10000.0     (real)
 CNSsolve>evaluate (&data.pcs5_choice=&pcs5_choice) 
 EVALUATE: symbol $_1_DATA.PCS5_CHOICE set to "NO" (string)
 CNSsolve>evaluate (&data.pcs5_firstIt=&pcs5_firstIt) 
 EVALUATE: symbol $_1_DATA.PCS5_FIRSTIT set to    0.00000     (real)
 CNSsolve>evaluate (&data.pcs5_lastIt=&pcs5_lastIt) 
 EVALUATE: symbol $_1_DATA.PCS5_LASTIT set to    2.00000     (real)
 CNSsolve>evaluate (&data.pcs5_hot=&pcs5_hot) 
 EVALUATE: symbol $_1_DATA.PCS5_HOT set to    100.000     (real)
 CNSsolve>evaluate (&data.pcs5_cool1=&pcs5_cool1) 
 EVALUATE: symbol $_1_DATA.PCS5_COOL1 set to    100.000     (real)
 CNSsolve>evaluate (&data.pcs5_cool2=&pcs5_cool2) 
 EVALUATE: symbol $_1_DATA.PCS5_COOL2 set to    100.000     (real)
 CNSsolve>evaluate (&data.pcs5_cool3=&pcs5_cool3) 
 EVALUATE: symbol $_1_DATA.PCS5_COOL3 set to    1000.00     (real)
 CNSsolve>evaluate (&data.pcs5_r=&pcs5_r) 
 EVALUATE: symbol $_1_DATA.PCS5_R set to    1000.00     (real)
 CNSsolve>evaluate (&data.pcs5_d=&pcs5_d) 
 EVALUATE: symbol $_1_DATA.PCS5_D set to    10000.0     (real)
 CNSsolve>evaluate (&data.pcs6_choice=&pcs6_choice) 
 EVALUATE: symbol $_1_DATA.PCS6_CHOICE set to "NO" (string)
 CNSsolve>evaluate (&data.pcs6_firstIt=&pcs6_firstIt) 
 EVALUATE: symbol $_1_DATA.PCS6_FIRSTIT set to    0.00000     (real)
 CNSsolve>evaluate (&data.pcs6_lastIt=&pcs6_lastIt) 
 EVALUATE: symbol $_1_DATA.PCS6_LASTIT set to    2.00000     (real)
 CNSsolve>evaluate (&data.pcs6_hot=&pcs6_hot) 
 EVALUATE: symbol $_1_DATA.PCS6_HOT set to    100.000     (real)
 CNSsolve>evaluate (&data.pcs6_cool1=&pcs6_cool1) 
 EVALUATE: symbol $_1_DATA.PCS6_COOL1 set to    100.000     (real)
 CNSsolve>evaluate (&data.pcs6_cool2=&pcs6_cool2) 
 EVALUATE: symbol $_1_DATA.PCS6_COOL2 set to    100.000     (real)
 CNSsolve>evaluate (&data.pcs6_cool3=&pcs6_cool3) 
 EVALUATE: symbol $_1_DATA.PCS6_COOL3 set to    1000.00     (real)
 CNSsolve>evaluate (&data.pcs6_r=&pcs6_r) 
 EVALUATE: symbol $_1_DATA.PCS6_R set to    1000.00     (real)
 CNSsolve>evaluate (&data.pcs6_d=&pcs6_d) 
 EVALUATE: symbol $_1_DATA.PCS6_D set to    10000.0     (real)
 CNSsolve>evaluate (&data.pcs7_choice=&pcs7_choice) 
 EVALUATE: symbol $_1_DATA.PCS7_CHOICE set to "NO" (string)
 CNSsolve>evaluate (&data.pcs7_firstIt=&pcs7_firstIt) 
 EVALUATE: symbol $_1_DATA.PCS7_FIRSTIT set to    0.00000     (real)
 CNSsolve>evaluate (&data.pcs7_lastIt=&pcs7_lastIt) 
 EVALUATE: symbol $_1_DATA.PCS7_LASTIT set to    2.00000     (real)
 CNSsolve>evaluate (&data.pcs7_hot=&pcs7_hot) 
 EVALUATE: symbol $_1_DATA.PCS7_HOT set to    100.000     (real)
 CNSsolve>evaluate (&data.pcs7_cool1=&pcs7_cool1) 
 EVALUATE: symbol $_1_DATA.PCS7_COOL1 set to    100.000     (real)
 CNSsolve>evaluate (&data.pcs7_cool2=&pcs7_cool2) 
 EVALUATE: symbol $_1_DATA.PCS7_COOL2 set to    100.000     (real)
 CNSsolve>evaluate (&data.pcs7_cool3=&pcs7_cool3) 
 EVALUATE: symbol $_1_DATA.PCS7_COOL3 set to    1000.00     (real)
 CNSsolve>evaluate (&data.pcs7_r=&pcs7_r) 
 EVALUATE: symbol $_1_DATA.PCS7_R set to    1000.00     (real)
 CNSsolve>evaluate (&data.pcs7_d=&pcs7_d) 
 EVALUATE: symbol $_1_DATA.PCS7_D set to    10000.0     (real)
 CNSsolve>evaluate (&data.pcs8_choice=&pcs8_choice) 
 EVALUATE: symbol $_1_DATA.PCS8_CHOICE set to "NO" (string)
 CNSsolve>evaluate (&data.pcs8_firstIt=&pcs8_firstIt) 
 EVALUATE: symbol $_1_DATA.PCS8_FIRSTIT set to    0.00000     (real)
 CNSsolve>evaluate (&data.pcs8_lastIt=&pcs8_lastIt) 
 EVALUATE: symbol $_1_DATA.PCS8_LASTIT set to    2.00000     (real)
 CNSsolve>evaluate (&data.pcs8_hot=&pcs8_hot) 
 EVALUATE: symbol $_1_DATA.PCS8_HOT set to    100.000     (real)
 CNSsolve>evaluate (&data.pcs8_cool1=&pcs8_cool1) 
 EVALUATE: symbol $_1_DATA.PCS8_COOL1 set to    100.000     (real)
 CNSsolve>evaluate (&data.pcs8_cool2=&pcs8_cool2) 
 EVALUATE: symbol $_1_DATA.PCS8_COOL2 set to    100.000     (real)
 CNSsolve>evaluate (&data.pcs8_cool3=&pcs8_cool3) 
 EVALUATE: symbol $_1_DATA.PCS8_COOL3 set to    1000.00     (real)
 CNSsolve>evaluate (&data.pcs8_r=&pcs8_r) 
 EVALUATE: symbol $_1_DATA.PCS8_R set to    1000.00     (real)
 CNSsolve>evaluate (&data.pcs8_d=&pcs8_d) 
 EVALUATE: symbol $_1_DATA.PCS8_D set to    10000.0     (real)
 CNSsolve>evaluate (&data.pcs9_choice=&pcs9_choice) 
 EVALUATE: symbol $_1_DATA.PCS9_CHOICE set to "NO" (string)
 CNSsolve>evaluate (&data.pcs9_firstIt=&pcs9_firstIt) 
 EVALUATE: symbol $_1_DATA.PCS9_FIRSTIT set to    0.00000     (real)
 CNSsolve>evaluate (&data.pcs9_lastIt=&pcs9_lastIt) 
 EVALUATE: symbol $_1_DATA.PCS9_LASTIT set to    2.00000     (real)
 CNSsolve>evaluate (&data.pcs9_hot=&pcs9_hot) 
 EVALUATE: symbol $_1_DATA.PCS9_HOT set to    100.000     (real)
 CNSsolve>evaluate (&data.pcs9_cool1=&pcs9_cool1) 
 EVALUATE: symbol $_1_DATA.PCS9_COOL1 set to    100.000     (real)
 CNSsolve>evaluate (&data.pcs9_cool2=&pcs9_cool2) 
 EVALUATE: symbol $_1_DATA.PCS9_COOL2 set to    100.000     (real)
 CNSsolve>evaluate (&data.pcs9_cool3=&pcs9_cool3) 
 EVALUATE: symbol $_1_DATA.PCS9_COOL3 set to    1000.00     (real)
 CNSsolve>evaluate (&data.pcs9_r=&pcs9_r) 
 EVALUATE: symbol $_1_DATA.PCS9_R set to    1000.00     (real)
 CNSsolve>evaluate (&data.pcs9_d=&pcs9_d) 
 EVALUATE: symbol $_1_DATA.PCS9_D set to    10000.0     (real)
 CNSsolve>evaluate (&data.pcsA_choice=&pcsA_choice) 
 EVALUATE: symbol $_1_DATA.PCSA_CHOICE set to "NO" (string)
 CNSsolve>evaluate (&data.pcsA_firstIt=&pcsA_firstIt) 
 EVALUATE: symbol $_1_DATA.PCSA_FIRSTIT set to    0.00000     (real)
 CNSsolve>evaluate (&data.pcsA_lastIt=&pcsA_lastIt) 
 EVALUATE: symbol $_1_DATA.PCSA_LASTIT set to    2.00000     (real)
 CNSsolve>evaluate (&data.pcsA_hot=&pcsA_hot) 
 EVALUATE: symbol $_1_DATA.PCSA_HOT set to    100.000     (real)
 CNSsolve>evaluate (&data.pcsA_cool1=&pcsA_cool1) 
 EVALUATE: symbol $_1_DATA.PCSA_COOL1 set to    100.000     (real)
 CNSsolve>evaluate (&data.pcsA_cool2=&pcsA_cool2) 
 EVALUATE: symbol $_1_DATA.PCSA_COOL2 set to    100.000     (real)
 CNSsolve>evaluate (&data.pcsA_cool3=&pcsA_cool3) 
 EVALUATE: symbol $_1_DATA.PCSA_COOL3 set to    1000.00     (real)
 CNSsolve>evaluate (&data.pcsA_r=&pcsA_r) 
 EVALUATE: symbol $_1_DATA.PCSA_R set to    1000.00     (real)
 CNSsolve>evaluate (&data.pcsA_d=&pcsA_d) 
 EVALUATE: symbol $_1_DATA.PCSA_D set to    10000.0     (real)
 CNSsolve>evaluate (&data.dan1_choice=&dan1_choice) 
 EVALUATE: symbol $_1_DATA.DAN1_CHOICE set to "NO" (string)
 CNSsolve>evaluate (&data.dan1_firstIt=&dan1_firstIt) 
 EVALUATE: symbol $_1_DATA.DAN1_FIRSTIT set to    0.00000     (real)
 CNSsolve>evaluate (&data.dan1_lastIt=&dan1_lastIt) 
 EVALUATE: symbol $_1_DATA.DAN1_LASTIT set to    2.00000     (real)
 CNSsolve>evaluate (&data.dan1_hot=&dan1_hot) 
 EVALUATE: symbol $_1_DATA.DAN1_HOT set to    1.00000     (real)
 CNSsolve>evaluate (&data.dan1_cool1=&dan1_cool1) 
 EVALUATE: symbol $_1_DATA.DAN1_COOL1 set to    5.00000     (real)
 CNSsolve>evaluate (&data.dan1_cool2=&dan1_cool2) 
 EVALUATE: symbol $_1_DATA.DAN1_COOL2 set to    10.0000     (real)
 CNSsolve>evaluate (&data.dan1_cool3=&dan1_cool3) 
 EVALUATE: symbol $_1_DATA.DAN1_COOL3 set to    10.0000     (real)
 CNSsolve>evaluate (&data.dan1_tc=&dan1_tc) 
 EVALUATE: symbol $_1_DATA.DAN1_TC set to    9.77100     (real)
 CNSsolve>evaluate (&data.dan1_anis=&dan1_anis) 
 EVALUATE: symbol $_1_DATA.DAN1_ANIS set to    1.55700     (real)
 CNSsolve>evaluate (&data.dan1_r=&dan1_r) 
 EVALUATE: symbol $_1_DATA.DAN1_R set to   0.455000     (real)
 CNSsolve>evaluate (&data.dan1_wh=&dan1_wh) 
 EVALUATE: symbol $_1_DATA.DAN1_WH set to    599.910     (real)
 CNSsolve>evaluate (&data.dan1_wn=&dan1_wn) 
 EVALUATE: symbol $_1_DATA.DAN1_WN set to    60.8200     (real)
 CNSsolve>evaluate (&data.dan2_choice=&dan2_choice) 
 EVALUATE: symbol $_1_DATA.DAN2_CHOICE set to "NO" (string)
 CNSsolve>evaluate (&data.dan2_firstIt=&dan2_firstIt) 
 EVALUATE: symbol $_1_DATA.DAN2_FIRSTIT set to    0.00000     (real)
 CNSsolve>evaluate (&data.dan2_lastIt=&dan2_lastIt) 
 EVALUATE: symbol $_1_DATA.DAN2_LASTIT set to    1.00000     (real)
 CNSsolve>evaluate (&data.dan2_hot=&dan2_hot) 
 EVALUATE: symbol $_1_DATA.DAN2_HOT set to    1.00000     (real)
 CNSsolve>evaluate (&data.dan2_cool1=&dan2_cool1) 
 EVALUATE: symbol $_1_DATA.DAN2_COOL1 set to    5.00000     (real)
 CNSsolve>evaluate (&data.dan2_cool2=&dan2_cool2) 
 EVALUATE: symbol $_1_DATA.DAN2_COOL2 set to    10.0000     (real)
 CNSsolve>evaluate (&data.dan2_cool3=&dan2_cool3) 
 EVALUATE: symbol $_1_DATA.DAN2_COOL3 set to    10.0000     (real)
 CNSsolve>evaluate (&data.dan2_tc=&dan2_tc) 
 EVALUATE: symbol $_1_DATA.DAN2_TC set to    9.84000     (real)
 CNSsolve>evaluate (&data.dan2_anis=&dan2_anis) 
 EVALUATE: symbol $_1_DATA.DAN2_ANIS set to   -1.35000     (real)
 CNSsolve>evaluate (&data.dan2_r=&dan2_r) 
 EVALUATE: symbol $_1_DATA.DAN2_R set to   0.308000     (real)
 CNSsolve>evaluate (&data.dan2_wh=&dan2_wh) 
 EVALUATE: symbol $_1_DATA.DAN2_WH set to    599.910     (real)
 CNSsolve>evaluate (&data.dan2_wn=&dan2_wn) 
 EVALUATE: symbol $_1_DATA.DAN2_WN set to    60.8200     (real)
 CNSsolve>evaluate (&data.dan3_choice=&dan3_choice) 
 EVALUATE: symbol $_1_DATA.DAN3_CHOICE set to "NO" (string)
 CNSsolve>evaluate (&data.dan3_firstIt=&dan3_firstIt) 
 EVALUATE: symbol $_1_DATA.DAN3_FIRSTIT set to    1.00000     (real)
 CNSsolve>evaluate (&data.dan3_lastIt=&dan3_lastIt) 
 EVALUATE: symbol $_1_DATA.DAN3_LASTIT set to    1.00000     (real)
 CNSsolve>evaluate (&data.dan3_hot=&dan3_hot) 
 EVALUATE: symbol $_1_DATA.DAN3_HOT set to    1.00000     (real)
 CNSsolve>evaluate (&data.dan3_cool1=&dan3_cool1) 
 EVALUATE: symbol $_1_DATA.DAN3_COOL1 set to    5.00000     (real)
 CNSsolve>evaluate (&data.dan3_cool2=&dan3_cool2) 
 EVALUATE: symbol $_1_DATA.DAN3_COOL2 set to    10.0000     (real)
 CNSsolve>evaluate (&data.dan3_cool3=&dan3_cool3) 
 EVALUATE: symbol $_1_DATA.DAN3_COOL3 set to    10.0000     (real)
 CNSsolve>evaluate (&data.dan3_tc=&dan3_tc) 
 EVALUATE: symbol $_1_DATA.DAN3_TC set to    9.84000     (real)
 CNSsolve>evaluate (&data.dan3_anis=&dan3_anis) 
 EVALUATE: symbol $_1_DATA.DAN3_ANIS set to   -1.35000     (real)
 CNSsolve>evaluate (&data.dan3_r=&dan3_r) 
 EVALUATE: symbol $_1_DATA.DAN3_R set to   0.308000     (real)
 CNSsolve>evaluate (&data.dan3_wh=&dan3_wh) 
 EVALUATE: symbol $_1_DATA.DAN3_WH set to    599.910     (real)
 CNSsolve>evaluate (&data.dan3_wn=&dan3_wn) 
 EVALUATE: symbol $_1_DATA.DAN3_WN set to    60.8200     (real)
 CNSsolve>evaluate (&data.dan4_choice=&dan4_choice) 
 EVALUATE: symbol $_1_DATA.DAN4_CHOICE set to "NO" (string)
 CNSsolve>evaluate (&data.dan4_firstIt=&dan4_firstIt) 
 EVALUATE: symbol $_1_DATA.DAN4_FIRSTIT set to    0.00000     (real)
 CNSsolve>evaluate (&data.dan4_lastIt=&dan4_lastIt) 
 EVALUATE: symbol $_1_DATA.DAN4_LASTIT set to    2.00000     (real)
 CNSsolve>evaluate (&data.dan4_hot=&dan4_hot) 
 EVALUATE: symbol $_1_DATA.DAN4_HOT set to    1.00000     (real)
 CNSsolve>evaluate (&data.dan4_cool1=&dan4_cool1) 
 EVALUATE: symbol $_1_DATA.DAN4_COOL1 set to    5.00000     (real)
 CNSsolve>evaluate (&data.dan4_cool2=&dan4_cool2) 
 EVALUATE: symbol $_1_DATA.DAN4_COOL2 set to    10.0000     (real)
 CNSsolve>evaluate (&data.dan4_cool3=&dan4_cool3) 
 EVALUATE: symbol $_1_DATA.DAN4_COOL3 set to    10.0000     (real)
 CNSsolve>evaluate (&data.dan4_tc=&dan4_tc) 
 EVALUATE: symbol $_1_DATA.DAN4_TC set to    9.84000     (real)
 CNSsolve>evaluate (&data.dan4_anis=&dan4_anis) 
 EVALUATE: symbol $_1_DATA.DAN4_ANIS set to   -1.35000     (real)
 CNSsolve>evaluate (&data.dan4_r=&dan4_r) 
 EVALUATE: symbol $_1_DATA.DAN4_R set to   0.308000     (real)
 CNSsolve>evaluate (&data.dan4_wh=&dan4_wh) 
 EVALUATE: symbol $_1_DATA.DAN4_WH set to    599.910     (real)
 CNSsolve>evaluate (&data.dan4_wn=&dan4_wn) 
 EVALUATE: symbol $_1_DATA.DAN4_WN set to    60.8200     (real)
 CNSsolve>evaluate (&data.dan5_choice=&dan5_choice) 
 EVALUATE: symbol $_1_DATA.DAN5_CHOICE set to "NO" (string)
 CNSsolve>evaluate (&data.dan5_firstIt=&dan5_firstIt) 
 EVALUATE: symbol $_1_DATA.DAN5_FIRSTIT set to    0.00000     (real)
 CNSsolve>evaluate (&data.dan5_lastIt=&dan5_lastIt) 
 EVALUATE: symbol $_1_DATA.DAN5_LASTIT set to    2.00000     (real)
 CNSsolve>evaluate (&data.dan5_hot=&dan5_hot) 
 EVALUATE: symbol $_1_DATA.DAN5_HOT set to    1.00000     (real)
 CNSsolve>evaluate (&data.dan5_cool1=&dan5_cool1) 
 EVALUATE: symbol $_1_DATA.DAN5_COOL1 set to    5.00000     (real)
 CNSsolve>evaluate (&data.dan5_cool2=&dan5_cool2) 
 EVALUATE: symbol $_1_DATA.DAN5_COOL2 set to    10.0000     (real)
 CNSsolve>evaluate (&data.dan5_cool3=&dan5_cool3) 
 EVALUATE: symbol $_1_DATA.DAN5_COOL3 set to    10.0000     (real)
 CNSsolve>evaluate (&data.dan5_tc=&dan5_tc) 
 EVALUATE: symbol $_1_DATA.DAN5_TC set to    9.84000     (real)
 CNSsolve>evaluate (&data.dan5_anis=&dan5_anis) 
 EVALUATE: symbol $_1_DATA.DAN5_ANIS set to   -1.35000     (real)
 CNSsolve>evaluate (&data.dan5_r=&dan5_r) 
 EVALUATE: symbol $_1_DATA.DAN5_R set to   0.308000     (real)
 CNSsolve>evaluate (&data.dan5_wh=&dan5_wh) 
 EVALUATE: symbol $_1_DATA.DAN5_WH set to    599.910     (real)
 CNSsolve>evaluate (&data.dan5_wn=&dan5_wn) 
 EVALUATE: symbol $_1_DATA.DAN5_WN set to    60.8200     (real)
 CNSsolve>!VEAN statement: 
 CNSsolve>evaluate (&data.ini_bor_hot_1=&ini_bor_hot_1) 
 EVALUATE: symbol $_1_DATA.INI_BOR_HOT_1 set to    1.00000     (real)
 CNSsolve>evaluate (&data.ini_bor_cool1_1=&ini_bor_cool1_1) 
 EVALUATE: symbol $_1_DATA.INI_BOR_COOL1_1 set to    10.0000     (real)
 CNSsolve>evaluate (&data.ini_bor_cool2_1=&ini_bor_cool2_1) 
 EVALUATE: symbol $_1_DATA.INI_BOR_COOL2_1 set to    40.0000     (real)
 CNSsolve>evaluate (&data.ini_bor_cool3_1=&ini_bor_cool3_1) 
 EVALUATE: symbol $_1_DATA.INI_BOR_COOL3_1 set to    40.0000     (real)
 CNSsolve>evaluate (&data.ini_cen_hot_1=&ini_cen_hot_1) 
 EVALUATE: symbol $_1_DATA.INI_CEN_HOT_1 set to   0.250000     (real)
 CNSsolve>evaluate (&data.ini_cen_cool1_1=&ini_cen_cool1_1) 
 EVALUATE: symbol $_1_DATA.INI_CEN_COOL1_1 set to    2.50000     (real)
 CNSsolve>evaluate (&data.ini_cen_cool2_1=&ini_cen_cool2_1) 
 EVALUATE: symbol $_1_DATA.INI_CEN_COOL2_1 set to    10.0000     (real)
 CNSsolve>evaluate (&data.ini_cen_cool3_1=&ini_cen_cool3_1) 
 EVALUATE: symbol $_1_DATA.INI_CEN_COOL3_1 set to    10.0000     (real)
 CNSsolve>evaluate (&data.fin_bor_hot_1=&fin_bor_hot_1) 
 EVALUATE: symbol $_1_DATA.FIN_BOR_HOT_1 set to    10.0000     (real)
 CNSsolve>evaluate (&data.fin_bor_cool1_1=&fin_bor_cool1_1) 
 EVALUATE: symbol $_1_DATA.FIN_BOR_COOL1_1 set to    40.0000     (real)
 CNSsolve>evaluate (&data.fin_bor_cool2_1=&fin_bor_cool2_1) 
 EVALUATE: symbol $_1_DATA.FIN_BOR_COOL2_1 set to    40.0000     (real)
 CNSsolve>evaluate (&data.fin_bor_cool3_1=&fin_bor_cool3_1) 
 EVALUATE: symbol $_1_DATA.FIN_BOR_COOL3_1 set to    40.0000     (real)
 CNSsolve>evaluate (&data.fin_cen_hot_1=&fin_cen_hot_1) 
 EVALUATE: symbol $_1_DATA.FIN_CEN_HOT_1 set to    2.50000     (real)
 CNSsolve>evaluate (&data.fin_cen_cool1_1=&fin_cen_cool1_1) 
 EVALUATE: symbol $_1_DATA.FIN_CEN_COOL1_1 set to    10.0000     (real)
 CNSsolve>evaluate (&data.fin_cen_cool2_1=&fin_cen_cool2_1) 
 EVALUATE: symbol $_1_DATA.FIN_CEN_COOL2_1 set to    10.0000     (real)
 CNSsolve>evaluate (&data.fin_cen_cool3_1=&fin_cen_cool3_1) 
 EVALUATE: symbol $_1_DATA.FIN_CEN_COOL3_1 set to    10.0000     (real)
 CNSsolve>evaluate (&data.ini_bor_hot_2=&ini_bor_hot_2) 
 EVALUATE: symbol $_1_DATA.INI_BOR_HOT_2 set to    1.00000     (real)
 CNSsolve>evaluate (&data.ini_bor_cool1_2=&ini_bor_cool1_2) 
 EVALUATE: symbol $_1_DATA.INI_BOR_COOL1_2 set to    10.0000     (real)
 CNSsolve>evaluate (&data.ini_bor_cool2_2=&ini_bor_cool2_2) 
 EVALUATE: symbol $_1_DATA.INI_BOR_COOL2_2 set to    40.0000     (real)
 CNSsolve>evaluate (&data.ini_bor_cool3_2=&ini_bor_cool3_2) 
 EVALUATE: symbol $_1_DATA.INI_BOR_COOL3_2 set to    40.0000     (real)
 CNSsolve>evaluate (&data.ini_cen_hot_2=&ini_cen_hot_2) 
 EVALUATE: symbol $_1_DATA.INI_CEN_HOT_2 set to   0.250000     (real)
 CNSsolve>evaluate (&data.ini_cen_cool1_2=&ini_cen_cool1_2) 
 EVALUATE: symbol $_1_DATA.INI_CEN_COOL1_2 set to    2.50000     (real)
 CNSsolve>evaluate (&data.ini_cen_cool2_2=&ini_cen_cool2_2) 
 EVALUATE: symbol $_1_DATA.INI_CEN_COOL2_2 set to    10.0000     (real)
 CNSsolve>evaluate (&data.ini_cen_cool3_2=&ini_cen_cool3_2) 
 EVALUATE: symbol $_1_DATA.INI_CEN_COOL3_2 set to    10.0000     (real)
 CNSsolve>evaluate (&data.fin_bor_hot_2=&fin_bor_hot_2) 
 EVALUATE: symbol $_1_DATA.FIN_BOR_HOT_2 set to    10.0000     (real)
 CNSsolve>evaluate (&data.fin_bor_cool1_2=&fin_bor_cool1_2) 
 EVALUATE: symbol $_1_DATA.FIN_BOR_COOL1_2 set to    40.0000     (real)
 CNSsolve>evaluate (&data.fin_bor_cool2_2=&fin_bor_cool2_2) 
 EVALUATE: symbol $_1_DATA.FIN_BOR_COOL2_2 set to    40.0000     (real)
 CNSsolve>evaluate (&data.fin_bor_cool3_2=&fin_bor_cool3_2) 
 EVALUATE: symbol $_1_DATA.FIN_BOR_COOL3_2 set to    40.0000     (real)
 CNSsolve>evaluate (&data.fin_cen_hot_2=&fin_cen_hot_2) 
 EVALUATE: symbol $_1_DATA.FIN_CEN_HOT_2 set to    2.50000     (real)
 CNSsolve>evaluate (&data.fin_cen_cool1_2=&fin_cen_cool1_2) 
 EVALUATE: symbol $_1_DATA.FIN_CEN_COOL1_2 set to    10.0000     (real)
 CNSsolve>evaluate (&data.fin_cen_cool2_2=&fin_cen_cool2_2) 
 EVALUATE: symbol $_1_DATA.FIN_CEN_COOL2_2 set to    10.0000     (real)
 CNSsolve>evaluate (&data.fin_cen_cool3_2=&fin_cen_cool3_2) 
 EVALUATE: symbol $_1_DATA.FIN_CEN_COOL3_2 set to    10.0000     (real)
 CNSsolve>evaluate (&data.ini_bor_hot_3=&ini_bor_hot_3) 
 EVALUATE: symbol $_1_DATA.INI_BOR_HOT_3 set to    1.00000     (real)
 CNSsolve>evaluate (&data.ini_bor_cool1_3=&ini_bor_cool1_3) 
 EVALUATE: symbol $_1_DATA.INI_BOR_COOL1_3 set to    10.0000     (real)
 CNSsolve>evaluate (&data.ini_bor_cool2_3=&ini_bor_cool2_3) 
 EVALUATE: symbol $_1_DATA.INI_BOR_COOL2_3 set to    40.0000     (real)
 CNSsolve>evaluate (&data.ini_bor_cool3_3=&ini_bor_cool3_3) 
 EVALUATE: symbol $_1_DATA.INI_BOR_COOL3_3 set to    40.0000     (real)
 CNSsolve>evaluate (&data.ini_cen_hot_3=&ini_cen_hot_3) 
 EVALUATE: symbol $_1_DATA.INI_CEN_HOT_3 set to   0.250000     (real)
 CNSsolve>evaluate (&data.ini_cen_cool1_3=&ini_cen_cool1_3) 
 EVALUATE: symbol $_1_DATA.INI_CEN_COOL1_3 set to    2.50000     (real)
 CNSsolve>evaluate (&data.ini_cen_cool2_3=&ini_cen_cool2_3) 
 EVALUATE: symbol $_1_DATA.INI_CEN_COOL2_3 set to    10.0000     (real)
 CNSsolve>evaluate (&data.ini_cen_cool3_3=&ini_cen_cool3_3) 
 EVALUATE: symbol $_1_DATA.INI_CEN_COOL3_3 set to    10.0000     (real)
 CNSsolve>evaluate (&data.fin_bor_hot_3=&fin_bor_hot_3) 
 EVALUATE: symbol $_1_DATA.FIN_BOR_HOT_3 set to    10.0000     (real)
 CNSsolve>evaluate (&data.fin_bor_cool1_3=&fin_bor_cool1_3) 
 EVALUATE: symbol $_1_DATA.FIN_BOR_COOL1_3 set to    40.0000     (real)
 CNSsolve>evaluate (&data.fin_bor_cool2_3=&fin_bor_cool2_3) 
 EVALUATE: symbol $_1_DATA.FIN_BOR_COOL2_3 set to    40.0000     (real)
 CNSsolve>evaluate (&data.fin_bor_cool3_3=&fin_bor_cool3_3) 
 EVALUATE: symbol $_1_DATA.FIN_BOR_COOL3_3 set to    40.0000     (real)
 CNSsolve>evaluate (&data.fin_cen_hot_3=&fin_cen_hot_3) 
 EVALUATE: symbol $_1_DATA.FIN_CEN_HOT_3 set to    2.50000     (real)
 CNSsolve>evaluate (&data.fin_cen_cool1_3=&fin_cen_cool1_3) 
 EVALUATE: symbol $_1_DATA.FIN_CEN_COOL1_3 set to    10.0000     (real)
 CNSsolve>evaluate (&data.fin_cen_cool2_3=&fin_cen_cool2_3) 
 EVALUATE: symbol $_1_DATA.FIN_CEN_COOL2_3 set to    10.0000     (real)
 CNSsolve>evaluate (&data.fin_cen_cool3_3=&fin_cen_cool3_3) 
 EVALUATE: symbol $_1_DATA.FIN_CEN_COOL3_3 set to    10.0000     (real)
 CNSsolve>evaluate (&data.ini_bor_hot_4=&ini_bor_hot_4) 
 EVALUATE: symbol $_1_DATA.INI_BOR_HOT_4 set to    1.00000     (real)
 CNSsolve>evaluate (&data.ini_bor_cool1_4=&ini_bor_cool1_4) 
 EVALUATE: symbol $_1_DATA.INI_BOR_COOL1_4 set to    10.0000     (real)
 CNSsolve>evaluate (&data.ini_bor_cool2_4=&ini_bor_cool2_4) 
 EVALUATE: symbol $_1_DATA.INI_BOR_COOL2_4 set to    40.0000     (real)
 CNSsolve>evaluate (&data.ini_bor_cool3_4=&ini_bor_cool3_4) 
 EVALUATE: symbol $_1_DATA.INI_BOR_COOL3_4 set to    40.0000     (real)
 CNSsolve>evaluate (&data.ini_cen_hot_4=&ini_cen_hot_4) 
 EVALUATE: symbol $_1_DATA.INI_CEN_HOT_4 set to   0.250000     (real)
 CNSsolve>evaluate (&data.ini_cen_cool1_4=&ini_cen_cool1_4) 
 EVALUATE: symbol $_1_DATA.INI_CEN_COOL1_4 set to    2.50000     (real)
 CNSsolve>evaluate (&data.ini_cen_cool2_4=&ini_cen_cool2_4) 
 EVALUATE: symbol $_1_DATA.INI_CEN_COOL2_4 set to    10.0000     (real)
 CNSsolve>evaluate (&data.ini_cen_cool3_4=&ini_cen_cool3_4) 
 EVALUATE: symbol $_1_DATA.INI_CEN_COOL3_4 set to    10.0000     (real)
 CNSsolve>evaluate (&data.fin_bor_hot_4=&fin_bor_hot_4) 
 EVALUATE: symbol $_1_DATA.FIN_BOR_HOT_4 set to    10.0000     (real)
 CNSsolve>evaluate (&data.fin_bor_cool1_4=&fin_bor_cool1_4) 
 EVALUATE: symbol $_1_DATA.FIN_BOR_COOL1_4 set to    40.0000     (real)
 CNSsolve>evaluate (&data.fin_bor_cool2_4=&fin_bor_cool2_4) 
 EVALUATE: symbol $_1_DATA.FIN_BOR_COOL2_4 set to    40.0000     (real)
 CNSsolve>evaluate (&data.fin_bor_cool3_4=&fin_bor_cool3_4) 
 EVALUATE: symbol $_1_DATA.FIN_BOR_COOL3_4 set to    40.0000     (real)
 CNSsolve>evaluate (&data.fin_cen_hot_4=&fin_cen_hot_4) 
 EVALUATE: symbol $_1_DATA.FIN_CEN_HOT_4 set to    2.50000     (real)
 CNSsolve>evaluate (&data.fin_cen_cool1_4=&fin_cen_cool1_4) 
 EVALUATE: symbol $_1_DATA.FIN_CEN_COOL1_4 set to    10.0000     (real)
 CNSsolve>evaluate (&data.fin_cen_cool2_4=&fin_cen_cool2_4) 
 EVALUATE: symbol $_1_DATA.FIN_CEN_COOL2_4 set to    10.0000     (real)
 CNSsolve>evaluate (&data.fin_cen_cool3_4=&fin_cen_cool3_4) 
 EVALUATE: symbol $_1_DATA.FIN_CEN_COOL3_4 set to    10.0000     (real)
 CNSsolve>evaluate (&data.ini_bor_hot_5=&ini_bor_hot_5) 
 EVALUATE: symbol $_1_DATA.INI_BOR_HOT_5 set to    1.00000     (real)
 CNSsolve>evaluate (&data.ini_bor_cool1_5=&ini_bor_cool1_5) 
 EVALUATE: symbol $_1_DATA.INI_BOR_COOL1_5 set to    10.0000     (real)
 CNSsolve>evaluate (&data.ini_bor_cool2_5=&ini_bor_cool2_5) 
 EVALUATE: symbol $_1_DATA.INI_BOR_COOL2_5 set to    40.0000     (real)
 CNSsolve>evaluate (&data.ini_bor_cool3_5=&ini_bor_cool3_5) 
 EVALUATE: symbol $_1_DATA.INI_BOR_COOL3_5 set to    40.0000     (real)
 CNSsolve>evaluate (&data.ini_cen_hot_5=&ini_cen_hot_5) 
 EVALUATE: symbol $_1_DATA.INI_CEN_HOT_5 set to   0.250000     (real)
 CNSsolve>evaluate (&data.ini_cen_cool1_5=&ini_cen_cool1_5) 
 EVALUATE: symbol $_1_DATA.INI_CEN_COOL1_5 set to    2.50000     (real)
 CNSsolve>evaluate (&data.ini_cen_cool2_5=&ini_cen_cool2_5) 
 EVALUATE: symbol $_1_DATA.INI_CEN_COOL2_5 set to    10.0000     (real)
 CNSsolve>evaluate (&data.ini_cen_cool3_5=&ini_cen_cool3_5) 
 EVALUATE: symbol $_1_DATA.INI_CEN_COOL3_5 set to    10.0000     (real)
 CNSsolve>evaluate (&data.fin_bor_hot_5=&fin_bor_hot_5) 
 EVALUATE: symbol $_1_DATA.FIN_BOR_HOT_5 set to    10.0000     (real)
 CNSsolve>evaluate (&data.fin_bor_cool1_5=&fin_bor_cool1_5) 
 EVALUATE: symbol $_1_DATA.FIN_BOR_COOL1_5 set to    40.0000     (real)
 CNSsolve>evaluate (&data.fin_bor_cool2_5=&fin_bor_cool2_5) 
 EVALUATE: symbol $_1_DATA.FIN_BOR_COOL2_5 set to    40.0000     (real)
 CNSsolve>evaluate (&data.fin_bor_cool3_5=&fin_bor_cool3_5) 
 EVALUATE: symbol $_1_DATA.FIN_BOR_COOL3_5 set to    40.0000     (real)
 CNSsolve>evaluate (&data.fin_cen_hot_5=&fin_cen_hot_5) 
 EVALUATE: symbol $_1_DATA.FIN_CEN_HOT_5 set to    2.50000     (real)
 CNSsolve>evaluate (&data.fin_cen_cool1_5=&fin_cen_cool1_5) 
 EVALUATE: symbol $_1_DATA.FIN_CEN_COOL1_5 set to    10.0000     (real)
 CNSsolve>evaluate (&data.fin_cen_cool2_5=&fin_cen_cool2_5) 
 EVALUATE: symbol $_1_DATA.FIN_CEN_COOL2_5 set to    10.0000     (real)
 CNSsolve>evaluate (&data.fin_cen_cool3_5=&fin_cen_cool3_5) 
 EVALUATE: symbol $_1_DATA.FIN_CEN_COOL3_5 set to    10.0000     (real)
 CNSsolve>!intermolecular contacts analysis 
 CNSsolve>evaluate (&data.hb_dist=&dist_hb) 
 EVALUATE: symbol $_1_DATA.HB_DIST set to    2.50000     (real)
 CNSsolve>evaluate (&data.nb_dist=&dist_nb) 
 EVALUATE: symbol $_1_DATA.NB_DIST set to    3.90000     (real)
 CNSsolve>!water refinement 
 CNSsolve>evaluate (&refine.firstwater=&firstwater) 
 EVALUATE: symbol $_1_REFINE.FIRSTWATER set to "yes" (string)
 CNSsolve>evaluate (&refine.keepwater=&keepwater) 
 EVALUATE: symbol $_1_REFINE.KEEPWATER set to FALSE (logical)
 CNSsolve>evaluate (&refine.waterrefine=min(&structures_1,&waterrefine)) 
 EVALUATE: symbol $_1_REFINE.WATERREFINE set to    20.0000     (real)
 CNSsolve>evaluate (&refine.solvent=&solvent) 
 EVALUATE: symbol $_1_REFINE.SOLVENT set to "water" (string)
 CNSsolve>evaluate (&refine.pmrefine_on=&pmrefine_on) 
 Assuming literal string "&PMREFINE_ON"
 EVALUATE: symbol $_1_REFINE.PMREFINE_ON set to "&PMREFINE_ON" (string)
 CNSsolve>evaluate (&refine.calcdesolv=&calcdesolv) 
 EVALUATE: symbol $_1_REFINE.CALCDESOLV set to FALSE (logical)
 CNSsolve>evaluate (&refine.heatsteps=&waterheatsteps) 
 EVALUATE: symbol $_1_REFINE.HEATSTEPS set to    100.000     (real)
 CNSsolve>evaluate (&refine.steps=&watersteps) 
 EVALUATE: symbol $_1_REFINE.STEPS set to    1250.00     (real)
 CNSsolve>evaluate (&refine.coolsteps=&watercoolsteps) 
 EVALUATE: symbol $_1_REFINE.COOLSTEPS set to    500.000     (real)
 CNSsolve>!for the non-bonded parameters (the section was taken out of 
 CNSsolve>!parallhdg5.0.pro and parallhdg5.1.pro, so be careful!): 
 CNSsolve>if (&toppar.par_nonbonded eq "PROLSQ") then 
 NEXTCD: condition evaluated as false
 CNSsolve>    evaluate (&toppar.repel_radius = 1.0) 
 CNSsolve>    evaluate (&toppar.repel_rcons = 20) 
 CNSsolve>    evaluate (&toppar.repel_rexpo  = 4) 
 CNSsolve>    evaluate (&toppar.repel_irexp  = 1) 
 CNSsolve>elseif (&toppar.par_nonbonded eq "PARMALLH6") then 
 NEXTCD: condition evaluated as false
 CNSsolve>    evaluate (&toppar.repel_radius = 0.8) 
 CNSsolve>    evaluate (&toppar.repel_rcons = 5.0) 
 CNSsolve>    evaluate (&toppar.repel_rexpo  = 2) 
 CNSsolve>    evaluate (&toppar.repel_irexp  = 2) 
 CNSsolve>elseif (&toppar.par_nonbonded eq "OPLSX") then 
 NEXTCD: condition evaluated as true
 CNSsolve>    evaluate (&toppar.repel_radius = 0.0) 
 EVALUATE: symbol $_1_TOPPAR.REPEL_RADIUS set to    0.00000     (real)
 CNSsolve>else        {...now the standard PARALLHDG parameters} 
 CNSsolve>    evaluate (&toppar.repel_radius = 0.78) 
 CNSsolve>    evaluate (&toppar.repel_rcons = 5.0) 
 CNSsolve>    evaluate (&toppar.repel_rexpo  = 2) 
 CNSsolve>    evaluate (&toppar.repel_irexp  = 2) 
 CNSsolve>end if 
 CNSsolve>! Water in rigid body docking 
 CNSsolve>evaluate (&data.waterdock=&waterdock) 
 EVALUATE: symbol $_1_DATA.WATERDOCK set to FALSE (logical)
 CNSsolve>evaluate (&data.db_method=&db_method) 
 EVALUATE: symbol $_1_DATA.DB_METHOD set to "kytedoolittle" (string)
 CNSsolve>evaluate (&data.water_tokeep=&water_tokeep) 
 EVALUATE: symbol $_1_DATA.WATER_TOKEEP set to   0.250000     (real)
 CNSsolve>evaluate (&data.dnap_water_tokeep=&dnap_water_tokeep) 
 EVALUATE: symbol $_1_DATA.DNAP_WATER_TOKEEP set to   0.250000     (real)
 CNSsolve>evaluate (&data.water_randfrac=&water_randfrac) 
 EVALUATE: symbol $_1_DATA.WATER_RANDFRAC set to    0.00000     (real)
 CNSsolve>evaluate (&data.solvate_method=&solvate_method) 
 EVALUATE: symbol $_1_DATA.SOLVATE_METHOD set to "db" (string)
 CNSsolve>evaluate (&data.water_surfcutoff=&water_surfcutoff) 
 EVALUATE: symbol $_1_DATA.WATER_SURFCUTOFF set to    8.00000     (real)
 CNSsolve>evaluate (&data.water_analysis=&water_analysis) 
 EVALUATE: symbol $_1_DATA.WATER_ANALYSIS set to FALSE (logical)
 CNSsolve>evaluate (&data.transwater=&transwater) 
 EVALUATE: symbol $_1_DATA.TRANSWATER set to TRUE (logical)
 CNSsolve>evaluate (&data.water_restraint_initial=&water_restraint_initial) 
 EVALUATE: symbol $_1_DATA.WATER_RESTRAINT_INITIAL set to    5.00000     (real)
 CNSsolve>evaluate (&data.water_restraint_cutoff=&water_restraint_cutoff) 
 EVALUATE: symbol $_1_DATA.WATER_RESTRAINT_CUTOFF set to    5.00000     (real)
 CNSsolve>evaluate (&data.water_restraint_scale=&water_restraint_scale) 
 EVALUATE: symbol $_1_DATA.WATER_RESTRAINT_SCALE set to    25.0000     (real)
 CNSsolve>evaluate (&data.waterensemble=&waterensemble) 
 EVALUATE: symbol $_1_DATA.WATERENSEMBLE set to    1.00000     (real)
 CNSsolve>if (&data.waterdock eq true) then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate (&iterations.rotate180   = false) 
 CNSsolve>  evaluate (&SaProtocol.initiosteps = 0) 
 CNSsolve>  evaluate (&SaProtocol.cool1_steps = 0) 
 CNSsolve>  evaluate (&refine.keepwater = true) 
 CNSsolve>  display SOLVATED DOCKING TURNED ON: initiosteps and cool1_steps set to 0, rotate180 set to false 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>evaluate ($log_level=quiet) 
 Assuming literal string "QUIET"
 EVALUATE: symbol $LOG_LEVEL set to "QUIET" (string)
 CNSsolve>!evaluate ($log_level=verbose) 
 CNSsolve> 
 CNSsolve>if ( $log_level = verbose ) then 
 NEXTCD: condition evaluated as false
 CNSsolve>   set message=normal echo=on end 
 CNSsolve>else 
 CNSsolve>   set message=off echo=off end 
 REMARKS FILENAME="complex.psf"
 REMARKS coordinates built for atom:      IRE  1    HAA
 REMARKS coordinates built for atom:      IRE  1    HAB
 REMARKS DATE:28-Dec-2019  19:11:15       created by user: enmr
 REMARKS VERSION:1.3U
 %PARRDR-info: duplication of bond HC   NC2 
 %PARRDR-info: duplication of angle CH2P CH2E HA  
 %PARRDR-info: duplication of bond HC   NC2 
 %PARRDR-info: duplication of angle C3R  OH   HO  
 %PARRDR-info: duplication of angle CH2P CH2E HA  
 %PARRDR-info: duplication of angle HR   C3R  O3R 
 %PARRDR-info: duplication of angle HR   C3R  OH  
 %PARRDR-info: duplication of nonbonded entry H   
 %PARRDR-info: duplication of nonbonded entry HA  
 %PARRDR-info: duplication of nonbonded entry HC  
 PARRDR> end 
 %PARRDR-info: duplication of bond HC   NC2 
 %PARRDR-info: duplication of angle C3R  OH   HO  
 %PARRDR-info: duplication of angle CH2P CH2E HA  
 %PARRDR-info: duplication of angle HR   C3R  O3R 
 %PARRDR-info: duplication of angle HR   C3R  OH  
 %PARRDR-info: duplication of nonbonded entry H   
 %PARRDR-info: duplication of nonbonded entry HA  
 %PARRDR-info: duplication of nonbonded entry HC  
 %PARRDR-info: duplication of nonbonded entry HO  
 CNSsolve>parameter @@RUN:toppar/ligand.param end 
 PARRDR>! Put in this file your ligand parameters if needed 
 PARRDR>! 
 PARRDR>! 
 PARRDR>!       This file was generated by PRODRG version 070118.0614 
 PARRDR>!       PRODRG written/copyrighted by Daan van Aalten 
 PARRDR>!       and Alexander Schuettelkopf 
 PARRDR>! 
 PARRDR>!       Questions/comments to dava@davapc1.bioch.dundee.ac.uk 
 PARRDR>! 
 PARRDR>!       When using this software in a publication, cite: 
 PARRDR>!       A. W. Schuettelkopf and D. M. F. van Aalten (2004). 
 PARRDR>!       PRODRG - a tool for high-throughput crystallography 
 PARRDR>!       of protein-ligand complexes. 
 PARRDR>!       Acta Crystallogr. D60, 1355--1363. 
 PARRDR>! 
 PARRDR>! 
 PARRDR>!  *** NOTE *** IF YOU USE MORE THAN ONE PRODRG-GENERATED TOPOLOGY IN CNS, 
 PARRDR>!               PLEASE CAREFULLY READ THE FAQ AS THIS MAY CAUSE PROBLEMS 
 PARRDR>! 
 PARRDR>! 
 PARRDR>!  *** NOTE *** IF YOU WANT TO USE THIS TOPOLOGY FOR CRYSTALLOGRAPHIC 
 PARRDR>!               REFINEMENT YOU WILL NEED TO MODIFY YOUR scatter.lib. A 
 PARRDR>!               WORKING EXAMPLE CAN BE DOWNLOADED FROM 
 PARRDR>!   http://davapc1.bioch.dundee.ac.uk/programs/prodrg/stuff/scatter_1.1_mod.lib 
 PARRDR>! 
 PARRDR>! 
 PARRDR>set echo=off message=on end 
 EVALUATE: symbol $PD_X set to    1.00000     (real)
 EVALUATE: symbol $PD_V set to    16000.0     (real)
 EVALUATE: symbol $PD_V set to    18000.0     (real)
 EVALUATE: symbol $PD_V set to    12000.0     (real)
 EVALUATE: symbol $PD_V set to    12000.0     (real)
 EVALUATE: symbol $PD_V set to    16000.0     (real)
 EVALUATE: symbol $PD_V set to    18000.0     (real)
 EVALUATE: symbol $PD_V set to    17900.0     (real)
 EVALUATE: symbol $PD_V set to    18000.0     (real)
 EVALUATE: symbol $PD_V set to    16000.0     (real)
 EVALUATE: symbol $PD_V set to    16000.0     (real)
 EVALUATE: symbol $PD_V set to    12000.0     (real)
 EVALUATE: symbol $PD_V set to    18000.0     (real)
 EVALUATE: symbol $PD_V set to    20000.0     (real)
 EVALUATE: symbol $PD_V set to    20000.0     (real)
 EVALUATE: symbol $PD_V set to    20000.0     (real)
 EVALUATE: symbol $PD_V set to    18000.0     (real)
 EVALUATE: symbol $PD_V set to    20000.0     (real)
 EVALUATE: symbol $PD_V set to    12000.0     (real)
 EVALUATE: symbol $PD_V set to    20000.0     (real)
 EVALUATE: symbol $PD_V set to    20000.0     (real)
 EVALUATE: symbol $PD_V set to    20000.0     (real)
 EVALUATE: symbol $PD_V set to    20000.0     (real)
 EVALUATE: symbol $PD_V set to    20000.0     (real)
 EVALUATE: symbol $PD_V set to    20000.0     (real)
 EVALUATE: symbol $PD_V set to    20000.0     (real)
 EVALUATE: symbol $PD_V set to    18000.0     (real)
 EVALUATE: symbol $PD_V set to    17900.0     (real)
 EVALUATE: symbol $PD_V set to    18000.0     (real)
 EVALUATE: symbol $PD_V set to    20000.0     (real)
 EVALUATE: symbol $PD_V set to    20000.0     (real)
 EVALUATE: symbol $PD_V set to    20000.0     (real)
 EVALUATE: symbol $PD_V set to    20226.0     (real)
 EVALUATE: symbol $PD_V set to    20000.0     (real)
 EVALUATE: symbol $PD_V set to    20409.0     (real)
 EVALUATE: symbol $PD_V set to    20000.0     (real)
 EVALUATE: symbol $PD_V set to    20000.0     (real)
 EVALUATE: symbol $PD_V set to    880.000     (real)
 EVALUATE: symbol $PD_V set to    544.000     (real)
 EVALUATE: symbol $PD_V set to    640.000     (real)
 EVALUATE: symbol $PD_V set to    544.000     (real)
 EVALUATE: symbol $PD_V set to    880.000     (real)
 EVALUATE: symbol $PD_V set to    720.000     (real)
 EVALUATE: symbol $PD_V set to    720.000     (real)
 EVALUATE: symbol $PD_V set to    720.000     (real)
 EVALUATE: symbol $PD_V set to    720.000     (real)
 EVALUATE: symbol $PD_V set to    720.000     (real)
 EVALUATE: symbol $PD_V set to    720.000     (real)
 EVALUATE: symbol $PD_V set to    880.000     (real)
 EVALUATE: symbol $PD_V set to    880.000     (real)
 EVALUATE: symbol $PD_V set to    544.000     (real)
 EVALUATE: symbol $PD_V set to    640.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    640.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    400.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    800.000     (real)
 EVALUATE: symbol $PD_V set to    19.6000     (real)
 EVALUATE: symbol $PD_V set to    8.10000     (real)
 EVALUATE: symbol $PD_V set to    8.10000     (real)
 EVALUATE: symbol $PD_V set to    8.10000     (real)
 EVALUATE: symbol $PD_V set to    19.6000     (real)
 EVALUATE: symbol $PD_V set to    8.10000     (real)
 EVALUATE: symbol $PD_V set to    8.10000     (real)
 EVALUATE: symbol $PD_V set to    19.6000     (real)
 EVALUATE: symbol $PD_V set to    19.6000     (real)
 EVALUATE: symbol $PD_V set to    8.10000     (real)
 EVALUATE: symbol $PD_V set to    8.10000     (real)
 EVALUATE: symbol $PD_V set to    8.10000     (real)
 EVALUATE: symbol $PD_V set to    640.000     (real)
 EVALUATE: symbol $PD_V set to    640.000     (real)
 PARRDR> end 
 %PARRDR-info: duplication of bond HC   NC2 
 %PARRDR-info: duplication of angle C3R  OH   HO  
 %PARRDR-info: duplication of angle CH2P CH2E HA  
 %PARRDR-info: duplication of angle HR   C3R  O3R 
 %PARRDR-info: duplication of angle HR   C3R  OH  
 %PARRDR-info: duplication of nonbonded entry H   
 %PARRDR-info: duplication of nonbonded entry HA  
 %PARRDR-info: duplication of nonbonded entry HC  
 %PARRDR-info: duplication of nonbonded entry HO  
 CNSsolve>parameter @@RUN:toppar/fragment_probes.param end 
 ASSFIL: file fragment_probes.param opened.
 PARRDR>Remarks Parameters for Fragment-based Ligand Binding Site Mapping 
 PARRDR>Remarks created by acpype (Rev: 7268) on Mon Apr 13 10:01:53 2015 
 PARRDR> 
 PARRDR>set echo=false end 
 PARRDR> end 
 %PARRDR-info: duplication of bond CD_  C_  
 %PARRDR-info: duplication of bond CM_  CT_ 
 %PARRDR-info: duplication of bond HC   NC2 
 %PARRDR-info: duplication of angle C3R  OH   HO  
 %PARRDR-info: duplication of angle C3__ C3__ HC__
 %PARRDR-info: duplication of angle CD_  CM_  CT_ 
 %PARRDR-info: duplication of angle CH2P CH2E HA  
 %PARRDR-info: duplication of angle CM_  CT_  CT_ 
 %PARRDR-info: duplication of angle CT_  CT_  C_  
 %PARRDR-info: duplication of angle CT_  CT_  HC_ 
 %PARRDR-info: duplication of angle CT_  CT_  HP_ 
 %PARRDR-info: duplication of angle CT_  CT_  N3_ 
 %PARRDR-info: duplication of angle H1__ C3__ OH__
 %PARRDR-info: duplication of angle HP_  CT_  N3_ 
 %PARRDR-info: duplication of angle HR   C3R  O3R 
 %PARRDR-info: duplication of angle HR   C3R  OH  
 %PARRDR-info: duplication of nonbonded entry H   
 %PARRDR-info: duplication of nonbonded entry HA  
 %PARRDR-info: duplication of nonbonded entry HC  
 %PARRDR-info: duplication of nonbonded entry HO  
 CNSsolve>paramater @@RUN:toppar/hemes-allhdg.param end 
 ASSFIL: file hemes-allhdg.param opened.
 PARRDR>remark  file parallhdg.hemes 
 PARRDR> 
 PARRDR>set message off echo off end 
 PARRDR> end 
 %PARRDR-info: duplication of bond C    OC  
 %PARRDR-info: duplication of bond CD_  C_  
 %PARRDR-info: duplication of bond CM_  CT_ 
 %PARRDR-info: duplication of bond HC   NC2 
 %PARRDR-info: duplication of angle C3R  OH   HO  
 %PARRDR-info: duplication of angle C3__ C3__ HC__
 %PARRDR-info: duplication of angle CD_  CM_  CT_ 
 %PARRDR-info: duplication of angle CH2P CH2E HA  
 %PARRDR-info: duplication of angle CM_  CT_  CT_ 
 %PARRDR-info: duplication of angle CPA  NPH1 FEH 
 %PARRDR-info: duplication of angle CPA  NPH2 FEH 
 %PARRDR-info: duplication of angle CT_  CT_  C_  
 %PARRDR-info: duplication of angle CT_  CT_  HC_ 
 %PARRDR-info: duplication of angle CT_  CT_  HP_ 
 %PARRDR-info: duplication of angle CT_  CT_  N3_ 
 %PARRDR-info: duplication of angle H1__ C3__ OH__
 %PARRDR-info: duplication of angle HP_  CT_  N3_ 
 %PARRDR-info: duplication of angle HR   C3R  O3R 
 %PARRDR-info: duplication of angle HR   C3R  OH  
 %PARRDR-info: duplication of angle OC   C    OC  
 %PARRDR-info: duplication of nonbonded entry H   
 %PARRDR-info: duplication of nonbonded entry HA  
 %PARRDR-info: duplication of nonbonded entry HC  
 %PARRDR-info: duplication of nonbonded entry HO  
 %PARRDR-info: duplication of nonbonded entry HA  
 %PARRDR-info: duplication of nonbonded entry HA  
 %PARRDR-info: duplication of nonbonded entry OC  
 %PARRDR-info: duplication of nonbonded entry C   
 CNSsolve>parameter @@RUN:toppar/water-allhdg5-4.param end 
 ASSFIL: file water-allhdg5-4.param opened.
 PARRDR>remarks file toppar/water-allhdg5-4.param 
 PARRDR>remarks 
 PARRDR>remarks   PARAM19.SOL (solvent parameters) 
 PARRDR>remarks   =========== 
 PARRDR>remarks   available: TIPS3P and DMSO model 
 PARRDR> 
 PARRDR>set message ? end eval ($old_message=$result) set echo ? end eval ($old_echo=$result) 
 MESSage=NORM
 EVALUATE: symbol $OLD_MESSAGE set to "NORM" (string)
 ECHO=TRUE {ON}
 EVALUATE: symbol $OLD_ECHO set to TRUE (logical)
 PARRDR>set message=off echo=off end 
 PARRDR> end 
 %PARRDR-info: duplication of bond C    OC  
 %PARRDR-info: duplication of bond CD_  C_  
 %PARRDR-info: duplication of bond CM_  CT_ 
 %PARRDR-info: duplication of bond HC   NC2 
 %PARRDR-info: duplication of angle C3R  OH   HO  
 %PARRDR-info: duplication of angle C3__ C3__ HC__
 %PARRDR-info: duplication of angle CD_  CM_  CT_ 
 %PARRDR-info: duplication of angle CH2P CH2E HA  
 %PARRDR-info: duplication of angle CM_  CT_  CT_ 
 %PARRDR-info: duplication of angle CPA  NPH1 FEH 
 %PARRDR-info: duplication of angle CPA  NPH2 FEH 
 %PARRDR-info: duplication of angle CT_  CT_  C_  
 %PARRDR-info: duplication of angle CT_  CT_  HC_ 
 %PARRDR-info: duplication of angle CT_  CT_  HP_ 
 %PARRDR-info: duplication of angle CT_  CT_  N3_ 
 %PARRDR-info: duplication of angle H1__ C3__ OH__
 %PARRDR-info: duplication of angle HP_  CT_  N3_ 
 %PARRDR-info: duplication of angle HR   C3R  O3R 
 %PARRDR-info: duplication of angle HR   C3R  OH  
 %PARRDR-info: duplication of angle OC   C    OC  
 %PARRDR-info: duplication of nonbonded entry H   
 %PARRDR-info: duplication of nonbonded entry HA  
 %PARRDR-info: duplication of nonbonded entry HC  
 %PARRDR-info: duplication of nonbonded entry HO  
 %PARRDR-info: duplication of nonbonded entry HA  
 %PARRDR-info: duplication of nonbonded entry HA  
 %PARRDR-info: duplication of nonbonded entry OC  
 %PARRDR-info: duplication of nonbonded entry C   
 CNSsolve> 
 CNSsolve>parameter 
 PARRDR>  nbonds 
 NBDSET>    nbxmod=5 atom cdie shift 
 NBDSET>    cutnb=9.5 ctofnb=8.5 ctonnb=6.5 eps=1.0 e14fac=0.4 inhibit 0.25 
 NBDSET>    wmin=0.5 
 NBDSET>    tolerance  0.5 
 NBDSET>  end 
 PARRDR>end 
 %PARRDR-info: duplication of bond C    OC  
 %PARRDR-info: duplication of bond CD_  C_  
 %PARRDR-info: duplication of bond CM_  CT_ 
 %PARRDR-info: duplication of bond HC   NC2 
 %PARRDR-info: duplication of angle C3R  OH   HO  
 %PARRDR-info: duplication of angle C3__ C3__ HC__
 %PARRDR-info: duplication of angle CD_  CM_  CT_ 
 %PARRDR-info: duplication of angle CH2P CH2E HA  
 %PARRDR-info: duplication of angle CM_  CT_  CT_ 
 %PARRDR-info: duplication of angle CPA  NPH1 FEH 
 %PARRDR-info: duplication of angle CPA  NPH2 FEH 
 %PARRDR-info: duplication of angle CT_  CT_  C_  
 %PARRDR-info: duplication of angle CT_  CT_  HC_ 
 %PARRDR-info: duplication of angle CT_  CT_  HP_ 
 %PARRDR-info: duplication of angle CT_  CT_  N3_ 
 %PARRDR-info: duplication of angle H1__ C3__ OH__
 %PARRDR-info: duplication of angle HP_  CT_  N3_ 
 %PARRDR-info: duplication of angle HR   C3R  O3R 
 %PARRDR-info: duplication of angle HR   C3R  OH  
 %PARRDR-info: duplication of angle OC   C    OC  
 %PARRDR-info: duplication of nonbonded entry H   
 %PARRDR-info: duplication of nonbonded entry HA  
 %PARRDR-info: duplication of nonbonded entry HC  
 %PARRDR-info: duplication of nonbonded entry HO  
 %PARRDR-info: duplication of nonbonded entry HA  
 %PARRDR-info: duplication of nonbonded entry HA  
 %PARRDR-info: duplication of nonbonded entry OC  
 %PARRDR-info: duplication of nonbonded entry C   
 CNSsolve> 
 CNSsolve>igroup 
 IGROup>  interaction  (not (resn ANI or resn DAN or resn XAN)) 
 SELRPN:   2978 atoms have been selected out of   2978
 SELRPN>               (not (resn ANI or resn DAN or resn XAN)) weight * 1 end 
 SELRPN:   2978 atoms have been selected out of   2978
 IGROup>  interaction  (resn ANI or resn DAN or resn XAN) 
 SELRPN:      0 atoms have been selected out of   2978
 SELRPN>               (resn ANI or resn DAN or resn XAN) weight * 1 vdw 0.0 elec 0.0 end 
 SELRPN:      0 atoms have been selected out of   2978
 IGROup>end 
 CNSsolve> 
 CNSsolve> 
 CNSsolve>flag include bond angle impr vdw end 
 CNSsolve> 
 CNSsolve>if ($Data.flags.dihed eq true) then 
 NEXTCD: condition evaluated as true
 CNSsolve>  flag include dihed end 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>do (fbeta=$Saprotocol.fbeta) (all) 
 SELRPN:   2978 atoms have been selected out of   2978
 CNSsolve>do (mass=$Saprotocol.mass) (all) 
 SELRPN:   2978 atoms have been selected out of   2978
 CNSsolve>do (mass=1000) (resname ani) 
 SELRPN:      0 atoms have been selected out of   2978
 CNSsolve>do (mass=1000) (resname xan) 
 SELRPN:      0 atoms have been selected out of   2978
 CNSsolve>do (mass=1000) (resname dan) 
 SELRPN:      0 atoms have been selected out of   2978
 CNSsolve> 
 CNSsolve>evaluate ($end_count = $iterations.ini_count + $iterations.structures - 1) 
 EVALUATE: symbol $END_COUNT set to    20.0000     (real)
 CNSsolve> 
 CNSsolve>if ($Data.noecv eq true) then 
 NEXTCD: condition evaluated as true
 CNSsolve>  if ($iteration = 0) then 
 NEXTCD: condition evaluated as true
 CNSsolve>    evaluate ($npart = 1 + mod($count,$Data.ncvpart)) 
 EVALUATE: symbol $NPART set to    2.00000     (real)
 CNSsolve>    evaluate ($fileseed="NEWIT:" + $Filenames.fileroot + "_" + encode($count) + ".seed") 
 EVALUATE: symbol $FILESEED set to "NEWIT:complex_1.seed" (string)
 CNSsolve>    evaluate ($seed = max($iteration,1)*$count*$Saprotocol.iniseed) 
 EVALUATE: symbol $SEED set to    917.000     (real)
 CNSsolve>  else 
 CNSsolve>    evaluate ($fileseed= $file - ".pdb" + ".seed") 
 CNSsolve>    @@$fileseed (seed=$seed;npart=$npart ) 
 CNSsolve>    evaluate ($fileseed="NEWIT:" + $Filenames.fileroot + "_" + encode($count) + ".seed") 
 CNSsolve>    evaluate ($num = $count + $iterations.structures) 
 CNSsolve>    evaluate ($file_r_seed="NEWIT:" + $Filenames.fileroot + "_" + encode($num) + ".seed") 
 CNSsolve>    if ($iterations.rotate180 eq true) then 
 CNSsolve>      set display=$file_r_seed end 
 CNSsolve>      display module(seed;npart) 
 CNSsolve>      display define ( 
 CNSsolve>      display currentseed = $seed; 
 CNSsolve>      display currentpart = $npart; 
 CNSsolve>      display ) 
 CNSsolve>      display evaluate (&seed=&currentseed) 
 CNSsolve>      display evaluate (&npart=&currentpart) 
 CNSsolve>      close $file_r_seed end 
 CNSsolve>    end if 
 CNSsolve>  end if 
 CNSsolve>  set display=$fileseed end 
 ASSFIL: file complex_1.seed opened.
 CNSsolve>  display module(seed;npart) 
 CNSsolve>  display define ( 
 CNSsolve>  display currentseed = $seed; 
 CNSsolve>  display currentpart = $npart; 
 CNSsolve>  display ) 
 CNSsolve>  display evaluate (&seed=&currentseed) 
 CNSsolve>  display evaluate (&npart=&currentpart) 
 CNSsolve>  close $fileseed end 
 VCLOSE: Display file reset to OUTPUT.
 CNSsolve>else 
 CNSsolve>  evaluate ($seed = max($iteration,1)*$count*$Saprotocol.iniseed) 
 CNSsolve>end if 
 CNSsolve>set seed $seed end 
 CNSsolve> 
 CNSsolve>coor init end 
 COOR: selected main coordinates initialized
 CNSsolve>coor @@$file 
 ASSFIL: file complex_1.pdb opened.
 COOR>REMARK FILENAME="complex_1.pdb" 
 COOR>REMARK coordinates built for atom:      IRE  1    HAA 
 COOR>REMARK coordinates built for atom:      IRE  1    HAB 
 COOR>REMARK DATE:28-Dec-2019  19:11:15       created by user: enmr 
 COOR>REMARK VERSION:1.3U 
 COOR>ATOM      1  N   GLY     1     -70.467  -8.191 -49.445  1.00 10.00      A 
 COOR>ATOM      2  HN  GLY     1     -71.186  -8.657 -48.969  1.00 10.00      A 
 CNSsolve> 
 CNSsolve>! check for the presence of ions and add covalent bond 
 CNSsolve>if ($iteration = 1) then 
 NEXTCD: condition evaluated as false
 CNSsolve>  @RUN:protocols/covalions.cns 
 ASSFIL: file covalions.cns opened.
 CNSsolve>! covalions.cns 
 CNSsolve>!    Add a covalent bond between an ion and its closest coordinating atom 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve>  evaluate ($pcount = 0) 
 CNSsolve>  for $id1 in id ( name "LI+1" or name "F-1"  or name "NA+1" or name "MG+2" or name "AL+3" 
 FOR-clause=                or name "CL-1" or name "K+1"  or name "CA+2" or name "V+2"  or name "V+3" 
 FOR-clause=                or name "CR+2" or name "CR+3" or name "MN+2" or name "MN+3" or name "FE+2" 
 FOR-clause=                or name "FE+3" or name "NI+2" or name "CO+2" or name "CO+3" or name "CU+1" 
 FOR-clause=                or name "CU+2" or name "ZN+2" or name "BR-1" or name "SR+2" or name "MO+3" 
 FOR-clause=                or name "AG+1" or name "CD+2" or name "I-1"  or name "CS+2" or name "HO+3" 
 FOR-clause=                or name "YB+2" or name "YB+3" or name "OS+4" or name "IR+3" or name "PT+2" 
 FOR-clause=                or name "AU+1" or name "AU+2" or name "HG+1" or name "HG+2" or name "PB+2" 
 FOR-clause=                or name "U+3"  or name "U+4"  or name "ZN+1" or name "ZN"  ) loop ions 
 CNSsolve> 
 CNSsolve>     show (segid) (id $id1) 
 CNSsolve>     evaluate ($segid1=$result) 
 CNSsolve>     show (resid) (id $id1) 
 CNSsolve>     evaluate ($resid1=$result) 
 CNSsolve>     show (resname) (id $id1) 
 CNSsolve>     evaluate ($resname1=$result) 
 CNSsolve>     show (name) (id $id1) 
 CNSsolve>     evaluate ($name1=$result) 
 CNSsolve>     show (chem) (id $id1) 
 CNSsolve>     evaluate ($chem1=$result) 
 CNSsolve> 
 CNSsolve>     evaluate ($mindis = 7.5) 
 CNSsolve>     evaluate ($minid  = 0) 
 CNSsolve>     for $id2 in id ( (name O* or name S* or name N*) and (id $id1) around 7.5 and 
 FOR-clause=                      (resn ALA or resn ARG or resn ASN or resn ASP or resn CYS or resn GLN or resn GLU or 
 FOR-clause=                       resn GLY or resn HIS or resn ILE or resn LEU or resn LYS or resn MET or resn PHE or 
 FOR-clause=                       resn PRO or resn SER or resn THR or resn TRP or resn TYR or resn VAL or resn TYS or 
 FOR-clause=                       resn TYP or resn NEP or resn CYM or resn ADE or resn CYT or resn GUA or resn THY or 
 FOR-clause=                       resn A or resn C or resn G or resn T or resn DA or resn DC or resn DG or resn DT or 
 FOR-clause=                       resn HYP or resn CYP or resn CYM or resn CYF or resn TOP or resn TYP or resn TYS or 
 FOR-clause=                       resn SEP or resn PTR or resn HYP or resn DDZ)) loop search 
 CNSsolve> 
 CNSsolve>         pick bond (id $id1) (id $id2) geometry 
 CNSsolve> 
 CNSsolve>         if ( $result < $mindis) then 
 CNSsolve>           evaluate ($mindis = $result) 
 CNSsolve>           evaluate ($minid = $id2) 
 CNSsolve>         end if 
 CNSsolve> 
 CNSsolve>     end loop search 
 CNSsolve> 
 CNSsolve>     if ($minid> 0) then 
 CNSsolve>         show (segid) (id $minid) 
 CNSsolve>         evaluate ($segid2=$result) 
 CNSsolve>         show (resid) (id $minid) 
 CNSsolve>         evaluate ($resid2=$result) 
 CNSsolve>         show (resname) (id $minid) 
 CNSsolve>         evaluate ($resname2=$result) 
 CNSsolve>         show (name) (id $minid) 
 CNSsolve>         evaluate ($name2=$result) 
 CNSsolve>         show (chem) (id $minid) 
 CNSsolve>         evaluate ($chem2=$result) 
 CNSsolve> 
 CNSsolve>         evaluate ($pat1 = "1"+$name1) 
 CNSsolve>         evaluate ($pat2 = "2"+$name2) 
 CNSsolve>         evaluate ($pcount = $pcount + 1) 
 CNSsolve>         evaluate ($pname = "cb" + encode($pcount)) 
 CNSsolve>         topology 
 CNSsolve>           presidue $pname   ! Patch to add a covalent bond between two atoms 
 CNSsolve>             add bond $pat1 $pat2 
 CNSsolve>           end 
 CNSsolve>         end 
 CNSsolve>         patch $pname refe=1=(resid $resid1 and segid $segid1) refe=2=(resid $resid2 and segid $segid2) end 
 CNSsolve>         display COVALION: ADDED ONE COVALENT BOND BETWEEN $name1 $resid1 AND $name2 $resname2 $resid2 
 CNSsolve>     end if 
 CNSsolve> 
 CNSsolve>     param bond $chem1 $chem2 0.0 $mindis end 
 CNSsolve> 
 CNSsolve>   end loop ions 
 CNSsolve> 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>{* Find CoM of protein *} 
 CNSsolve>show ave (x) (name CA or name C1') 
 SELRPN:    303 atoms have been selected out of   2978
 SHOW: average of selected elements =     -56.652505
 CNSsolve>evaluate ($xcent=$result) 
 EVALUATE: symbol $XCENT set to   -56.6525     (real)
 CNSsolve>show ave (y) (name CA or name C1') 
 SELRPN:    303 atoms have been selected out of   2978
 SHOW: average of selected elements =      -7.290640
 CNSsolve>evaluate ($ycent=$result) 
 EVALUATE: symbol $YCENT set to   -7.29064     (real)
 CNSsolve>show ave (z) (name CA or name C1') 
 SELRPN:    303 atoms have been selected out of   2978
 SHOW: average of selected elements =     -23.985380
 CNSsolve>evaluate ($zcent=$result) 
 EVALUATE: symbol $ZCENT set to   -23.9854     (real)
 CNSsolve> 
 CNSsolve>coor select (not known and resn ani) end 
 SELRPN:      0 atoms have been selected out of   2978
 COOR: using atom subset.
 CNSsolve>if ($select gt 0) then 
 NEXTCD: condition evaluated as false
 CNSsolve>  coor @@RUN:toppar/tensor.pdb 
 CNSsolve> 
 CNSsolve>  {* Find CoM of protein and move tensor 100 A away *} 
 CNSsolve>  show ave (x) (name CA or name C1') 
 CNSsolve>  evaluate ($xcent=$result) 
 CNSsolve>  show ave (y) (name CA or name C1') 
 CNSsolve>  evaluate ($ycent=$result) 
 CNSsolve>  show ave (z) (name CA or name C1') 
 CNSsolve>  evaluate ($zcent=$result) 
 CNSsolve>  do (x=x+$xcent+100) (resn ANI) 
 CNSsolve>  do (y=y+$ycent+100) (resn ANI) 
 CNSsolve>  do (z=z+$zcent+100) (resn ANI) 
 CNSsolve>  evaluate ($rantens = true) 
 CNSsolve>else 
 CNSsolve>  evaluate ($rantens = false) 
 EVALUATE: symbol $RANTENS set to FALSE (logical)
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>coor select (not known and resn xan) end 
 SELRPN:      0 atoms have been selected out of   2978
 COOR: using atom subset.
 CNSsolve>if ($select gt 0) then 
 NEXTCD: condition evaluated as false
 CNSsolve>  coor @@RUN:toppar/tensor_para.pdb 
 CNSsolve>  evaluate ($rantens_para = true) 
 CNSsolve>else 
 CNSsolve>  evaluate ($rantens_para = false) 
 EVALUATE: symbol $RANTENS_PARA set to FALSE (logical)
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>coor select (not known and resn dan) end 
 SELRPN:      0 atoms have been selected out of   2978
 COOR: using atom subset.
 CNSsolve>if ($select gt 0) then 
 NEXTCD: condition evaluated as false
 CNSsolve>  coor @@RUN:toppar/tensor_dani.pdb 
 CNSsolve> 
 CNSsolve>  {* Find CoM of protein and move tensor 100 A away *} 
 CNSsolve>  show ave (x) (name CA or name C1') 
 CNSsolve>  evaluate ($xcent=$result) 
 CNSsolve>  show ave (y) (name CA or name C1') 
 CNSsolve>  evaluate ($ycent=$result) 
 CNSsolve>  show ave (z) (name CA or name C1') 
 CNSsolve>  evaluate ($zcent=$result) 
 CNSsolve>  do (x=x+$xcent+100) (resn DAN) 
 CNSsolve>  do (y=y+$ycent+100) (resn DAN) 
 CNSsolve>  do (z=z+$zcent+100) (resn DAN) 
 CNSsolve>  evaluate ($rantens_dani = true) 
 CNSsolve>else 
 CNSsolve>  evaluate ($rantens_dani = false) 
 EVALUATE: symbol $RANTENS_DANI set to FALSE (logical)
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>!catch possible bound water and set high T steps to 0 
 CNSsolve>coor select ((resn WAT or resn HOH or resn TIP*)) end 
 SELRPN:      0 atoms have been selected out of   2978
 COOR: using atom subset.
 CNSsolve>if ($select gt 0) then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($SaProtocol.initiosteps = 0) 
 CNSsolve>  evaluate ($SaProtocol.cool1_steps = 0) 
 CNSsolve>  evaluate ($refine.keepwater = true) 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>do (refx=x) (all) 
 SELRPN:   2978 atoms have been selected out of   2978
 CNSsolve>do (refy=y) (all) 
 SELRPN:   2978 atoms have been selected out of   2978
 CNSsolve>do (refz=z) (all) 
 SELRPN:   2978 atoms have been selected out of   2978
 CNSsolve> 
 CNSsolve>!set the energy flags: 
 CNSsolve>@@RUN:protocols/flags_new.cns(Iteration=$Iteration; Data=$Data; ) 
 ASSFIL: file flags_new.cns opened.
 CNSsolve>! flags_new.cns 
 CNSsolve>!    Defines energy flags 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * Originally adapted from Aria 1.2 from Nilges and Linge, EMBL.       * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve> 
 CNSsolve>module(Iteration; Data; ) 
 &_2_ITERATION set to $_1_ITERATION 
 &_2_DATA set to $_1_DATA 
 CNSsolve> 
 CNSsolve>if ($Data.cdih.on eq true) then 
 NEXTCD: condition evaluated as false
 CNSsolve>   evaluate ($Data.flags.cdih =  true) 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if ($Data.c1_on eq true) then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.coup =  true) 
 CNSsolve>elseif ($Data.c2_on eq true) then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.coup =  true) 
 CNSsolve>elseif ($Data.c3_on eq true) then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.coup =  true) 
 CNSsolve>elseif ($Data.c4_on eq true) then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.coup =  true) 
 CNSsolve>elseif ($Data.c5_on eq true) then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.coup =  true) 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if ($Data.rdc1_choice eq "SANI") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.sani = true) 
 CNSsolve>elseif ($Data.rdc2_choice eq "SANI") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.sani = true) 
 CNSsolve>elseif ($Data.rdc3_choice eq "SANI") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.sani = true) 
 CNSsolve>elseif ($Data.rdc4_choice eq "SANI") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.sani = true) 
 CNSsolve>elseif ($Data.rdc5_choice eq "SANI") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.sani = true) 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if ($Data.rdc1_choice eq "XRDC") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.xrdc = true) 
 CNSsolve>elseif ($Data.rdc2_choice eq "XRDC") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.xrdc = true) 
 CNSsolve>elseif ($Data.rdc3_choice eq "XRDC") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.xrdc = true) 
 CNSsolve>elseif ($Data.rdc4_choice eq "XRDC") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.xrdc = true) 
 CNSsolve>elseif ($Data.rdc5_choice eq "XRDC") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.xrdc = true) 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if ($Data.pcs1_choice eq "XPCS") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.xpcs = true) 
 CNSsolve>elseif ($Data.pcs2_choice eq "XPCS") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.xpcs = true) 
 CNSsolve>elseif ($Data.pcs3_choice eq "XPCS") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.xpcs = true) 
 CNSsolve>elseif ($Data.pcs4_choice eq "XPCS") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.xpcs = true) 
 CNSsolve>elseif ($Data.pcs5_choice eq "XPCS") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.xpcs = true) 
 CNSsolve>elseif ($Data.pcs6_choice eq "XPCS") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.xpcs = true) 
 CNSsolve>elseif ($Data.pcs7_choice eq "XPCS") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.xpcs = true) 
 CNSsolve>elseif ($Data.pcs8_choice eq "XPCS") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.xpcs = true) 
 CNSsolve>elseif ($Data.pcs9_choice eq "XPCS") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.xpcs = true) 
 CNSsolve>elseif ($Data.pcsA_choice eq "XPCS") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.xpcs = true) 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if ($Data.dan1_choice eq "DANI") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.DANI = true) 
 CNSsolve>elseif ($Data.dan2_choice eq "DANI") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.DANI = true) 
 CNSsolve>elseif ($Data.dan3_choice eq "DANI") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.DANI = true) 
 CNSsolve>elseif ($Data.dan4_choice eq "DANI") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.DANI = true) 
 CNSsolve>elseif ($Data.dan5_choice eq "DANI") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.DANI = true) 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if ($Data.flags.sani eq TRUE) then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.harm = true) 
 CNSsolve>end if 
 CNSsolve>if ($Data.flags.dani eq TRUE) then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.harm = true) 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if ($Data.rdc1_choice eq "VANGLE") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.vean = true) 
 CNSsolve>end if 
 CNSsolve>if ($Data.rdc2_choice eq "VANGLE") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.vean = true) 
 CNSsolve>end if 
 CNSsolve>if ($Data.rdc3_choice eq "VANGLE") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.vean = true) 
 CNSsolve>end if 
 CNSsolve>if ($Data.rdc4_choice eq "VANGLE") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.vean = true) 
 CNSsolve>end if 
 CNSsolve>if ($Data.rdc5_choice eq "VANGLE") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.vean = true) 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if ($Data.flags.noe  =  TRUE) then 
 NEXTCD: condition evaluated as true
 CNSsolve>   flags include noe end 
 CNSsolve>end if 
 CNSsolve>if ($Data.flags.cdih =  TRUE) then 
 NEXTCD: condition evaluated as false
 CNSsolve>   flags include cdih end 
 CNSsolve>end if 
 CNSsolve>if ($Data.flags.coup =  TRUE) then 
 NEXTCD: condition evaluated as false
 CNSsolve>   flags include coup end 
 CNSsolve>end if 
 CNSsolve>if ($Data.flags.vean =  TRUE) then 
 NEXTCD: condition evaluated as false
 CNSsolve>   flags include vean end 
 CNSsolve>end if 
 CNSsolve>if ($Data.flags.sani =  TRUE) then 
 NEXTCD: condition evaluated as false
 CNSsolve>   flags include sani end 
 CNSsolve>end if 
 CNSsolve>if ($Data.flags.xrdc =  TRUE) then 
 NEXTCD: condition evaluated as false
 CNSsolve>   flags include xrdc end 
 CNSsolve>end if 
 CNSsolve>if ($Data.flags.xpcs =  TRUE) then 
 NEXTCD: condition evaluated as false
 CNSsolve>   flags include xpcs end 
 CNSsolve>end if 
 CNSsolve>if ($Data.flags.dani =  TRUE) then 
 NEXTCD: condition evaluated as false
 CNSsolve>   flags include dani end 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if ($Data.flags.plan =  TRUE) then 
 NEXTCD: condition evaluated as false
 CNSsolve>   flags include plan end 
 CNSsolve>end if 
 CNSsolve>if ($Data.flags.ncs  =  TRUE) then 
 NEXTCD: condition evaluated as false
 CNSsolve>   flags include ncs end 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if ($Data.flags.rg = TRUE) then 
 NEXTCD: condition evaluated as false
 CNSsolve>  if ($data.rgtarg > 0) then 
 CNSsolve>    flags include coll end 
 CNSsolve>  else 
 CNSsolve>    evaluate ($Data.flags.rg = false) 
 CNSsolve>  end if 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>!read all the experimental Data: 
 CNSsolve>set seed $seed end 
 CNSsolve>set message=normal echo=on end 
 CNSsolve>if ($data.waterdock eq false) then 
 NEXTCD: condition evaluated as true
 CNSsolve>  @@RUN:protocols/read_data.cns(Iteration=$Iteration; Data=$Data; count=$count) 
 ASSFIL: file read_data.cns opened.
 CNSsolve>! read_data.cns 
 CNSsolve>!    Read the various restraints data 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * Originally adapted from Aria 1.2 from Nilges and Linge, EMBL.       * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve> 
 CNSsolve>module(Iteration; Data; count;) 
 &_2_ITERATION set to $_1_ITERATION 
 &_2_DATA set to $_1_DATA 
 &_2_COUNT set to $_1_COUNT 
 CNSsolve> 
 CNSsolve>!NOEs, hbonds 
 CNSsolve>noe 
 NOE>  reset 
 NOE>  nrestraints = 4000000     ! allocate space for NOEs 
 NOE: allocating space for 4000000 restraints.
 NOE>  ceiling 1000 
 NOE>end 
 CNSsolve> 
 CNSsolve>if (&data.amb_lastit ge &iteration) then 
 NEXTCD: condition evaluated as true
 CNSsolve>  if (&data.amb_firstit le &iteration)   then 
 NEXTCD: condition evaluated as true
 CNSsolve>     evaluate ($filenam0 = "NEWIT:ambig.tbl_" + encode($count)) 
 EVALUATE: symbol $FILENAM0 set to "NEWIT:ambig.tbl_1" (string)
 CNSsolve>     fileexist $filenam0 end 
 MISCOM: file does not exist
 CNSsolve>     if ($result eq false) then 
 NEXTCD: condition evaluated as true
 CNSsolve>       evaluate ($filenam0 = "NEWIT:ambig.tbl") 
 EVALUATE: symbol $FILENAM0 set to "NEWIT:ambig.tbl" (string)
 CNSsolve>     end if 
 CNSsolve>     noe class ambi @@$filenam0 end 
 ASSFIL: file ambig.tbl opened.
 CNSsolve>     if (&data.noecv eq true) then 
 NEXTCD: condition evaluated as true
 CNSsolve>       noe part &data.ncvpart end 
 Data are not partitioned or partitioning removed.
 CNSsolve>     end if 
 CNSsolve>  end if 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if (&data.unamb_lastit ge &iteration) then 
 NEXTCD: condition evaluated as true
 CNSsolve>  if (&data.unamb_firstit le &iteration) then 
 NEXTCD: condition evaluated as true
 CNSsolve>     noe class dist @@NEWIT:unambig.tbl end 
 ASSFIL: file unambig.tbl opened.
 NOE>assign (resid 12 and name CA and segid A) (resid 187 and name CA and segid A) 38.570 0.00 0.00 
 SELRPN:      1 atoms have been selected out of   2978
 SELRPN:      1 atoms have been selected out of   2978
 NOE>assign (resid 12 and name CA and segid A) (resid 321 and name CA and segid A) 15.107 0.00 0.00 
 SELRPN:      1 atoms have been selected out of   2978
 SELRPN:      1 atoms have been selected out of   2978
 NOE>assign (resid 186 and name CA and segid A) (resid 16 and name CA and segid A) 40.125 0.00 0.00 
 SELRPN:      1 atoms have been selected out of   2978
 SELRPN:      1 atoms have been selected out of   2978
 NOE>assign (resid 186 and name CA and segid A) (resid 321 and name CA and segid A) 35.810 0.00 0.00 
 SELRPN:      1 atoms have been selected out of   2978
 SELRPN:      1 atoms have been selected out of   2978
 NOE>assign (resid 318 and name CA and segid A) (resid 16 and name CA and segid A) 15.128 0.00 0.00 
 SELRPN:      1 atoms have been selected out of   2978
 SELRPN:      1 atoms have been selected out of   2978
 NOE>assign (resid 318 and name CA and segid A) (resid 187 and name CA and segid A) 34.370 0.00 0.00 
 SELRPN:      1 atoms have been selected out of   2978
 SELRPN:      1 atoms have been selected out of   2978
 NOE> end 
 CNSsolve>  end if 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if (&data.hbond_lastit ge &iteration) then 
 NEXTCD: condition evaluated as true
 CNSsolve>  if (&data.hbond_firstit le &iteration) then 
 NEXTCD: condition evaluated as false
 CNSsolve>    if (&data.hbonds_on eq true) then 
 CNSsolve>      noe @@RUN:data/hbonds/hbonds.tbl end 
 CNSsolve>    end if 
 CNSsolve>  end if 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>noe 
 NOE>  averaging  * sum 
 NOE>  potential  * soft 
 NOE>  scale      * 1.0 
 NOE>  sqconstant * 1.0 
 NOE>  sqexponent * 2 
 NOE>  soexponent * 1 
 NOE>  rswitch    * 1.0 
 NOE>  sqoffset   * 0.0 
 NOE>  asymptote  * 2.0 
 NOE>  msoexponent * 1 
 NOE>  masymptote  * -0.1 
 NOE>  mrswitch    * 1.0 
 NOE>  avexpo hbond 20 
 NOE>end 
 CNSsolve> 
 CNSsolve> 
 CNSsolve>!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 
 CNSsolve>!dihedral restraints: 
 CNSsolve>restraints dihedral 
 DIHEDRAL>   reset 
 DIHEDRAL>   nassign 10000 
 RSTDIH: allocating space for   10000 assignments.
 DIHEDRAL>end 
 CNSsolve>if (&Data.cdih.on eq true) then 
 NEXTCD: condition evaluated as false
 CNSsolve>  restraints dihedral 
 CNSsolve>    @@RUN:data/dihedrals/dihedrals.tbl 
 CNSsolve>  end 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>restraints dihedral ? end 
 Total number of dihedral angle restraints=     0
  overall scale =    1.0000
 Number of dihedral angle restraints=    0
 RMS deviation=   0.000
 CNSsolve>!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 
 CNSsolve>!jcouplings: 
 CNSsolve>evaluate ($jcouplings_on = false) 
 EVALUATE: symbol $JCOUPLINGS_ON set to FALSE (logical)
 CNSsolve>if (&data.c1_on eq true) then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate($jcouplings_on = true) 
 CNSsolve>elseif (&data.c2_on eq true) then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate($jcouplings_on = true) 
 CNSsolve>elseif (&data.c3_on eq true) then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate($jcouplings_on = true) 
 CNSsolve>elseif (&data.c4_on eq true) then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate($jcouplings_on = true) 
 CNSsolve>elseif (&data.c5_on eq true) then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate($jcouplings_on = true) 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if ($jcouplings_on eq true) then 
 NEXTCD: condition evaluated as false
 CNSsolve>  couplings reset end 
 CNSsolve>  couplings 
 CNSsolve>    nres 500   !number of restraints for allocating memory 
 CNSsolve>    if (&data.c1_on eq true) then 
 CNSsolve>      class c1 
 CNSsolve>      potential harmonic 
 CNSsolve>      {degen 1} 
 CNSsolve>      force 1.0    !1 energy constant 
 CNSsolve>      coefficients &data.c1_karplusa &data.c1_karplusb &data.c1_karplusc &data.c1_karplusd 
 CNSsolve>      evaluate ($loadnow = "RUN:" + "data/jcouplings/c1.tbl") 
 CNSsolve>      @@$loadnow 
 CNSsolve>    end if 
 CNSsolve>    if (&data.c2_on eq true) then 
 CNSsolve>      class c2 
 CNSsolve>      potential harmonic 
 CNSsolve>      {degen 1} 
 CNSsolve>      force 1.0    !1 energy constant 
 CNSsolve>      coefficients &data.c2_karplusa &data.c2_karplusb &data.c2_karplusc &data.c2_karplusd 
 CNSsolve>      evaluate ($loadnow = "RUN:" + "data/jcouplings/c2.tbl") 
 CNSsolve>      @@$loadnow 
 CNSsolve>    end if 
 CNSsolve>    if (&data.c3_on eq true) then 
 CNSsolve>      class c3 
 CNSsolve>      potential harmonic 
 CNSsolve>      {degen 1} 
 CNSsolve>      force 1.0    !1 energy constant 
 CNSsolve>      coefficients &data.c3_karplusa &data.c3_karplusb &data.c3_karplusc &data.c3_karplusd 
 CNSsolve>      evaluate ($loadnow = "RUN:" + "data/jcouplings/c3.tbl") 
 CNSsolve>      @@$loadnow 
 CNSsolve>    end if 
 CNSsolve>    if (&data.c4_on eq true) then 
 CNSsolve>      class c4 
 CNSsolve>      potential harmonic 
 CNSsolve>      {degen 1} 
 CNSsolve>      force 1.0    !1 energy constant 
 CNSsolve>      coefficients &data.c4_karplusa &data.c4_karplusb &data.c4_karplusc &data.c4_karplusd 
 CNSsolve>      evaluate ($loadnow = "RUN:" + "data/jcouplings/c4.tbl") 
 CNSsolve>      @@$loadnow 
 CNSsolve>    end if 
 CNSsolve>    if (&data.c5_on eq true) then 
 CNSsolve>      class c5 
 CNSsolve>      potential harmonic 
 CNSsolve>      {degen 1} 
 CNSsolve>      force 1.0    !1 energy constant 
 CNSsolve>      coefficients &data.c5_karplusa &data.c5_karplusb &data.c5_karplusc &data.c5_karplusd 
 CNSsolve>      evaluate ($loadnow = "RUN:" + "data/jcouplings/c5.tbl") 
 CNSsolve>      @@$loadnow 
 CNSsolve>    end if 
 CNSsolve>  end 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 
 CNSsolve>!residual dipolar couplings: 
 CNSsolve> 
 CNSsolve>evaluate (&data.flags.sani = false) 
 EVALUATE: symbol $_1_DATA.FLAGS.SANI set to FALSE (logical)
 CNSsolve>evaluate (&data.flags.xrdc = false) 
 EVALUATE: symbol $_1_DATA.FLAGS.XRDC set to FALSE (logical)
 CNSsolve>evaluate (&data.flags.xpcs = false) 
 EVALUATE: symbol $_1_DATA.FLAGS.XPCS set to FALSE (logical)
 CNSsolve>evaluate (&data.flags.dani = false) 
 EVALUATE: symbol $_1_DATA.FLAGS.DANI set to FALSE (logical)
 CNSsolve>evaluate (&data.flags.vean = false) 
 EVALUATE: symbol $_1_DATA.FLAGS.VEAN set to FALSE (logical)
 CNSsolve>evaluate ($inisani=0) 
 EVALUATE: symbol $INISANI set to    0.00000     (real)
 CNSsolve>evaluate ($inixrdc=0) 
 EVALUATE: symbol $INIXRDC set to    0.00000     (real)
 CNSsolve>evaluate ($inixpcs=0) 
 EVALUATE: symbol $INIXPCS set to    0.00000     (real)
 CNSsolve>evaluate ($inidani=0) 
 EVALUATE: symbol $INIDANI set to    0.00000     (real)
 CNSsolve>evaluate ($inivean = 0) 
 EVALUATE: symbol $INIVEAN set to    0.00000     (real)
 CNSsolve> 
 CNSsolve>if (&data.rdc1_lastit ge &iteration) then 
 NEXTCD: condition evaluated as true
 CNSsolve>  if (&data.rdc1_firstit le &iteration) then 
 NEXTCD: condition evaluated as true
 CNSsolve>    if (&data.rdc1_choice eq "SANI") then 
 NEXTCD: condition evaluated as false
 CNSsolve>      evaluate (&data.flags.sani = true) 
 CNSsolve>      sani reset nres=500 end 
 CNSsolve>      evaluate ($inisani=1) 
 CNSsolve>      sani 
 CNSsolve>        class rdc1 
 CNSsolve>        force 0.0 
 CNSsolve>        potential square 
 CNSsolve>        @@RUN:data/rdcs/rdc1.tbl 
 CNSsolve>      end 
 CNSsolve>    end if 
 CNSsolve>    if (&data.rdc1_choice eq "XRDC") then 
 NEXTCD: condition evaluated as false
 CNSsolve>      evaluate (&data.flags.xrdc = true) 
 CNSsolve>      xrdc reset nres=500 end 
 CNSsolve>      evaluate ($inixrdc=1) 
 CNSsolve>      xrdc 
 CNSsolve>        class rdc1 
 CNSsolve>        force 0.0 
 CNSsolve>        @@RUN:data/rdcs/rdc1.tbl 
 CNSsolve>      end 
 CNSsolve>    end if 
 CNSsolve>    if (&data.rdc1_choice eq "VANGLE") then 
 NEXTCD: condition evaluated as false
 CNSsolve>      evaluate (&data.flags.vean = true) 
 CNSsolve>      vean reset nrestraints=10000 end 
 CNSsolve>      evaluate ($inivean = 1) 
 CNSsolve>      if (&data.rdc1_firstIt le &iteration) then 
 CNSsolve>        vean 
 CNSsolve>          class vea1 
 CNSsolve>          force 0.0 0.0 
 CNSsolve>          @@RUN:data/rdcs/rdc1.tbl 
 CNSsolve>        end 
 CNSsolve>      end if 
 CNSsolve>    end if 
 CNSsolve>  end if 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if (&data.rdc2_lastit ge &iteration) then 
 NEXTCD: condition evaluated as true
 CNSsolve>  if (&data.rdc2_firstit le &iteration) then 
 NEXTCD: condition evaluated as true
 CNSsolve>    if (&data.rdc2_choice eq "SANI") then 
 NEXTCD: condition evaluated as false
 CNSsolve>      evaluate (&data.flags.sani = true) 
 CNSsolve>      if ($inisani = 0) then 
 CNSsolve>        sani reset nres=500 end 
 CNSsolve>        evaluate ($inisani=1) 
 CNSsolve>      end if 
 CNSsolve>      sani 
 CNSsolve>        class rdc2 
 CNSsolve>        force 0.0 
 CNSsolve>        potential square 
 CNSsolve>        @@RUN:data/rdcs/rdc2.tbl 
 CNSsolve>      end 
 CNSsolve>    end if 
 CNSsolve>    if (&data.rdc2_choice eq "XRDC") then 
 NEXTCD: condition evaluated as false
 CNSsolve>      evaluate (&data.flags.xrdc = true) 
 CNSsolve>      if ($inixrdc = 0) then 
 CNSsolve>        xrdc reset nres=500 end 
 CNSsolve>        evaluate ($inixrdc=1) 
 CNSsolve>      end if 
 CNSsolve>      xrdc 
 CNSsolve>        class rdc2 
 CNSsolve>        force 0.0 
 CNSsolve>        @@RUN:data/rdcs/rdc2.tbl 
 CNSsolve>      end 
 CNSsolve>    end if 
 CNSsolve>    if (&data.rdc2_choice eq "VANGLE") then 
 NEXTCD: condition evaluated as false
 CNSsolve>      evaluate (&data.flags.vean = true) 
 CNSsolve>      if ($inivean = 0) then 
 CNSsolve>        vean reset nrestraints=10000 end 
 CNSsolve>        evaluate ($inivean = 1) 
 CNSsolve>      end if 
 CNSsolve>      if (&data.rdc2_firstIt le &iteration) then 
 CNSsolve>        vean 
 CNSsolve>          class vea2 
 CNSsolve>          force 0.0 0.0 
 CNSsolve>          @@RUN:data/rdcs/rdc2.tbl 
 CNSsolve>        end 
 CNSsolve>      end if 
 CNSsolve>    end if 
 CNSsolve>  end if 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if (&data.rdc3_lastit ge &iteration) then 
 NEXTCD: condition evaluated as true
 CNSsolve>  if (&data.rdc3_firstit le &iteration) then 
 NEXTCD: condition evaluated as true
 CNSsolve>    if (&data.rdc3_choice eq "SANI") then 
 NEXTCD: condition evaluated as false
 CNSsolve>      evaluate (&data.flags.sani = true) 
 CNSsolve>      if ($inisani = 0) then 
 CNSsolve>        sani reset nres=500 end 
 CNSsolve>        evaluate ($inisani=1) 
 CNSsolve>      end if 
 CNSsolve>      sani 
 CNSsolve>        class rdc3 
 CNSsolve>        force 0.0 
 CNSsolve>        potential square 
 CNSsolve>        @@RUN:data/rdcs/rdc3.tbl 
 CNSsolve>      end 
 CNSsolve>    end if 
 CNSsolve>    if (&data.rdc3_choice eq "XRDC") then 
 NEXTCD: condition evaluated as false
 CNSsolve>      evaluate (&data.flags.xrdc = true) 
 CNSsolve>      if ($inixrdc = 0) then 
 CNSsolve>        xrdc reset nres=500 end 
 CNSsolve>        evaluate ($inixrdc=1) 
 CNSsolve>      end if 
 CNSsolve>      xrdc 
 CNSsolve>        class rdc3 
 CNSsolve>        force 0.0 
 CNSsolve>        @@RUN:data/rdcs/rdc3.tbl 
 CNSsolve>      end 
 CNSsolve>    end if 
 CNSsolve>    if (&data.rdc3_choice eq "VANGLE") then 
 NEXTCD: condition evaluated as false
 CNSsolve>      evaluate (&data.flags.vean = true) 
 CNSsolve>      if ($inivean = 0) then 
 CNSsolve>        vean reset nrestraints=10000 end 
 CNSsolve>        evaluate ($inivean = 1) 
 CNSsolve>      end if 
 CNSsolve>      if (&data.rdc3_firstIt le &iteration) then 
 CNSsolve>        vean 
 CNSsolve>          class vea3 
 CNSsolve>          force 0.0 0.0 
 CNSsolve>          @@RUN:data/rdcs/rdc3.tbl 
 CNSsolve>        end 
 CNSsolve>      end if 
 CNSsolve>    end if 
 CNSsolve>  end if 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if (&data.rdc4_lastit ge &iteration) then 
 NEXTCD: condition evaluated as true
 CNSsolve>  if (&data.rdc4_firstit le &iteration) then 
 NEXTCD: condition evaluated as true
 CNSsolve>    if (&data.rdc4_choice eq "SANI") then 
 NEXTCD: condition evaluated as false
 CNSsolve>      evaluate (&data.flags.sani = true) 
 CNSsolve>      if ($inisani = 0) then 
 CNSsolve>        sani reset nres=500 end 
 CNSsolve>        evaluate ($inisani=1) 
 CNSsolve>      end if 
 CNSsolve>      sani 
 CNSsolve>        class rdc4 
 CNSsolve>        force 0.0 
 CNSsolve>        potential square 
 CNSsolve>        @@RUN:data/rdcs/rdc4.tbl 
 CNSsolve>      end 
 CNSsolve>    end if 
 CNSsolve>    if (&data.rdc4_choice eq "XRDC") then 
 NEXTCD: condition evaluated as false
 CNSsolve>      evaluate (&data.flags.xrdc = true) 
 CNSsolve>      if ($inixrdc = 0) then 
 CNSsolve>        xrdc reset nres=500 end 
 CNSsolve>        evaluate ($inixrdc=1) 
 CNSsolve>      end if 
 CNSsolve>      xrdc 
 CNSsolve>        class rdc4 
 CNSsolve>        force 0.0 
 CNSsolve>        @@RUN:data/rdcs/rdc4.tbl 
 CNSsolve>      end 
 CNSsolve>    end if 
 CNSsolve>    if (&data.rdc4_choice eq "VANGLE") then 
 NEXTCD: condition evaluated as false
 CNSsolve>      evaluate (&data.flags.vean = true) 
 CNSsolve>      if ($inivean = 0) then 
 CNSsolve>        vean reset nrestraints=10000 end 
 CNSsolve>        evaluate ($inivean = 1) 
 CNSsolve>      end if 
 CNSsolve>      if (&data.rdc4_firstIt le &iteration) then 
 CNSsolve>        vean 
 CNSsolve>          class vea4 
 CNSsolve>          force 0.0 0.0 
 CNSsolve>          @@RUN:data/rdcs/rdc4.tbl 
 CNSsolve>        end 
 CNSsolve>      end if 
 CNSsolve>    end if 
 CNSsolve>  end if 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if (&data.rdc5_lastit ge &iteration) then 
 NEXTCD: condition evaluated as true
 CNSsolve>  if (&data.rdc5_firstit le &iteration) then 
 NEXTCD: condition evaluated as true
 CNSsolve>    if (&data.rdc5_choice eq "SANI") then 
 NEXTCD: condition evaluated as false
 CNSsolve>      evaluate (&data.flags.sani = true) 
 CNSsolve>      if ($inisani = 0) then 
 CNSsolve>        sani reset nres=500 end 
 CNSsolve>        evaluate ($inisani=1) 
 CNSsolve>      end if 
 CNSsolve>      sani 
 CNSsolve>        class rdc5 
 CNSsolve>        force 0.0 
 CNSsolve>        potential square 
 CNSsolve>        @@RUN:data/rdcs/rdc5.tbl 
 CNSsolve>      end 
 CNSsolve>    end if 
 CNSsolve>    if (&data.rdc5_choice eq "XRDC") then 
 NEXTCD: condition evaluated as false
 CNSsolve>      evaluate (&data.flags.xrdc = true) 
 CNSsolve>      if ($inixrdc = 0) then 
 CNSsolve>        xrdc reset nres=500 end 
 CNSsolve>        evaluate ($inixrdc=1) 
 CNSsolve>      end if 
 CNSsolve>      xrdc 
 CNSsolve>        class rdc5 
 CNSsolve>        force 0.0 
 CNSsolve>        @@RUN:data/rdcs/rdc5.tbl 
 CNSsolve>      end 
 CNSsolve>    end if 
 CNSsolve>    if (&data.rdc5_choice eq "VANGLE") then 
 NEXTCD: condition evaluated as false
 CNSsolve>      evaluate (&data.flags.vean = true) 
 CNSsolve>      if ($inivean = 0) then 
 CNSsolve>        vean reset nrestraints=10000 end 
 CNSsolve>        evaluate ($inivean = 1) 
 CNSsolve>      end if 
 CNSsolve>      if (&data.rdc5_firstIt le &iteration) then 
 CNSsolve>        vean 
 CNSsolve>          class vea5 
 CNSsolve>          force 0.0 0.0 
 CNSsolve>          @@RUN:data/rdcs/rdc5.tbl 
 CNSsolve>        end 
 CNSsolve>      end if 
 CNSsolve>    end if 
 CNSsolve>  end if 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if (&data.pcs1_lastit ge &iteration) then 
 NEXTCD: condition evaluated as true
 CNSsolve>  if (&data.pcs1_firstit le &iteration) then 
 NEXTCD: condition evaluated as true
 CNSsolve>    if (&data.pcs1_choice eq "XPCS") then 
 NEXTCD: condition evaluated as false
 CNSsolve>      evaluate (&data.flags.xpcs = true) 
 CNSsolve>      xpcs reset nres=5000 end 
 CNSsolve>      evaluate ($inixpcs=1) 
 CNSsolve>      xpcs 
 CNSsolve>        class pcs1 
 CNSsolve>        force 0.0 
 CNSsolve>        @@RUN:data/pcs/pcs1.tbl 
 CNSsolve>      end 
 CNSsolve>    end if 
 CNSsolve>  end if 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if (&data.pcs2_lastit ge &iteration) then 
 NEXTCD: condition evaluated as true
 CNSsolve>  if (&data.pcs2_firstit le &iteration) then 
 NEXTCD: condition evaluated as true
 CNSsolve>    if (&data.pcs2_choice eq "XPCS") then 
 NEXTCD: condition evaluated as false
 CNSsolve>      evaluate (&data.flags.xpcs = true) 
 CNSsolve>      if ($inixpcs = 0) then 
 CNSsolve>        xpcs reset nres=5000 end 
 CNSsolve>        evaluate ($inixpcs=1) 
 CNSsolve>      end if 
 CNSsolve>      xpcs 
 CNSsolve>        class pcs2 
 CNSsolve>        force 0.0 
 CNSsolve>        @@RUN:data/pcs/pcs2.tbl 
 CNSsolve>      end 
 CNSsolve>    end if 
 CNSsolve>  end if 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if (&data.pcs3_lastit ge &iteration) then 
 NEXTCD: condition evaluated as true
 CNSsolve>  if (&data.pcs3_firstit le &iteration) then 
 NEXTCD: condition evaluated as true
 CNSsolve>    if (&data.pcs3_choice eq "XPCS") then 
 NEXTCD: condition evaluated as false
 CNSsolve>      evaluate (&data.flags.xpcs = true) 
 CNSsolve>      if ($inixpcs = 0) then 
 CNSsolve>        xpcs reset nres=5000 end 
 CNSsolve>        evaluate ($inixpcs=1) 
 CNSsolve>      end if 
 CNSsolve>      xpcs 
 CNSsolve>        class pcs3 
 CNSsolve>        force 0.0 
 CNSsolve>        @@RUN:data/pcs/pcs3.tbl 
 CNSsolve>      end 
 CNSsolve>    end if 
 CNSsolve>  end if 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if (&data.pcs4_lastit ge &iteration) then 
 NEXTCD: condition evaluated as true
 CNSsolve>  if (&data.pcs4_firstit le &iteration) then 
 NEXTCD: condition evaluated as true
 CNSsolve>    if (&data.pcs4_choice eq "XPCS") then 
 NEXTCD: condition evaluated as false
 CNSsolve>      evaluate (&data.flags.xpcs = true) 
 CNSsolve>      if ($inixpcs = 0) then 
 CNSsolve>        xpcs reset nres=5000 end 
 CNSsolve>        evaluate ($inixpcs=1) 
 CNSsolve>      end if 
 CNSsolve>      xpcs 
 CNSsolve>        class pcs4 
 CNSsolve>        force 0.0 
 CNSsolve>        @@RUN:data/pcs/pcs4.tbl 
 CNSsolve>      end 
 CNSsolve>    end if 
 CNSsolve>  end if 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if (&data.pcs5_lastit ge &iteration) then 
 NEXTCD: condition evaluated as true
 CNSsolve>  if (&data.pcs5_firstit le &iteration) then 
 NEXTCD: condition evaluated as true
 CNSsolve>    if (&data.pcs5_choice eq "XPCS") then 
 NEXTCD: condition evaluated as false
 CNSsolve>      evaluate (&data.flags.xpcs = true) 
 CNSsolve>      if ($inixpcs = 0) then 
 CNSsolve>        xpcs reset nres=5000 end 
 CNSsolve>        evaluate ($inixpcs=1) 
 CNSsolve>      end if 
 CNSsolve>      xpcs 
 CNSsolve>        class pcs5 
 CNSsolve>        force 0.0 
 CNSsolve>        @@RUN:data/pcs/pcs5.tbl 
 CNSsolve>      end 
 CNSsolve>    end if 
 CNSsolve>  end if 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if (&data.pcs6_lastit ge &iteration) then 
 NEXTCD: condition evaluated as true
 CNSsolve>  if (&data.pcs6_firstit le &iteration) then 
 NEXTCD: condition evaluated as true
 CNSsolve>    if (&data.pcs6_choice eq "XPCS") then 
 NEXTCD: condition evaluated as false
 CNSsolve>      evaluate (&data.flags.xpcs = true) 
 CNSsolve>      if ($inixpcs = 0) then 
 CNSsolve>        xpcs reset nres=5000 end 
 CNSsolve>        evaluate ($inixpcs=1) 
 CNSsolve>      end if 
 CNSsolve>      xpcs 
 CNSsolve>        class pcs6 
 CNSsolve>        force 0.0 
 CNSsolve>        @@RUN:data/pcs/pcs6.tbl 
 CNSsolve>      end 
 CNSsolve>    end if 
 CNSsolve>  end if 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if (&data.pcs7_lastit ge &iteration) then 
 NEXTCD: condition evaluated as true
 CNSsolve>  if (&data.pcs7_firstit le &iteration) then 
 NEXTCD: condition evaluated as true
 CNSsolve>    if (&data.pcs7_choice eq "XPCS") then 
 NEXTCD: condition evaluated as false
 CNSsolve>      evaluate (&data.flags.xpcs = true) 
 CNSsolve>      if ($inixpcs = 0) then 
 CNSsolve>        xpcs reset nres=5000 end 
 CNSsolve>        evaluate ($inixpcs=1) 
 CNSsolve>      end if 
 CNSsolve>      xpcs 
 CNSsolve>        class pcs7 
 CNSsolve>        force 0.0 
 CNSsolve>        @@RUN:data/pcs/pcs7.tbl 
 CNSsolve>      end 
 CNSsolve>    end if 
 CNSsolve>  end if 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if (&data.pcs8_lastit ge &iteration) then 
 NEXTCD: condition evaluated as true
 CNSsolve>  if (&data.pcs8_firstit le &iteration) then 
 NEXTCD: condition evaluated as true
 CNSsolve>    if (&data.pcs8_choice eq "XPCS") then 
 NEXTCD: condition evaluated as false
 CNSsolve>      evaluate (&data.flags.xpcs = true) 
 CNSsolve>      if ($inixpcs = 0) then 
 CNSsolve>        xpcs reset nres=5000 end 
 CNSsolve>        evaluate ($inixpcs=1) 
 CNSsolve>      end if 
 CNSsolve>      xpcs 
 CNSsolve>        class pcs8 
 CNSsolve>        force 0.0 
 CNSsolve>        @@RUN:data/pcs/pcs8.tbl 
 CNSsolve>      end 
 CNSsolve>    end if 
 CNSsolve>  end if 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if (&data.pcs9_lastit ge &iteration) then 
 NEXTCD: condition evaluated as true
 CNSsolve>  if (&data.pcs9_firstit le &iteration) then 
 NEXTCD: condition evaluated as true
 CNSsolve>    if (&data.pcs9_choice eq "XPCS") then 
 NEXTCD: condition evaluated as false
 CNSsolve>      evaluate (&data.flags.xpcs = true) 
 CNSsolve>      if ($inixpcs = 0) then 
 CNSsolve>        xpcs reset nres=5000 end 
 CNSsolve>        evaluate ($inixpcs=1) 
 CNSsolve>      end if 
 CNSsolve>      xpcs 
 CNSsolve>        class pcs9 
 CNSsolve>        force 0.0 
 CNSsolve>        @@RUN:data/pcs/pcs9.tbl 
 CNSsolve>      end 
 CNSsolve>    end if 
 CNSsolve>  end if 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if (&data.pcsA_lastit ge &iteration) then 
 NEXTCD: condition evaluated as true
 CNSsolve>  if (&data.pcsA_firstit le &iteration) then 
 NEXTCD: condition evaluated as true
 CNSsolve>    if (&data.pcsA_choice eq "XPCS") then 
 NEXTCD: condition evaluated as false
 CNSsolve>      evaluate (&data.flags.xpcs = true) 
 CNSsolve>      if ($inixpcs = 0) then 
 CNSsolve>        xpcs reset nres=5000 end 
 CNSsolve>        evaluate ($inixpcs=1) 
 CNSsolve>      end if 
 CNSsolve>      xpcs 
 CNSsolve>        class pcsA 
 CNSsolve>        force 0.0 
 CNSsolve>        @@RUN:data/pcs/pcsA.tbl 
 CNSsolve>      end 
 CNSsolve>    end if 
 CNSsolve>  end if 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve> 
 CNSsolve>evaluate ($tensread = false) 
 EVALUATE: symbol $TENSREAD set to FALSE (logical)
 CNSsolve>if (&data.flags.xrdc = true) then 
 NEXTCD: condition evaluated as false
 CNSsolve>  noe 
 CNSsolve>    class tens 
 CNSsolve>    @@RUN:data/tensor/tensor.tbl 
 CNSsolve>    potential tens square 
 CNSsolve>    scale     tens 500.0 
 CNSsolve>  end 
 CNSsolve>  evaluate ($tensread = true) 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if (&data.flags.xpcs = true) then 
 NEXTCD: condition evaluated as false
 CNSsolve>  if ($tensread eq FALSE) then 
 CNSsolve>    noe 
 CNSsolve>      class tens 
 CNSsolve>      @@RUN:data/tensor/tensor.tbl 
 CNSsolve>      potential tens square 
 CNSsolve>      scale     tens 500.0 
 CNSsolve>    end 
 CNSsolve>  end if 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if (&data.dan1_lastit ge &iteration) then 
 NEXTCD: condition evaluated as true
 CNSsolve>  if (&data.dan1_firstit le &iteration) then 
 NEXTCD: condition evaluated as true
 CNSsolve>    if (&data.dan1_choice eq "DANI") then 
 NEXTCD: condition evaluated as false
 CNSsolve>      evaluate (&data.flags.dani = true) 
 CNSsolve>      dani reset nres=500 end 
 CNSsolve>      evaluate ($inidani=1) 
 CNSsolve>      dani 
 CNSsolve>        class dan1 
 CNSsolve>        force 0.0 
 CNSsolve>        potential square 
 CNSsolve>        @@RUN:data/dani/dani1.tbl 
 CNSsolve>      end 
 CNSsolve>    end if 
 CNSsolve>  end if 
 CNSsolve>end if 
 CNSsolve>if (&data.dan2_lastit ge &iteration) then 
 NEXTCD: condition evaluated as true
 CNSsolve>  if (&data.dan2_firstit le &iteration) then 
 NEXTCD: condition evaluated as true
 CNSsolve>    if (&data.dan2_choice eq "DANI") then 
 NEXTCD: condition evaluated as false
 CNSsolve>      evaluate (&data.flags.dani = true) 
 CNSsolve>      dani reset nres=500 end 
 CNSsolve>      evaluate ($inidani=1) 
 CNSsolve>      dani 
 CNSsolve>        class dan2 
 CNSsolve>        force 0.0 
 CNSsolve>        potential square 
 CNSsolve>        @@RUN:data/dani/dani2.tbl 
 CNSsolve>      end 
 CNSsolve>    end if 
 CNSsolve>  end if 
 CNSsolve>end if 
 CNSsolve>if (&data.dan3_lastit ge &iteration) then 
 NEXTCD: condition evaluated as true
 CNSsolve>  if (&data.dan3_firstit le &iteration) then 
 NEXTCD: condition evaluated as false
 CNSsolve>    if (&data.dan3_choice eq "DANI") then 
 CNSsolve>      evaluate (&data.flags.dani = true) 
 CNSsolve>      dani reset nres=500 end 
 CNSsolve>      evaluate ($inidani=1) 
 CNSsolve>      dani 
 CNSsolve>        class dan3 
 CNSsolve>        force 0.0 
 CNSsolve>        potential square 
 CNSsolve>        @@RUN:data/dani/dani3.tbl 
 CNSsolve>      end 
 CNSsolve>    end if 
 CNSsolve>  end if 
 CNSsolve>end if 
 CNSsolve>if (&data.dan4_lastit ge &iteration) then 
 NEXTCD: condition evaluated as true
 CNSsolve>  if (&data.dan4_firstit le &iteration) then 
 NEXTCD: condition evaluated as true
 CNSsolve>    if (&data.dan4_choice eq "DANI") then 
 NEXTCD: condition evaluated as false
 CNSsolve>      evaluate (&data.flags.dani = true) 
 CNSsolve>      dani reset nres=500 end 
 CNSsolve>      evaluate ($inidani=1) 
 CNSsolve>      dani 
 CNSsolve>        class dan4 
 CNSsolve>        force 0.0 
 CNSsolve>        potential square 
 CNSsolve>        @@RUN:data/dani/dani4.tbl 
 CNSsolve>      end 
 CNSsolve>    end if 
 CNSsolve>  end if 
 CNSsolve>end if 
 CNSsolve>if (&data.dan5_lastit ge &iteration) then 
 NEXTCD: condition evaluated as true
 CNSsolve>  if (&data.dan5_firstit le &iteration) then 
 NEXTCD: condition evaluated as true
 CNSsolve>    if (&data.dan5_choice eq "DANI") then 
 NEXTCD: condition evaluated as false
 CNSsolve>      evaluate (&data.flags.dani = true) 
 CNSsolve>      dani reset nres=500 end 
 CNSsolve>      evaluate ($inidani=1) 
 CNSsolve>      dani 
 CNSsolve>        class dan5 
 CNSsolve>        force 0.0 
 CNSsolve>        potential square 
 CNSsolve>        @@RUN:data/dani/dani5.tbl 
 CNSsolve>      end 
 CNSsolve>    end if 
 CNSsolve>  end if 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>{* ======================= calculate free molecules internal energy *} 
 CNSsolve> 
 CNSsolve>flag excl noe dani sani vean xrdc xpcs coll cdih end 
 CNSsolve> 
 CNSsolve>evaluate ($elec = 0.0) 
 EVALUATE: symbol $ELEC set to    0.00000     (real)
 CNSsolve>evaluate ($esolfree = 0.0) 
 EVALUATE: symbol $ESOLFREE set to    0.00000     (real)
 CNSsolve>evaluate ($eintfree = 0.0) 
 EVALUATE: symbol $EINTFREE set to    0.00000     (real)
 CNSsolve>if ($iteration = 0) then 
 NEXTCD: condition evaluated as true
 CNSsolve>  if ($Data.flags.elec0 eq true) then 
 NEXTCD: condition evaluated as true
 CNSsolve>    flag include elec end 
 CNSsolve>  end if 
 CNSsolve>end if 
 CNSsolve>if ($iteration = 1) then 
 NEXTCD: condition evaluated as false
 CNSsolve>  if ($Data.flags.elec1 eq true) then 
 CNSsolve>    flag include elec end 
 CNSsolve>  end if 
 CNSsolve>end if 
 CNSsolve>if ($Data.dielec eq rdie) then 
 NEXTCD: condition evaluated as false
 CNSsolve>  parameter nbonds eps=$Data.epsilon rdie shift switch end end 
 CNSsolve>  ! shift statement needed first to activate switch (CNS bug?) 
 CNSsolve>else 
 CNSsolve>  parameter nbonds eps=$Data.epsilon cdie end end 
 %PARRDR-info: duplication of bond C    OC  
 %PARRDR-info: duplication of bond CD_  C_  
 %PARRDR-info: duplication of bond CM_  CT_ 
 %PARRDR-info: duplication of bond HC   NC2 
 %PARRDR-info: duplication of angle C3R  OH   HO  
 %PARRDR-info: duplication of angle C3__ C3__ HC__
 %PARRDR-info: duplication of angle CD_  CM_  CT_ 
 %PARRDR-info: duplication of angle CH2P CH2E HA  
 %PARRDR-info: duplication of angle CM_  CT_  CT_ 
 %PARRDR-info: duplication of angle CPA  NPH1 FEH 
 %PARRDR-info: duplication of angle CPA  NPH2 FEH 
 %PARRDR-info: duplication of angle CT_  CT_  C_  
 %PARRDR-info: duplication of angle CT_  CT_  HC_ 
 %PARRDR-info: duplication of angle CT_  CT_  HP_ 
 %PARRDR-info: duplication of angle CT_  CT_  N3_ 
 %PARRDR-info: duplication of angle H1__ C3__ OH__
 %PARRDR-info: duplication of angle HP_  CT_  N3_ 
 %PARRDR-info: duplication of angle HR   C3R  O3R 
 %PARRDR-info: duplication of angle HR   C3R  OH  
 %PARRDR-info: duplication of angle OC   C    OC  
 %PARRDR-info: duplication of nonbonded entry H   
 %PARRDR-info: duplication of nonbonded entry HA  
 %PARRDR-info: duplication of nonbonded entry HC  
 %PARRDR-info: duplication of nonbonded entry HO  
 %PARRDR-info: duplication of nonbonded entry HA  
 %PARRDR-info: duplication of nonbonded entry HA  
 %PARRDR-info: duplication of nonbonded entry OC  
 %PARRDR-info: duplication of nonbonded entry C   
 CNSsolve>end if 
 CNSsolve>parameter nbonds ? end end 
 -----nonbonded-list-options-------------------------------
 | CUTNb=   9.500 TOLErance=   0.500 WMIN=   0.500 ATOM   |
 | INHIbit=   0.250                                       |
 -----electrostatic options--------------------------------
 | EPS=  10.000 E14Fac=   0.400 CDIElectric POTEN SHIFt   |
 -----van der Waals options--------------------------------
 | VSWItch                                                |
 -----switching /shifting parameters-----------------------
 | CTONNB=   6.500 CTOFNB=   8.500                        |
 -----exclusion list options-------------------------------
 | NBXMOD=   5                                            |
 ----------------------------------------------------------
 %PARRDR-info: duplication of bond C    OC  
 %PARRDR-info: duplication of bond CD_  C_  
 %PARRDR-info: duplication of bond CM_  CT_ 
 %PARRDR-info: duplication of bond HC   NC2 
 %PARRDR-info: duplication of angle C3R  OH   HO  
 %PARRDR-info: duplication of angle C3__ C3__ HC__
 %PARRDR-info: duplication of angle CD_  CM_  CT_ 
 %PARRDR-info: duplication of angle CH2P CH2E HA  
 %PARRDR-info: duplication of angle CM_  CT_  CT_ 
 %PARRDR-info: duplication of angle CPA  NPH1 FEH 
 %PARRDR-info: duplication of angle CPA  NPH2 FEH 
 %PARRDR-info: duplication of angle CT_  CT_  C_  
 %PARRDR-info: duplication of angle CT_  CT_  HC_ 
 %PARRDR-info: duplication of angle CT_  CT_  HP_ 
 %PARRDR-info: duplication of angle CT_  CT_  N3_ 
 %PARRDR-info: duplication of angle H1__ C3__ OH__
 %PARRDR-info: duplication of angle HP_  CT_  N3_ 
 %PARRDR-info: duplication of angle HR   C3R  O3R 
 %PARRDR-info: duplication of angle HR   C3R  OH  
 %PARRDR-info: duplication of angle OC   C    OC  
 %PARRDR-info: duplication of nonbonded entry H   
 %PARRDR-info: duplication of nonbonded entry HA  
 %PARRDR-info: duplication of nonbonded entry HC  
 %PARRDR-info: duplication of nonbonded entry HO  
 %PARRDR-info: duplication of nonbonded entry HA  
 %PARRDR-info: duplication of nonbonded entry HA  
 %PARRDR-info: duplication of nonbonded entry OC  
 %PARRDR-info: duplication of nonbonded entry C   
 CNSsolve>inline @RUN:protocols/calc_free-ene.cns 
 ASSFIL: file calc_free-ene.cns opened.
 CNSsolve>! calc_free-ene.cns 
 CNSsolve>!    Calculate the total energy of the separated components 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve>!move molecules far apart 
 CNSsolve> 
 CNSsolve>@RUN:protocols/separate.cns(Data=$Data; Toppar=$Toppar) 
 ASSFIL: file separate.cns opened.
 CNSsolve>! separate.cns 
 CNSsolve>!    Separate molecules in space 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve>Module(Data;Toppar;) 
 &_3_DATA set to $_2_DATA 
 &_3_TOPPAR set to $_2_TOPPAR 
 CNSsolve> 
 CNSsolve>  evaluate ($spacing=50) 
 EVALUATE: symbol $SPACING set to    50.0000     (real)
 CNSsolve>  evaluate ($trdis=$spacing/2) 
 EVALUATE: symbol $TRDIS set to    25.0000     (real)
 CNSsolve>  evaluate ($trc=sqrt($spacing**2 - $trdis**2)) 
 EVALUATE: symbol $TRC set to    43.3013     (real)
 CNSsolve>  evaluate ($trd=sqrt($spacing**2 - $trdis**2)) 
 EVALUATE: symbol $TRD set to    43.3013     (real)
 CNSsolve> 
 CNSsolve>  evaluate ($ncount = 0) 
 EVALUATE: symbol $NCOUNT set to    0.00000     (real)
 CNSsolve> 
 CNSsolve>  while ($ncount < $data.ncomponents) loop nsloop1 
 NEXTCD: condition evaluated as true
 CNSsolve>    evaluate ($ncount = $ncount + 1) 
 EVALUATE: symbol $NCOUNT set to    1.00000     (real)
 CNSsolve>    eval($watersegname_$ncount="WAT" + encode($ncount)) 
 EVALUATE: symbol $WATERSEGNAME_1 set to "WAT1" (string)
 CNSsolve>    coor orient sele=(segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount) end 
 SELRPN:   2945 atoms have been selected out of   2978
 COOR: using atom subset.
 MOMENTS
 338564.63677373 -55565.19314395 -71552.14784716
                 607981.43570294  67855.27943932
                                 245092.18554871


 Oriented coordinate set r' related to original set r by r'=R*r  + T
 Translation vector T = (   13.4176    0.4461   60.6920)

 Rotation matrix =
    0.206811    0.951562   -0.227506
   -0.394980    0.293945    0.870395
    0.895109   -0.090147    0.436639
 Corresp. Eulerian angles (theta1,theta2,theta3)    84.2491   64.1103  345.3516
 Corresp. spherical polar angles (psi,phi,kappa)   124.1653  125.5018  268.2062
 Corresp. rotation angle    91.7938 about axis       0.4805    0.5616    0.6736
 Corresp. quaternions     0.6960    0.3450    0.4033    0.4837

 CNSsolve>    do (xcomp = x) (segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount) 
 SELRPN:   2945 atoms have been selected out of   2978
 CNSsolve>    do (ycomp = y) (segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount) 
 SELRPN:   2945 atoms have been selected out of   2978
 CNSsolve>    do (zcomp = z) (segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount) 
 SELRPN:   2945 atoms have been selected out of   2978
 CNSsolve>  end loop nsloop1 
 CNSsolve>  while ($ncount < $data.ncomponents) loop nsloop1 
 NEXTCD: condition evaluated as true
 CNSsolve>    evaluate ($ncount = $ncount + 1) 
 EVALUATE: symbol $NCOUNT set to    2.00000     (real)
 CNSsolve>    eval($watersegname_$ncount="WAT" + encode($ncount)) 
 EVALUATE: symbol $WATERSEGNAME_2 set to "WAT2" (string)
 CNSsolve>    coor orient sele=(segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount) end 
 SELRPN:     33 atoms have been selected out of   2978
 COOR: using atom subset.
 MOMENTS
    507.33972982    161.22617691   -271.22764852
                    245.58754656    -75.16388716
                                    164.82630957


 Oriented coordinate set r' related to original set r by r'=R*r  + T
 Translation vector T = (    3.1766   -1.6154  -10.0684)

 Rotation matrix =
    0.447272   -0.348659   -0.823641
    0.227683    0.934936   -0.272130
    0.864932   -0.065813    0.497555
 Corresp. Eulerian angles (theta1,theta2,theta3)    85.6487   60.1616  251.7165
 Corresp. spherical polar angles (psi,phi,kappa)    19.9271  109.6962   63.9037
 Corresp. rotation angle    63.9037 about axis      -0.1149    0.9401   -0.3209
 Corresp. quaternions     0.8485   -0.0608    0.4975   -0.1698

 CNSsolve>    do (xcomp = x) (segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount) 
 SELRPN:     33 atoms have been selected out of   2978
 CNSsolve>    do (ycomp = y) (segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount) 
 SELRPN:     33 atoms have been selected out of   2978
 CNSsolve>    do (zcomp = z) (segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount) 
 SELRPN:     33 atoms have been selected out of   2978
 CNSsolve>  end loop nsloop1 
 CNSsolve>  while ($ncount < $data.ncomponents) loop nsloop1 
 NEXTCD: condition evaluated as false
 CNSsolve>    evaluate ($ncount = $ncount + 1) 
 CNSsolve>    eval($watersegname_$ncount="WAT" + encode($ncount)) 
 CNSsolve>    coor orient sele=(segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount) end 
 CNSsolve>    do (xcomp = x) (segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount) 
 CNSsolve>    do (ycomp = y) (segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount) 
 CNSsolve>    do (zcomp = z) (segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount) 
 CNSsolve>  end loop nsloop1 
 CNSsolve> 
 CNSsolve>  do (x = xcomp) (not (resn DAN or resn ANI or resn XAN)) 
 SELRPN:   2978 atoms have been selected out of   2978
 CNSsolve>  do (y = ycomp) (not (resn DAN or resn ANI or resn XAN)) 
 SELRPN:   2978 atoms have been selected out of   2978
 CNSsolve>  do (z = zcomp) (not (resn DAN or resn ANI or resn XAN)) 
 SELRPN:   2978 atoms have been selected out of   2978
 CNSsolve> 
 CNSsolve>  if ($data.ncomponents>1) then 
 NEXTCD: condition evaluated as true
 CNSsolve>    show max (x) (segid $Toppar.prot_segid_1 or segid $watersegname_1) 
 SELRPN:   2945 atoms have been selected out of   2978
 SHOW: maximum of selected elements =      32.022026
 CNSsolve>    evaluate ($xt = -$trdis - $result ) 
 EVALUATE: symbol $XT set to   -57.0220     (real)
 CNSsolve>    coor trans sele=(segid $Toppar.prot_segid_1 or segid $watersegname_1) vector=($xt,0,0) end 
 SELRPN:   2945 atoms have been selected out of   2978
 COOR: using atom subset.
 COOR: translation vector =(   -57.022000    0.000000    0.000000 )
 COOR: selected coordinates translated
 CNSsolve>    show min (x) (segid $Toppar.prot_segid_2 or segid $watersegname_2) 
 SELRPN:     33 atoms have been selected out of   2978
 SHOW: minimum of selected elements =      -8.347754
 CNSsolve>    evaluate ($xt = $trdis - $result ) 
 EVALUATE: symbol $XT set to    33.3478     (real)
 CNSsolve>    coor trans sele=(segid $Toppar.prot_segid_2 or segid $watersegname_2) vector=($xt,0,0) end 
 SELRPN:     33 atoms have been selected out of   2978
 COOR: using atom subset.
 COOR: translation vector =(    33.347800    0.000000    0.000000 )
 COOR: selected coordinates translated
 CNSsolve>  end if 
 CNSsolve>  if ($data.ncomponents>2) then 
 NEXTCD: condition evaluated as false
 CNSsolve>    show min (y) (segid $Toppar.prot_segid_3 or segid $watersegname_3) 
 CNSsolve>    evaluate ($yt = $trc - $result ) 
 CNSsolve>    coor trans sele=(segid $Toppar.prot_segid_3 or segid $watersegname_3) vector=(0,$yt,0) end 
 CNSsolve>  end if 
 CNSsolve>  if ($data.ncomponents>3) then 
 NEXTCD: condition evaluated as false
 CNSsolve>    show min (y) (segid $Toppar.prot_segid_4 or segid $watersegname_4) 
 CNSsolve>    evaluate ($yt = 0.5 * ($trc - $result) ) 
 CNSsolve>    show min (z) (segid $Toppar.prot_segid_4 or segid $watersegname_4) 
 CNSsolve>    evaluate ($zt = $trd - $result ) 
 CNSsolve>    coor trans sele=(segid $Toppar.prot_segid_4 or segid $watersegname_4) vector=(0,$yt,$zt) end 
 CNSsolve>  end if 
 CNSsolve>  if ($data.ncomponents>4) then 
 NEXTCD: condition evaluated as false
 CNSsolve>    show min (y) (segid $Toppar.prot_segid_5 or segid $watersegname_5) 
 CNSsolve>    evaluate ($yt = 0.5 * ($trc - $result) ) 
 CNSsolve>    show min (z) (segid $Toppar.prot_segid_5 or segid $watersegname_5) 
 CNSsolve>    evaluate ($zt = -($trd - $result) ) 
 CNSsolve>    coor trans sele=(segid $Toppar.prot_segid_5 or segid $watersegname_5) vector=(0,$yt,$zt) end 
 CNSsolve>  end if 
 CNSsolve>  if ($data.ncomponents>5) then 
 NEXTCD: condition evaluated as false
 CNSsolve>    evaluate ($ncount = 0) 
 CNSsolve>    while ($ncount < $data.ncomponents) loop nsloop2 
 CNSsolve>      evaluate ($ncount = $ncount +1) 
 CNSsolve>      show ave (x) (segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount) 
 CNSsolve>      evaluate ($xdis=-$result) 
 CNSsolve>      show ave (y) (segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount) 
 CNSsolve>      evaluate ($ydis=-$result) 
 CNSsolve>      show ave (z) (segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount) 
 CNSsolve>      evaluate ($zdis=-$result) 
 CNSsolve>      coor trans sele=(segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount) vector=($xdis,$ydis,$zdis) end 
 CNSsolve>    end loop nsloop2 
 CNSsolve> 
 CNSsolve>    show max (x) (segid $Toppar.prot_segid_1 or segid $watersegname_1) 
 CNSsolve>    evaluate ($xt = -$trdis - $result ) 
 CNSsolve>    coor trans sele=(segid $Toppar.prot_segid_1 or segid $watersegname_1) vector=($xt,0,0) end 
 CNSsolve>    show min (x) (segid $Toppar.prot_segid_2 or segid $watersegname_2) 
 CNSsolve>    evaluate ($xt = $trdis - $result ) 
 CNSsolve>    coor trans sele=(segid $Toppar.prot_segid_2 or segid $watersegname_2) vector=($xt,0,0) end 
 CNSsolve>    show max (y) (segid $Toppar.prot_segid_3 or segid $watersegname_3) 
 CNSsolve>    evaluate ($yt = -$trdis - $result ) 
 CNSsolve>    coor trans sele=(segid $Toppar.prot_segid_3 or segid $watersegname_3) vector=(0,$yt,0) end 
 CNSsolve>    show min (y) (segid $Toppar.prot_segid_4 or segid $watersegname_4) 
 CNSsolve>    evaluate ($yt = $trdis - $result ) 
 CNSsolve>    coor trans sele=(segid $Toppar.prot_segid_4 or segid $watersegname_4) vector=(0,$yt,0) end 
 CNSsolve>    show max (z) (segid $Toppar.prot_segid_5 or segid $watersegname_5) 
 CNSsolve>    evaluate ($zt = -$trdis - $result ) 
 CNSsolve>    coor trans sele=(segid $Toppar.prot_segid_5 or segid $watersegname_5) vector=(0,0,$zt) end 
 CNSsolve>    show min (z) (segid $Toppar.prot_segid_6 or segid $watersegname_6) 
 CNSsolve>    evaluate ($zt = $trdis - $result ) 
 CNSsolve>    coor trans sele=(segid $Toppar.prot_segid_6 or segid $watersegname_6) vector=(0,0,$zt) end 
 CNSsolve>  end if 
 CNSsolve> 
 CNSsolve>  do (x = refx) (resn ANI or resn DAN or resn XAN) 
 SELRPN:      0 atoms have been selected out of   2978
 CNSsolve>  do (y = refy) (resn ANI or resn DAN or resn XAN) 
 SELRPN:      0 atoms have been selected out of   2978
 CNSsolve>  do (z = refz) (resn ANI or resn DAN or resn XAN) 
 SELRPN:      0 atoms have been selected out of   2978
 CNSsolve> 
 CNSsolve> 
 CNSsolve>do (x = refx) (resn ANI or resn DAN or resn XAN) 
 SELRPN:      0 atoms have been selected out of   2978
 CNSsolve>do (y = refy) (resn ANI or resn DAN or resn XAN) 
 SELRPN:      0 atoms have been selected out of   2978
 CNSsolve>do (z = refz) (resn ANI or resn DAN or resn XAN) 
 SELRPN:      0 atoms have been selected out of   2978
 CNSsolve> 
 CNSsolve>igroup 
 IGROup>  interaction  (not (resn ANI or resn DAN or resn XAN)) 
 SELRPN:   2978 atoms have been selected out of   2978
 SELRPN>               (not (resn ANI or resn DAN or resn XAN)) weight * 1 end 
 SELRPN:   2978 atoms have been selected out of   2978
 IGROup>  interaction  (resn ANI or resn DAN or resn XAN) 
 SELRPN:      0 atoms have been selected out of   2978
 SELRPN>               (resn ANI or resn DAN or resn XAN) weight * 1 vdw 0.0 elec 0.0 end 
 SELRPN:      0 atoms have been selected out of   2978
 IGROup>end 
 CNSsolve> 
 CNSsolve>evaluate ($eintfree = 0.0) 
 EVALUATE: symbol $EINTFREE set to    0.00000     (real)
 CNSsolve>if ($iteration > 0) then 
 NEXTCD: condition evaluated as false
 CNSsolve>  @RUN:protocols/flex_segment_back.cns 
 ASSFIL: file flex_segment_back.cns opened.
 CNSsolve>! flex_segment_back.cns 
 CNSsolve>!    Define the semi-flexible segments (both side-chains and backbone) 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve> 
 CNSsolve>do (store5 = 0) (all) 
 CNSsolve>do (store6 = 0) (all) 
 CNSsolve>do (store7 = 0) (all) 
 CNSsolve> 
 CNSsolve>!first flexible segments for docking 
 CNSsolve>evaluate($nchain1 = 0) 
 CNSsolve>while ($nchain1 < $data.ncomponents) loop nloop1 
 CNSsolve>  evaluate($nchain1 = $nchain1 + 1) 
 CNSsolve>  evaluate($fcounter=0) 
 CNSsolve> 
 CNSsolve>  if ($Toppar.nseg_$nchain1 = 0) then 
 CNSsolve>    display NO FLEXIBLE SEGMENTS for molecule $nchain1 
 CNSsolve>  else 
 CNSsolve>    if ($Toppar.nseg_$nchain1 < 0) then 
 CNSsolve>      display AUTOMATIC DEFINITION OF FLEXIBLE SEGMENTS BASED ON INTERMOLECULAR PROXIMITY FOR MOLECULE $nchain1 
 CNSsolve>      inline @RUN:protocols/flexauto-neighbors.cns 
 ASSFIL: file flexauto-neighbors.cns opened.
 CNSsolve>! flexauto-neighbors.cns 
 CNSsolve>!    Automatic definition of flexible segments for docking for contacting residues 
 CNSsolve>!    including neighboring residues of residues making contacts 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve> 
 CNSsolve>evaluate ($flcut = 5.0) 
 CNSsolve> 
 CNSsolve>do (store5 = $nchain1) (byres (segid $Toppar.prot_segid_$nchain1 
 CNSsolve>                               and (not segid $Toppar.prot_segid_$nchain1) around $flcut)) 
 CNSsolve>do (store7 = $nchain1) (byres (segid $Toppar.prot_segid_$nchain1 
 CNSsolve>                               and (not segid $Toppar.prot_segid_$nchain1) around $flcut)) 
 CNSsolve> 
 CNSsolve>do (store6 = 0) (segid $Toppar.prot_segid_$nchain1) 
 CNSsolve>for $id in id (tag and attr store5 >0 and not ((resn WAT or resn HOH or resn TIP*) or resn DMSO) and segid $Toppar.prot_segid_$nchain1) loop flexres1 
 CNSsolve>    show (resid) (id $id) 
 CNSsolve>    evaluate ($inres = decode($result)) 
 CNSsolve>    evaluate ($preres = $inres) 
 CNSsolve>    evaluate ($nexres = $inres) 
 CNSsolve>    if ($iteration = 1) then 
 CNSsolve>      evaluate ($preres = $preres - 1) 
 CNSsolve>!      evaluate ($nexres = $nexres + 1) 
 CNSsolve>    end if 
 CNSsolve>    do (store6 = $nchain1) (resid $preres and segid $Toppar.prot_segid_$nchain1) 
 CNSsolve>    do (store6 = $nchain1) (resid $nexres and segid $Toppar.prot_segid_$nchain1) 
 CNSsolve>end loop flexres1 
 CNSsolve> 
 CNSsolve>do (store5 = store6) (segid $Toppar.prot_segid_$nchain1) 
 CNSsolve>do (store7 = store6) (segid $Toppar.prot_segid_$nchain1) 
 CNSsolve> 
 CNSsolve>display THE FOLLOWING RESIDUES HAVE BEEN DEFINED AS FLEXIBLE for molecule $nchain1 
 CNSsolve>for $id in id (tag and attr store5 >0 and not ((resn WAT or resn HOH or resn TIP*) or resn DMSO) and segid $Toppar.prot_segid_$nchain1) loop flexres2 
 CNSsolve>    show (resid) (id $id) 
 CNSsolve>    evaluate ($inres = $result) 
 CNSsolve>    show (resn) (id $id) 
 CNSsolve>    evaluate ($nares = $result) 
 CNSsolve>    show (segid) (id $id) 
 CNSsolve>    evaluate ($seres = $result) 
 CNSsolve>    display AUTOMATICALLY SELECTED SEGMENT: $nares,$inres,$seres 
 CNSsolve>end loop flexres2 
 CNSsolve> 
 CNSsolve>    else 
 CNSsolve>      display FLEXIBLE SIDE-CHAINS SEGMENTS for molecule $nchain1 
 CNSsolve>      while ($fcounter < $Toppar.nseg_$nchain1) loop Xflex 
 CNSsolve>        evaluate($fcounter=$fcounter + 1) 
 CNSsolve>        do (store5 = $nchain1) ( resid $Toppar.start_seg_$nchain1_$fcounter : $Toppar.end_seg_$nchain1_$fcounter 
 CNSsolve>                                 and segid $Toppar.prot_segid_$nchain1) 
 CNSsolve>        display FLEXIBLE SEGMENT NR $fcounter FROM $Toppar.start_seg_$nchain1_$fcounter TO $Toppar.end_seg_$nchain1_$fcounter 
 CNSsolve>      end loop Xflex 
 CNSsolve>    end if 
 CNSsolve>  end if 
 CNSsolve>end loop nloop1 
 CNSsolve> 
 CNSsolve>!then fully flexible segments for all stages 
 CNSsolve>evaluate($nchain1 = 0) 
 CNSsolve>while ($nchain1 < $data.ncomponents) loop nloop2 
 CNSsolve>  evaluate($nchain1 = $nchain1 + 1) 
 CNSsolve>  if ($Toppar.nfle_$nchain1 = 0) then 
 CNSsolve>    display NO FULLY FLEXIBLE SEGMENTS for molecule $nchain1 
 CNSsolve>  else 
 CNSsolve>    display FULLY FLEXIBLE SEGMENTS for molecule $nchain1 
 CNSsolve>    evaluate($fcounter=0) 
 CNSsolve>    while ($fcounter < $Toppar.nfle_$nchain1) loop Xfflex 
 CNSsolve>      evaluate($fcounter=$fcounter + 1) 
 CNSsolve>      do (store5 = $nchain1) ( resid $Toppar.start_fle_$nchain1_$fcounter : $Toppar.end_fle_$nchain1_$fcounter 
 CNSsolve>                               and segid $Toppar.prot_segid_$nchain1 ) 
 CNSsolve>      display FULLY FLEXIBLE SEGMENT NR $fcounter FROM $Toppar.start_fle_$nchain1_$fcounter TO $Toppar.end_fle_$nchain1_$fcounter 
 CNSsolve>    end loop Xfflex 
 CNSsolve>  end if 
 CNSsolve>end loop nloop2 
 CNSsolve> 
 CNSsolve>do (store5 = 7) ((resn WAT or resn HOH or resn TIP*)) 
 CNSsolve>evaluate ($nfletot = 0) 
 CNSsolve> 
 CNSsolve>! check number of flexible residues per molecule 
 CNSsolve>evaluate($nchain1 = 0) 
 CNSsolve>while ($nchain1 < $data.ncomponents) loop nloop3 
 CNSsolve>  evaluate($nchain1 = $nchain1 + 1) 
 CNSsolve>  do (store6 = 0) (all) 
 CNSsolve>  do (store6 = 1) (tag and (attr store5 = $nchain1)) 
 CNSsolve>  show sum (store6) (all) 
 CNSsolve>  evaluate ($numfle=$result) 
 CNSsolve>  do (store6 = 0) (all) 
 CNSsolve>  do (store6 = 1) (tag and segid $Toppar.prot_segid_$nchain1 and not (attr store5 = $nchain1)) 
 CNSsolve>  show sum (store6) (all) 
 CNSsolve>  evaluate ($numrig=$result) 
 CNSsolve>  do (store6 = 0) (all) 
 CNSsolve>  do (store6 = 1) (tag and segid $Toppar.prot_segid_$nchain1) 
 CNSsolve>  show sum (store6) (all) 
 CNSsolve>  evaluate ($numres=$result) 
 CNSsolve>  display FLEXIBILITY STATISTIC FOR MOLECULE $nchain1 : Nres=$numres Nrigid=$numrig Nflex=$numfle 
 CNSsolve>  evaluate ($nfletot = $nfletot + $numfle) 
 CNSsolve>end loop nloop3 
 CNSsolve> 
 CNSsolve>do (store1 = 0) (all) 
 CNSsolve>do (store1 = 1) ((resn WAT or resn HOH or resn TIP*) and name OH2) 
 CNSsolve>show sum (store1) ((resn WAT or resn HOH or resn TIP*)) 
 CNSsolve>evaluate ($nfletot = $nfletot + $result) 
 CNSsolve> 
 CNSsolve>evaluate ($nfletot = $nfletot + 10) 
 CNSsolve>  fix sele=(((attr store5 = 0) or resn ANI or resn DAN or resn XAN) and not name H* and not (resn WAT or resn HOH or resn TIP*)) end 
 CNSsolve>  minimize powell nstep=200 drop=10.0 nprint=25 end 
 CNSsolve>  fix sele=(not all) end 
 CNSsolve>  energy end 
 CNSsolve>  evaluate ($eintfree = $bond + $angl + $impr + $dihe + $vdw + $elec) 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>display FREE MOLECULES INTERNAL ENERGY = $eintfree 
FREE MOLECULES INTERNAL ENERGY = 0
 CNSsolve> 
 CNSsolve>{====>} {* define ASA-based solvation parameters *} 
 CNSsolve>inline @RUN:protocols/def_solv_param.cns 
 ASSFIL: file def_solv_param.cns opened.
 CNSsolve>! def_solv_param.cns 
 CNSsolve>!    Define atomic solvation parameters taken from Fernandez-Recio et al. JMB 335:843 (2004) 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve>evaluate ($arofac = 6.26) 
 EVALUATE: symbol $AROFAC set to    6.26000     (real)
 CNSsolve>evaluate ($alifac = 1.27) 
 EVALUATE: symbol $ALIFAC set to    1.27000     (real)
 CNSsolve>evaluate ($polfac = 2.30) 
 EVALUATE: symbol $POLFAC set to    2.30000     (real)
 CNSsolve>do (store1 =  0.0000) (all) 
 SELRPN:   2978 atoms have been selected out of   2978
 CNSsolve>do (store1 =  0.0151 * $alifac) (name C*) 
 SELRPN:   1581 atoms have been selected out of   2978
 CNSsolve>do (store1 =  0.0176 * $arofac) ((name CG* or name CD* or name CE* or name CH* or name CZ*) and (resn PHE or resn TYR or resn HIS or resn TRP)) 
 SELRPN:    177 atoms have been selected out of   2978
 CNSsolve>do (store1 = -0.0170 * $polfac) (name N*) 
 SELRPN:    410 atoms have been selected out of   2978
 CNSsolve>do (store1 = -0.0548 * $polfac) (name NT* or (name NZ* and resn LYS)) 
 SELRPN:     21 atoms have been selected out of   2978
 CNSsolve>do (store1 = -0.0273 * $polfac) (name NH* and resn ARG) 
 SELRPN:     30 atoms have been selected out of   2978
 CNSsolve>do (store1 = -0.0136 * $polfac) (name O*) 
 SELRPN:    449 atoms have been selected out of   2978
 CNSsolve>do (store1 = -0.0185 * $polfac) (name OG* or name OH) 
 SELRPN:     38 atoms have been selected out of   2978
 CNSsolve>do (store1 = -0.0299 * $polfac) ((name OD* and resn ASP) or (name OE* and resn GLU)) 
 SELRPN:     88 atoms have been selected out of   2978
 CNSsolve>do (store1 =  0.0112 * $polfac) (name S*) 
 SELRPN:     18 atoms have been selected out of   2978
 CNSsolve>do (store1 =  0.0022 * $polfac) ((name S* and attr charge = -0.3) or (name SD and resn MET)) 
 SELRPN:     12 atoms have been selected out of   2978
 CNSsolve> 
 CNSsolve>{====>} {* buried surface area *} 
 CNSsolve>evaluate ($esolfree = 0) 
 EVALUATE: symbol $ESOLFREE set to    0.00000     (real)
 CNSsolve>evaluate ($nchain1 = 1) 
 EVALUATE: symbol $NCHAIN1 set to    1.00000     (real)
 CNSsolve>evaluate ($saafree = 0) 
 EVALUATE: symbol $SAAFREE set to    0.00000     (real)
 CNSsolve>while ($nchain1 <= $data.ncomponents) loop nloop1 
 NEXTCD: condition evaluated as true
 CNSsolve>  coor orient sele=(segid $Toppar.prot_segid_$nchain1 and not ((resn WAT or resn HOH or resn TIP*) or resn DMS or resn ANI or resn DAN or resn XAN)) end 
 SELRPN:   2945 atoms have been selected out of   2978
 COOR: using atom subset.
 MOMENTS
 203354.86391049      0.00000000      0.00000000
                 352269.45941137      0.00000000
                                 636013.93470352


 Oriented coordinate set r' related to original set r by r'=R*r  + T
 Translation vector T = (   57.0220    0.0000    0.0000)

 Rotation matrix =
    1.000000    0.000000    0.000000
    0.000000    1.000000    0.000000
    0.000000    0.000000    1.000000
 Corresp. Eulerian angles (theta1,theta2,theta3)   360.0000    0.0000    0.0000
 Corresp. spherical polar angles (psi,phi,kappa)     0.0000    0.0000    0.0000
 Corresp. rotation angle     0.0000 about axis       0.0000    1.0000    0.0000
 Corresp. quaternions     1.0000    0.0000    0.0000    0.0000

 CNSsolve>  {====>} {* buried surface area *} 
 CNSsolve>  do (rmsd = 0) (all) 
 SELRPN:   2978 atoms have been selected out of   2978
 CNSsolve>  do (store2 = 0) (all) 
 SELRPN:   2978 atoms have been selected out of   2978
 CNSsolve>  surface mode=access accu=0.075 rh2o=1.4 sele=(segid $Toppar.prot_segid_$nchain1 and not ((resn WAT or resn HOH or resn TIP*) or resn DMS)) end 
 SELRPN:   2945 atoms have been selected out of   2978
 SURFAC: half the sigma value being used for atomic radii.
 SURFAC: ACCEssible surface area
 SURFAC: ACCUracy= 0.07 RH2O=  1.40
         Z-grid=  0.32 number-of-Z-sections=  155
         measures-of-arc= 26347 and 34091
 CNSsolve>  show sum (rmsd) (segid $Toppar.prot_segid_$nchain1 and not ((resn WAT or resn HOH or resn TIP*) or resn DMS)) 
 SELRPN:   2945 atoms have been selected out of   2978
 SHOW: sum over selected elements =   15302.039802
 CNSsolve>  evaluate ($saafree = $saafree + $result) 
 EVALUATE: symbol $SAAFREE set to    15302.0     (real)
 CNSsolve>  do (store2 = rmsd * store1) (segid $Toppar.prot_segid_$nchain1 and not ((resn WAT or resn HOH or resn TIP*) or resn DMS)) 
 SELRPN:   2945 atoms have been selected out of   2978
 CNSsolve>  show sum (store2) (segid $Toppar.prot_segid_$nchain1 and not ((resn WAT or resn HOH or resn TIP*) or resn DMS)) 
 SELRPN:   2945 atoms have been selected out of   2978
 SHOW: sum over selected elements =     -61.275451
 CNSsolve>  evaluate ($esolfree = $esolfree + $result) 
 EVALUATE: symbol $ESOLFREE set to   -61.2755     (real)
 CNSsolve>  evaluate ($nchain1 = $nchain1 + 1) 
 EVALUATE: symbol $NCHAIN1 set to    2.00000     (real)
 CNSsolve>end loop nloop1 
 CNSsolve>while ($nchain1 <= $data.ncomponents) loop nloop1 
 NEXTCD: condition evaluated as true
 CNSsolve>  coor orient sele=(segid $Toppar.prot_segid_$nchain1 and not ((resn WAT or resn HOH or resn TIP*) or resn DMS or resn ANI or resn DAN or resn XAN)) end 
 SELRPN:     33 atoms have been selected out of   2978
 COOR: using atom subset.
 MOMENTS
     14.52104761      0.00000000      0.00000000
                    180.35528637      0.00000000
                                    722.87725196


 Oriented coordinate set r' related to original set r by r'=R*r  + T
 Translation vector T = (  -90.3698    0.0000    0.0000)

 Rotation matrix =
    1.000000    0.000000    0.000000
    0.000000    1.000000    0.000000
    0.000000    0.000000    1.000000
 Corresp. Eulerian angles (theta1,theta2,theta3)     0.0000    0.0000    0.0000
 Corresp. spherical polar angles (psi,phi,kappa)     0.0000    0.0000    0.0000
 Corresp. rotation angle     0.0000 about axis       0.0000    1.0000    0.0000
 Corresp. quaternions     1.0000    0.0000    0.0000    0.0000

 CNSsolve>  {====>} {* buried surface area *} 
 CNSsolve>  do (rmsd = 0) (all) 
 SELRPN:   2978 atoms have been selected out of   2978
 CNSsolve>  do (store2 = 0) (all) 
 SELRPN:   2978 atoms have been selected out of   2978
 CNSsolve>  surface mode=access accu=0.075 rh2o=1.4 sele=(segid $Toppar.prot_segid_$nchain1 and not ((resn WAT or resn HOH or resn TIP*) or resn DMS)) end 
 SELRPN:     33 atoms have been selected out of   2978
 SURFAC: half the sigma value being used for atomic radii.
 SURFAC: ACCEssible surface area
 SURFAC: ACCUracy= 0.07 RH2O=  1.40
         Z-grid=  0.32 number-of-Z-sections=   29
         measures-of-arc=    36 and   240
 CNSsolve>  show sum (rmsd) (segid $Toppar.prot_segid_$nchain1 and not ((resn WAT or resn HOH or resn TIP*) or resn DMS)) 
 SELRPN:     33 atoms have been selected out of   2978
 SHOW: sum over selected elements =     660.536030
 CNSsolve>  evaluate ($saafree = $saafree + $result) 
 EVALUATE: symbol $SAAFREE set to    15962.6     (real)
 CNSsolve>  do (store2 = rmsd * store1) (segid $Toppar.prot_segid_$nchain1 and not ((resn WAT or resn HOH or resn TIP*) or resn DMS)) 
 SELRPN:     33 atoms have been selected out of   2978
 CNSsolve>  show sum (store2) (segid $Toppar.prot_segid_$nchain1 and not ((resn WAT or resn HOH or resn TIP*) or resn DMS)) 
 SELRPN:     33 atoms have been selected out of   2978
 SHOW: sum over selected elements =       8.625077
 CNSsolve>  evaluate ($esolfree = $esolfree + $result) 
 EVALUATE: symbol $ESOLFREE set to   -52.6504     (real)
 CNSsolve>  evaluate ($nchain1 = $nchain1 + 1) 
 EVALUATE: symbol $NCHAIN1 set to    3.00000     (real)
 CNSsolve>end loop nloop1 
 CNSsolve>while ($nchain1 <= $data.ncomponents) loop nloop1 
 NEXTCD: condition evaluated as false
 CNSsolve>  coor orient sele=(segid $Toppar.prot_segid_$nchain1 and not ((resn WAT or resn HOH or resn TIP*) or resn DMS or resn ANI or resn DAN or resn XAN)) end 
 CNSsolve>  {====>} {* buried surface area *} 
 CNSsolve>  do (rmsd = 0) (all) 
 CNSsolve>  do (store2 = 0) (all) 
 CNSsolve>  surface mode=access accu=0.075 rh2o=1.4 sele=(segid $Toppar.prot_segid_$nchain1 and not ((resn WAT or resn HOH or resn TIP*) or resn DMS)) end 
 CNSsolve>  show sum (rmsd) (segid $Toppar.prot_segid_$nchain1 and not ((resn WAT or resn HOH or resn TIP*) or resn DMS)) 
 CNSsolve>  evaluate ($saafree = $saafree + $result) 
 CNSsolve>  do (store2 = rmsd * store1) (segid $Toppar.prot_segid_$nchain1 and not ((resn WAT or resn HOH or resn TIP*) or resn DMS)) 
 CNSsolve>  show sum (store2) (segid $Toppar.prot_segid_$nchain1 and not ((resn WAT or resn HOH or resn TIP*) or resn DMS)) 
 CNSsolve>  evaluate ($esolfree = $esolfree + $result) 
 CNSsolve>  evaluate ($nchain1 = $nchain1 + 1) 
 CNSsolve>end loop nloop1 
 CNSsolve> 
 CNSsolve>do (x = refx) (resn ANI or resn DAN or resn XAN) 
 SELRPN:      0 atoms have been selected out of   2978
 CNSsolve>do (y = refy) (resn ANI or resn DAN or resn XAN) 
 SELRPN:      0 atoms have been selected out of   2978
 CNSsolve>do (z = refz) (resn ANI or resn DAN or resn XAN) 
 SELRPN:      0 atoms have been selected out of   2978
 CNSsolve> 
 CNSsolve>{* ======================= reset coordinates and proceed *} 
 CNSsolve> 
 CNSsolve>do (x = refx) (all) 
 SELRPN:   2978 atoms have been selected out of   2978
 CNSsolve>do (y = refy) (all) 
 SELRPN:   2978 atoms have been selected out of   2978
 CNSsolve>do (z = refz) (all) 
 SELRPN:   2978 atoms have been selected out of   2978
 CNSsolve> 
 CNSsolve>inline @RUN:protocols/read_water1.cns 
 ASSFIL: file read_water1.cns opened.
 CNSsolve>! read_water1.cns 
 CNSsolve>!   Read water coordinates from solvated docking 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve> 
 CNSsolve>evaluate ($nchain=0) 
 EVALUATE: symbol $NCHAIN set to    0.00000     (real)
 CNSsolve>while ($nchain < $data.ncomponents) loop nloop1 
 NEXTCD: condition evaluated as true
 CNSsolve>  evaluate ($nchain = $nchain + 1) 
 EVALUATE: symbol $NCHAIN set to    1.00000     (real)
 CNSsolve>  evaluate ($watersegname_$nchain="WAT" + encode($nchain)) 
 EVALUATE: symbol $WATERSEGNAME_1 set to "WAT1" (string)
 CNSsolve>end loop nloop1 
 CNSsolve>while ($nchain < $data.ncomponents) loop nloop1 
 NEXTCD: condition evaluated as true
 CNSsolve>  evaluate ($nchain = $nchain + 1) 
 EVALUATE: symbol $NCHAIN set to    2.00000     (real)
 CNSsolve>  evaluate ($watersegname_$nchain="WAT" + encode($nchain)) 
 EVALUATE: symbol $WATERSEGNAME_2 set to "WAT2" (string)
 CNSsolve>end loop nloop1 
 CNSsolve>while ($nchain < $data.ncomponents) loop nloop1 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($nchain = $nchain + 1) 
 CNSsolve>  evaluate ($watersegname_$nchain="WAT" + encode($nchain)) 
 CNSsolve>end loop nloop1 
 CNSsolve> 
 CNSsolve> 
 CNSsolve>if ($data.waterdock eq true) then 
 NEXTCD: condition evaluated as false
 CNSsolve>  noe reset end 
 CNSsolve>  rest dihe reset end 
 CNSsolve>  evaluate($watercoorfile = $file - ".pdb" + "_water.pdbw") 
 CNSsolve>  fileexist $watercoorfile end 
 CNSsolve>  evaluate ($waterfileexist=$result) 
 CNSsolve>  if ($waterfileexist eq true) then 
 CNSsolve>    if ($iteration < 2) then 
 CNSsolve>      evaluate($sol_topology_infile="RUN:/toppar/water-allhdg5-4.top") 
 CNSsolve>      topology @@$sol_topology_infile end 
 CNSsolve>    end if 
 CNSsolve>    segment 
 CNSsolve>      chain 
 CNSsolve>        separate-by-segid = true 
 CNSsolve>        coor @@$watercoorfile 
 CNSsolve>      end 
 CNSsolve>    end 
 CNSsolve>    coor @@$watercoorfile 
 CNSsolve>    ident (store5) (not all) 
 CNSsolve>  end if 
 CNSsolve> 
 CNSsolve>end if 
 CNSsolve>if ($data.waterdock eq true) then 
 NEXTCD: condition evaluated as false
 CNSsolve>  inline @RUN:protocols/water_rest.cns 
 ASSFIL: file water_rest.cns opened.
 CNSsolve>! water_rest.cns 
 CNSsolve>!    Define restraints between interfacial water molecules and highly solvated 
 CNSsolve>!    amino-acids 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve>! This script define distance restraints between water molecule and amino-acids 
 CNSsolve>! often found to be involved in water-mediated contacts 
 CNSsolve>! See van Dijk and Bonvin, Bioinformatics 2006 
 CNSsolve>! 
 CNSsolve> 
 CNSsolve>evaluate ($nchain=0) 
 CNSsolve>while ($nchain < $data.ncomponents) loop nloop1 
 CNSsolve>  evaluate ($nchain = $nchain + 1) 
 CNSsolve>  evaluate ($watersegname_$nchain="WAT" + encode($nchain)) 
 CNSsolve>end loop nloop1 
 CNSsolve> 
 CNSsolve> 
 CNSsolve>if ($data.waterdock eq true) then 
 CNSsolve> 
 CNSsolve>  if ($data.solvate_method eq "restraints") then 
 CNSsolve>    evaluate ($nchain=0) 
 CNSsolve>    while ($nchain < $data.ncomponents) loop nloop2 
 CNSsolve>      evaluate ($nchain = $nchain + 1) 
 CNSsolve>      noe class amwa end 
 CNSsolve>      for $atom_id in id ((resn WAT or resn HOH) and name OH2 and segid $watersegname_$nchain and not store5) loop waterrestraint 
 CNSsolve>        noe 
 CNSsolve>          assi (segid $toppar.prot_segid_$nchain and 
 CNSsolve>	        (resn arg or resn asn or resn asp or resn gln or resn glu or resn his* 
 CNSsolve>		 or resn lys or resn pro or resn ser or resn thr or resn tyr) 
 CNSsolve>	        and ((id $atom_id) around $data.water_restraint_cutoff)) 
 CNSsolve>               (id $atom_id) $data.water_restraint_cutoff $data.water_restraint_cutoff 0.0 
 CNSsolve>        end 
 CNSsolve>      end loop waterrestraint 
 CNSsolve>    end loop nloop2 
 CNSsolve>    evaluate($amwa_scale = $data.water_restraint_scale) 
 CNSsolve>    noe scale amwa $amwa_scale end 
 CNSsolve>  end if 
 CNSsolve> 
 CNSsolve>end if 
 CNSsolve>  set seed $seed end 
 CNSsolve>  set message=normal echo=on end 
 CNSsolve>  @@RUN:protocols/read_data.cns(Iteration=$Iteration; Data=$Data; count=$count) 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>!set the energy flags: 
 CNSsolve>@@RUN:protocols/flags_new.cns(Iteration=$Iteration; Data=$Data; ) 
 ASSFIL: file flags_new.cns opened.
 CNSsolve>! flags_new.cns 
 CNSsolve>!    Defines energy flags 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * Originally adapted from Aria 1.2 from Nilges and Linge, EMBL.       * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve> 
 CNSsolve>module(Iteration; Data; ) 
 &_2_ITERATION set to $_1_ITERATION 
 &_2_DATA set to $_1_DATA 
 CNSsolve> 
 CNSsolve>if ($Data.cdih.on eq true) then 
 NEXTCD: condition evaluated as false
 CNSsolve>   evaluate ($Data.flags.cdih =  true) 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if ($Data.c1_on eq true) then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.coup =  true) 
 CNSsolve>elseif ($Data.c2_on eq true) then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.coup =  true) 
 CNSsolve>elseif ($Data.c3_on eq true) then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.coup =  true) 
 CNSsolve>elseif ($Data.c4_on eq true) then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.coup =  true) 
 CNSsolve>elseif ($Data.c5_on eq true) then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.coup =  true) 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if ($Data.rdc1_choice eq "SANI") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.sani = true) 
 CNSsolve>elseif ($Data.rdc2_choice eq "SANI") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.sani = true) 
 CNSsolve>elseif ($Data.rdc3_choice eq "SANI") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.sani = true) 
 CNSsolve>elseif ($Data.rdc4_choice eq "SANI") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.sani = true) 
 CNSsolve>elseif ($Data.rdc5_choice eq "SANI") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.sani = true) 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if ($Data.rdc1_choice eq "XRDC") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.xrdc = true) 
 CNSsolve>elseif ($Data.rdc2_choice eq "XRDC") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.xrdc = true) 
 CNSsolve>elseif ($Data.rdc3_choice eq "XRDC") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.xrdc = true) 
 CNSsolve>elseif ($Data.rdc4_choice eq "XRDC") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.xrdc = true) 
 CNSsolve>elseif ($Data.rdc5_choice eq "XRDC") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.xrdc = true) 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if ($Data.pcs1_choice eq "XPCS") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.xpcs = true) 
 CNSsolve>elseif ($Data.pcs2_choice eq "XPCS") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.xpcs = true) 
 CNSsolve>elseif ($Data.pcs3_choice eq "XPCS") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.xpcs = true) 
 CNSsolve>elseif ($Data.pcs4_choice eq "XPCS") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.xpcs = true) 
 CNSsolve>elseif ($Data.pcs5_choice eq "XPCS") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.xpcs = true) 
 CNSsolve>elseif ($Data.pcs6_choice eq "XPCS") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.xpcs = true) 
 CNSsolve>elseif ($Data.pcs7_choice eq "XPCS") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.xpcs = true) 
 CNSsolve>elseif ($Data.pcs8_choice eq "XPCS") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.xpcs = true) 
 CNSsolve>elseif ($Data.pcs9_choice eq "XPCS") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.xpcs = true) 
 CNSsolve>elseif ($Data.pcsA_choice eq "XPCS") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.xpcs = true) 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if ($Data.dan1_choice eq "DANI") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.DANI = true) 
 CNSsolve>elseif ($Data.dan2_choice eq "DANI") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.DANI = true) 
 CNSsolve>elseif ($Data.dan3_choice eq "DANI") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.DANI = true) 
 CNSsolve>elseif ($Data.dan4_choice eq "DANI") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.DANI = true) 
 CNSsolve>elseif ($Data.dan5_choice eq "DANI") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.DANI = true) 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if ($Data.flags.sani eq TRUE) then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.harm = true) 
 CNSsolve>end if 
 CNSsolve>if ($Data.flags.dani eq TRUE) then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.harm = true) 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if ($Data.rdc1_choice eq "VANGLE") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.vean = true) 
 CNSsolve>end if 
 CNSsolve>if ($Data.rdc2_choice eq "VANGLE") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.vean = true) 
 CNSsolve>end if 
 CNSsolve>if ($Data.rdc3_choice eq "VANGLE") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.vean = true) 
 CNSsolve>end if 
 CNSsolve>if ($Data.rdc4_choice eq "VANGLE") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.vean = true) 
 CNSsolve>end if 
 CNSsolve>if ($Data.rdc5_choice eq "VANGLE") then 
 NEXTCD: condition evaluated as false
 CNSsolve>  evaluate ($Data.flags.vean = true) 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if ($Data.flags.noe  =  TRUE) then 
 NEXTCD: condition evaluated as true
 CNSsolve>   flags include noe end 
 CNSsolve>end if 
 CNSsolve>if ($Data.flags.cdih =  TRUE) then 
 NEXTCD: condition evaluated as false
 CNSsolve>   flags include cdih end 
 CNSsolve>end if 
 CNSsolve>if ($Data.flags.coup =  TRUE) then 
 NEXTCD: condition evaluated as false
 CNSsolve>   flags include coup end 
 CNSsolve>end if 
 CNSsolve>if ($Data.flags.vean =  TRUE) then 
 NEXTCD: condition evaluated as false
 CNSsolve>   flags include vean end 
 CNSsolve>end if 
 CNSsolve>if ($Data.flags.sani =  TRUE) then 
 NEXTCD: condition evaluated as false
 CNSsolve>   flags include sani end 
 CNSsolve>end if 
 CNSsolve>if ($Data.flags.xrdc =  TRUE) then 
 NEXTCD: condition evaluated as false
 CNSsolve>   flags include xrdc end 
 CNSsolve>end if 
 CNSsolve>if ($Data.flags.xpcs =  TRUE) then 
 NEXTCD: condition evaluated as false
 CNSsolve>   flags include xpcs end 
 CNSsolve>end if 
 CNSsolve>if ($Data.flags.dani =  TRUE) then 
 NEXTCD: condition evaluated as false
 CNSsolve>   flags include dani end 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if ($Data.flags.plan =  TRUE) then 
 NEXTCD: condition evaluated as false
 CNSsolve>   flags include plan end 
 CNSsolve>end if 
 CNSsolve>if ($Data.flags.ncs  =  TRUE) then 
 NEXTCD: condition evaluated as false
 CNSsolve>   flags include ncs end 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if ($Data.flags.rg = TRUE) then 
 NEXTCD: condition evaluated as false
 CNSsolve>  if ($data.rgtarg > 0) then 
 CNSsolve>    flags include coll end 
 CNSsolve>  else 
 CNSsolve>    evaluate ($Data.flags.rg = false) 
 CNSsolve>  end if 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>{* random removal of restaints ================================== *} 
 CNSsolve>if ($Data.noecv eq true) then 
 NEXTCD: condition evaluated as true
 CNSsolve>  set message=on echo=on end 
 CNSsolve>  noe cv $npart ? end 
 NOE: total number of restraints:     6 partitioned into      2 classes
 NOE: ceiling=    1000.000 current allocation= 4000000
 NOE: data are partitioned into working set and test set.
 NOE: test set number=     2
 CNSsolve>else 
 CNSsolve>  evaluate ($npart = 0) 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if ( $log_level = verbose ) then 
 NEXTCD: condition evaluated as false
 CNSsolve>   set message=normal echo=on end 
 CNSsolve>else 
 CNSsolve>   set message=off echo=off end 
 %PARRDR-info: duplication of bond C    OC  
 %PARRDR-info: duplication of bond CD_  C_  
 %PARRDR-info: duplication of bond CM_  CT_ 
 %PARRDR-info: duplication of bond HC   NC2 
 %PARRDR-info: duplication of angle C3R  OH   HO  
 %PARRDR-info: duplication of angle C3__ C3__ HC__
 %PARRDR-info: duplication of angle CD_  CM_  CT_ 
 %PARRDR-info: duplication of angle CH2P CH2E HA  
 %PARRDR-info: duplication of angle CM_  CT_  CT_ 
 %PARRDR-info: duplication of angle CPA  NPH1 FEH 
 %PARRDR-info: duplication of angle CPA  NPH2 FEH 
 %PARRDR-info: duplication of angle CT_  CT_  C_  
 %PARRDR-info: duplication of angle CT_  CT_  HC_ 
 %PARRDR-info: duplication of angle CT_  CT_  HP_ 
 %PARRDR-info: duplication of angle CT_  CT_  N3_ 
 %PARRDR-info: duplication of angle H1__ C3__ OH__
 %PARRDR-info: duplication of angle HP_  CT_  N3_ 
 %PARRDR-info: duplication of angle HR   C3R  O3R 
 %PARRDR-info: duplication of angle HR   C3R  OH  
 %PARRDR-info: duplication of angle OC   C    OC  
 %PARRDR-info: duplication of nonbonded entry H   
 %PARRDR-info: duplication of nonbonded entry HA  
 %PARRDR-info: duplication of nonbonded entry HC  
 %PARRDR-info: duplication of nonbonded entry HO  
 %PARRDR-info: duplication of nonbonded entry HA  
 %PARRDR-info: duplication of nonbonded entry HA  
 %PARRDR-info: duplication of nonbonded entry OC  
 %PARRDR-info: duplication of nonbonded entry C   
 -----nonbonded-list-options-------------------------------
 | CUTNb=   9.500 TOLErance=   0.500 WMIN=   0.500 ATOM   |
 | INHIbit=   0.250                                       |
 -----electrostatic options--------------------------------
 | EPS=  10.000 E14Fac=   0.400 CDIElectric POTEN SHIFt   |
 -----van der Waals options--------------------------------
 | VSWItch                                                |
 -----switching /shifting parameters-----------------------
 | CTONNB=   6.500 CTOFNB=   8.500                        |
 -----exclusion list options-------------------------------
 | NBXMOD=   5                                            |
 ----------------------------------------------------------
 %PARRDR-info: duplication of bond C    OC  
 %PARRDR-info: duplication of bond CD_  C_  
 %PARRDR-info: duplication of bond CM_  CT_ 
 %PARRDR-info: duplication of bond HC   NC2 
 %PARRDR-info: duplication of angle C3R  OH   HO  
 %PARRDR-info: duplication of angle C3__ C3__ HC__
 %PARRDR-info: duplication of angle CD_  CM_  CT_ 
 %PARRDR-info: duplication of angle CH2P CH2E HA  
 %PARRDR-info: duplication of angle CM_  CT_  CT_ 
 %PARRDR-info: duplication of angle CPA  NPH1 FEH 
 %PARRDR-info: duplication of angle CPA  NPH2 FEH 
 %PARRDR-info: duplication of angle CT_  CT_  C_  
 %PARRDR-info: duplication of angle CT_  CT_  HC_ 
 %PARRDR-info: duplication of angle CT_  CT_  HP_ 
 %PARRDR-info: duplication of angle CT_  CT_  N3_ 
 %PARRDR-info: duplication of angle H1__ C3__ OH__
 %PARRDR-info: duplication of angle HP_  CT_  N3_ 
 %PARRDR-info: duplication of angle HR   C3R  O3R 
 %PARRDR-info: duplication of angle HR   C3R  OH  
 %PARRDR-info: duplication of angle OC   C    OC  
 %PARRDR-info: duplication of nonbonded entry H   
 %PARRDR-info: duplication of nonbonded entry HA  
 %PARRDR-info: duplication of nonbonded entry HC  
 %PARRDR-info: duplication of nonbonded entry HO  
 %PARRDR-info: duplication of nonbonded entry HA  
 %PARRDR-info: duplication of nonbonded entry HA  
 %PARRDR-info: duplication of nonbonded entry OC  
 %PARRDR-info: duplication of nonbonded entry C   
 CNSsolve> 
 CNSsolve>  evaluate ($ncount = 0) 
 EVALUATE: symbol $NCOUNT set to    0.00000     (real)
 CNSsolve> 
 CNSsolve>  while ($ncount < $data.ncomponents) loop nloop1 
 NEXTCD: condition evaluated as true
 CNSsolve>    evaluate ($dim_$ncount = 0.0) 
 EVALUATE: symbol $DIM_0 set to    0.00000     (real)
 CNSsolve>    evaluate ($ncount = $ncount +1) 
 EVALUATE: symbol $NCOUNT set to    1.00000     (real)
 CNSsolve>    show max (x) (segid $Toppar.prot_segid_$ncount and (name CA or name N1)) 
 SELRPN:    303 atoms have been selected out of   2978
 SHOW: maximum of selected elements =     -34.074000
 CNSsolve>    evaluate ($xdim = $result) 
 EVALUATE: symbol $XDIM set to   -34.0740     (real)
 CNSsolve>    show max (y) (segid $Toppar.prot_segid_$ncount and (name CA or name N1)) 
 SELRPN:    303 atoms have been selected out of   2978
 SHOW: maximum of selected elements =      24.421000
 CNSsolve>    evaluate ($ydim = $result) 
 EVALUATE: symbol $YDIM set to    24.4210     (real)
 CNSsolve>    show max (z) (segid $Toppar.prot_segid_$ncount and (name CA or name N1)) 
 SELRPN:    303 atoms have been selected out of   2978
 SHOW: maximum of selected elements =       2.558000
 CNSsolve>    evaluate ($zdim = $result) 
 EVALUATE: symbol $ZDIM set to    2.55800     (real)
 CNSsolve>    show min (x) (segid $Toppar.prot_segid_$ncount and (name CA or name N1)) 
 SELRPN:    303 atoms have been selected out of   2978
 SHOW: minimum of selected elements =     -75.681000
 CNSsolve>    evaluate ($xdim = $xdim - $result) 
 EVALUATE: symbol $XDIM set to    41.6070     (real)
 CNSsolve>    show min (y) (segid $Toppar.prot_segid_$ncount and (name CA or name N1)) 
 SELRPN:    303 atoms have been selected out of   2978
 SHOW: minimum of selected elements =     -36.403000
 CNSsolve>    evaluate ($ydim = $ydim - $result) 
 EVALUATE: symbol $YDIM set to    60.8240     (real)
 CNSsolve>    show min (z) (segid $Toppar.prot_segid_$ncount and (name CA or name N1)) 
 SELRPN:    303 atoms have been selected out of   2978
 SHOW: minimum of selected elements =     -49.331000
 CNSsolve>    evaluate ($zdim = $zdim - $result) 
 EVALUATE: symbol $ZDIM set to    51.8890     (real)
 CNSsolve>    evaluate ($corr = max($xdim,$ydim)) 
 EVALUATE: symbol $CORR set to    60.8240     (real)
 CNSsolve>    evaluate ($corr = max($corr,$zdim)) 
 EVALUATE: symbol $CORR set to    60.8240     (real)
 CNSsolve>    do (store6 = 0) (all) 
 SELRPN:   2978 atoms have been selected out of   2978
 CNSsolve>    do (store6 = 1) (segid $Toppar.prot_segid_$ncount and (name CA or name N1)) 
 SELRPN:    303 atoms have been selected out of   2978
 CNSsolve>    show sum (store6) (all) 
 SELRPN:   2978 atoms have been selected out of   2978
 SHOW: sum over selected elements =     303.000000
 CNSsolve>    if ($result eq 0) then 
 NEXTCD: condition evaluated as false
 CNSsolve>      evaluate ($corr = 0.0) 
 CNSsolve>    end if 
 CNSsolve>    evaluate ($dim_$ncount = ($xdim + $ydim + $zdim - $corr)/4.0) 
 EVALUATE: symbol $DIM_1 set to    23.3740     (real)
 CNSsolve>    if ($toppar.dna_$ncount = true) then 
 NEXTCD: condition evaluated as false
 CNSsolve>      evaluate ($dim_$ncount = 0.0) 
 CNSsolve>    end if 
 CNSsolve>  end loop nloop1 
 CNSsolve>  while ($ncount < $data.ncomponents) loop nloop1 
 NEXTCD: condition evaluated as true
 CNSsolve>    evaluate ($dim_$ncount = 0.0) 
 EVALUATE: symbol $DIM_1 set to    0.00000     (real)
 CNSsolve>    evaluate ($ncount = $ncount +1) 
 EVALUATE: symbol $NCOUNT set to    2.00000     (real)
 CNSsolve>    show max (x) (segid $Toppar.prot_segid_$ncount and (name CA or name N1)) 
 SELRPN:      1 atoms have been selected out of   2978
 SHOW: maximum of selected elements =     -52.731000
 CNSsolve>    evaluate ($xdim = $result) 
 EVALUATE: symbol $XDIM set to   -52.7310     (real)
 CNSsolve>    show max (y) (segid $Toppar.prot_segid_$ncount and (name CA or name N1)) 
 SELRPN:      1 atoms have been selected out of   2978
 SHOW: maximum of selected elements =       1.745000
 CNSsolve>    evaluate ($ydim = $result) 
 EVALUATE: symbol $YDIM set to    1.74500     (real)
 CNSsolve>    show max (z) (segid $Toppar.prot_segid_$ncount and (name CA or name N1)) 
 SELRPN:      1 atoms have been selected out of   2978
 SHOW: maximum of selected elements =     -22.905000
 CNSsolve>    evaluate ($zdim = $result) 
 EVALUATE: symbol $ZDIM set to   -22.9050     (real)
 CNSsolve>    show min (x) (segid $Toppar.prot_segid_$ncount and (name CA or name N1)) 
 SELRPN:      1 atoms have been selected out of   2978
 SHOW: minimum of selected elements =     -52.731000
 CNSsolve>    evaluate ($xdim = $xdim - $result) 
 EVALUATE: symbol $XDIM set to    0.00000     (real)
 CNSsolve>    show min (y) (segid $Toppar.prot_segid_$ncount and (name CA or name N1)) 
 SELRPN:      1 atoms have been selected out of   2978
 SHOW: minimum of selected elements =       1.745000
 CNSsolve>    evaluate ($ydim = $ydim - $result) 
 EVALUATE: symbol $YDIM set to    0.00000     (real)
 CNSsolve>    show min (z) (segid $Toppar.prot_segid_$ncount and (name CA or name N1)) 
 SELRPN:      1 atoms have been selected out of   2978
 SHOW: minimum of selected elements =     -22.905000
 CNSsolve>    evaluate ($zdim = $zdim - $result) 
 EVALUATE: symbol $ZDIM set to    0.00000     (real)
 CNSsolve>    evaluate ($corr = max($xdim,$ydim)) 
 EVALUATE: symbol $CORR set to    0.00000     (real)
 CNSsolve>    evaluate ($corr = max($corr,$zdim)) 
 EVALUATE: symbol $CORR set to    0.00000     (real)
 CNSsolve>    do (store6 = 0) (all) 
 SELRPN:   2978 atoms have been selected out of   2978
 CNSsolve>    do (store6 = 1) (segid $Toppar.prot_segid_$ncount and (name CA or name N1)) 
 SELRPN:      1 atoms have been selected out of   2978
 CNSsolve>    show sum (store6) (all) 
 SELRPN:   2978 atoms have been selected out of   2978
 SHOW: sum over selected elements =       1.000000
 CNSsolve>    if ($result eq 0) then 
 NEXTCD: condition evaluated as false
 CNSsolve>      evaluate ($corr = 0.0) 
 CNSsolve>    end if 
 CNSsolve>    evaluate ($dim_$ncount = ($xdim + $ydim + $zdim - $corr)/4.0) 
 EVALUATE: symbol $DIM_2 set to    0.00000     (real)
 CNSsolve>    if ($toppar.dna_$ncount = true) then 
 NEXTCD: condition evaluated as false
 CNSsolve>      evaluate ($dim_$ncount = 0.0) 
 CNSsolve>    end if 
 CNSsolve>  end loop nloop1 
 CNSsolve>  while ($ncount < $data.ncomponents) loop nloop1 
 NEXTCD: condition evaluated as false
 CNSsolve>    evaluate ($dim_$ncount = 0.0) 
 CNSsolve>    evaluate ($ncount = $ncount +1) 
 CNSsolve>    show max (x) (segid $Toppar.prot_segid_$ncount and (name CA or name N1)) 
 CNSsolve>    evaluate ($xdim = $result) 
 CNSsolve>    show max (y) (segid $Toppar.prot_segid_$ncount and (name CA or name N1)) 
 CNSsolve>    evaluate ($ydim = $result) 
 CNSsolve>    show max (z) (segid $Toppar.prot_segid_$ncount and (name CA or name N1)) 
 CNSsolve>    evaluate ($zdim = $result) 
 CNSsolve>    show min (x) (segid $Toppar.prot_segid_$ncount and (name CA or name N1)) 
 CNSsolve>    evaluate ($xdim = $xdim - $result) 
 CNSsolve>    show min (y) (segid $Toppar.prot_segid_$ncount and (name CA or name N1)) 
 CNSsolve>    evaluate ($ydim = $ydim - $result) 
 CNSsolve>    show min (z) (segid $Toppar.prot_segid_$ncount and (name CA or name N1)) 
 CNSsolve>    evaluate ($zdim = $zdim - $result) 
 CNSsolve>    evaluate ($corr = max($xdim,$ydim)) 
 CNSsolve>    evaluate ($corr = max($corr,$zdim)) 
 CNSsolve>    do (store6 = 0) (all) 
 CNSsolve>    do (store6 = 1) (segid $Toppar.prot_segid_$ncount and (name CA or name N1)) 
 CNSsolve>    show sum (store6) (all) 
 CNSsolve>    if ($result eq 0) then 
 CNSsolve>      evaluate ($corr = 0.0) 
 CNSsolve>    end if 
 CNSsolve>    evaluate ($dim_$ncount = ($xdim + $ydim + $zdim - $corr)/4.0) 
 CNSsolve>    if ($toppar.dna_$ncount = true) then 
 CNSsolve>      evaluate ($dim_$ncount = 0.0) 
 CNSsolve>    end if 
 CNSsolve>  end loop nloop1 
 CNSsolve> 
 CNSsolve>  eval($nchain = 0) 
 EVALUATE: symbol $NCHAIN set to    0.00000     (real)
 CNSsolve>  do (store9 = 0) (all) 
 SELRPN:   2978 atoms have been selected out of   2978
 CNSsolve>  do (store9 = 1) (name CA or name N1) 
 SELRPN:    304 atoms have been selected out of   2978
 CNSsolve>  while ($nchain < $data.ncomponents) loop nloop0 
 NEXTCD: condition evaluated as true
 CNSsolve>    eval($nchain = $nchain + 1) 
 EVALUATE: symbol $NCHAIN set to    1.00000     (real)
 CNSsolve>    show sum (store9) (segid $Toppar.prot_segid_$nchain) 
 SELRPN:   2945 atoms have been selected out of   2978
 SHOW: sum over selected elements =     303.000000
 CNSsolve>    if ($result < 3) then 
 NEXTCD: condition evaluated as false
 CNSsolve>      evaluate ($selat$nchain = 0 ) 
 CNSsolve>    else 
 CNSsolve>      evaluate ($selat$nchain = 1 ) 
 EVALUATE: symbol $SELAT1 set to    1.00000     (real)
 CNSsolve>    end if 
 CNSsolve>  end loop nloop0 
 CNSsolve>  while ($nchain < $data.ncomponents) loop nloop0 
 NEXTCD: condition evaluated as true
 CNSsolve>    eval($nchain = $nchain + 1) 
 EVALUATE: symbol $NCHAIN set to    2.00000     (real)
 CNSsolve>    show sum (store9) (segid $Toppar.prot_segid_$nchain) 
 SELRPN:     33 atoms have been selected out of   2978
 SHOW: sum over selected elements =       1.000000
 CNSsolve>    if ($result < 3) then 
 NEXTCD: condition evaluated as true
 CNSsolve>      evaluate ($selat$nchain = 0 ) 
 EVALUATE: symbol $SELAT2 set to    0.00000     (real)
 CNSsolve>    else 
 CNSsolve>      evaluate ($selat$nchain = 1 ) 
 CNSsolve>    end if 
 CNSsolve>  end loop nloop0 
 CNSsolve>  while ($nchain < $data.ncomponents) loop nloop0 
 NEXTCD: condition evaluated as false
 CNSsolve>    eval($nchain = $nchain + 1) 
 CNSsolve>    show sum (store9) (segid $Toppar.prot_segid_$nchain) 
 CNSsolve>    if ($result < 3) then 
 CNSsolve>      evaluate ($selat$nchain = 0 ) 
 CNSsolve>    else 
 CNSsolve>      evaluate ($selat$nchain = 1 ) 
 CNSsolve>    end if 
 CNSsolve>  end loop nloop0 
 CNSsolve> 
 CNSsolve>  eval($nchain1 = 0) 
 EVALUATE: symbol $NCHAIN1 set to    0.00000     (real)
 CNSsolve>  noe 
 NOE>    class contact 
 NOE>    while ($nchain1 < $data.ncomponents) loop nloop1 
 NEXTCD: condition evaluated as true
 NOE>      eval($nchain1 = $nchain1 + 1) 
 EVALUATE: symbol $NCHAIN1 set to    1.00000     (real)
 NOE>      eval($nchain2 = $nchain1 ) 
 EVALUATE: symbol $NCHAIN2 set to    1.00000     (real)
 NOE>      while ($nchain2 < $data.ncomponents) loop nloop2 
 NEXTCD: condition evaluated as true
 NOE>        eval($nchain2 = $nchain2 + 1) 
 EVALUATE: symbol $NCHAIN2 set to    2.00000     (real)
 NOE>        eval($cm_dist = $dim_$nchain1 + $dim_$nchain2) 
 EVALUATE: symbol $CM_DIST set to    0.00000     (real)
 NOE>        if ($selat$nchain1 = 1) then 
 NEXTCD: condition evaluated as true
 NOE>          if ($selat$nchain2 = 1) then 
 NEXTCD: condition evaluated as false
 NOE>            assign (segid $Toppar.prot_segid_$nchain1 and ( name CA or name N1 )) 
 NOE>	               (segid $Toppar.prot_segid_$nchain2 and ( name CA or name N1 )) $cm_dist $cm_dist 1.0 
 NOE>	      else 
 NOE>            assign (segid $Toppar.prot_segid_$nchain1 and ( name CA or name N1 )) 
 SELRPN:    303 atoms have been selected out of   2978
 SELRPN>	               (segid $Toppar.prot_segid_$nchain2) $cm_dist $cm_dist 1.0 
 SELRPN:     33 atoms have been selected out of   2978
 NOE>	      end if 
 NOE>	    else 
 NOE>          if ($selat$nchain2 = 1) then 
 NOE>            assign (segid $Toppar.prot_segid_$nchain1) 
 NOE>	               (segid $Toppar.prot_segid_$nchain2 and ( name CA or name N1 )) $cm_dist $cm_dist 1.0 
 NOE>	      else 
 NOE>            assign (segid $Toppar.prot_segid_$nchain1) 
 NOE>	               (segid $Toppar.prot_segid_$nchain2) $cm_dist $cm_dist 1.0 
 NOE>	      end if 
 NOE>	    end if 
 NOE>      end loop nloop2 
 NOE>      while ($nchain2 < $data.ncomponents) loop nloop2 
 NEXTCD: condition evaluated as false
 NOE>        eval($nchain2 = $nchain2 + 1) 
 NOE>        eval($cm_dist = $dim_$nchain1 + $dim_$nchain2) 
 NOE>        if ($selat$nchain1 = 1) then 
 NOE>          if ($selat$nchain2 = 1) then 
 NOE>            assign (segid $Toppar.prot_segid_$nchain1 and ( name CA or name N1 )) 
 NOE>	               (segid $Toppar.prot_segid_$nchain2 and ( name CA or name N1 )) $cm_dist $cm_dist 1.0 
 NOE>	      else 
 NOE>            assign (segid $Toppar.prot_segid_$nchain1 and ( name CA or name N1 )) 
 NOE>	               (segid $Toppar.prot_segid_$nchain2) $cm_dist $cm_dist 1.0 
 NOE>	      end if 
 NOE>	    else 
 NOE>          if ($selat$nchain2 = 1) then 
 NOE>            assign (segid $Toppar.prot_segid_$nchain1) 
 NOE>	               (segid $Toppar.prot_segid_$nchain2 and ( name CA or name N1 )) $cm_dist $cm_dist 1.0 
 NOE>	      else 
 NOE>            assign (segid $Toppar.prot_segid_$nchain1) 
 NOE>	               (segid $Toppar.prot_segid_$nchain2) $cm_dist $cm_dist 1.0 
 NOE>	      end if 
 NOE>	    end if 
 NOE>      end loop nloop2 
 NOE>    end loop nloop1 
 NOE>    while ($nchain1 < $data.ncomponents) loop nloop1 
 NEXTCD: condition evaluated as true
 NOE>      eval($nchain1 = $nchain1 + 1) 
 EVALUATE: symbol $NCHAIN1 set to    2.00000     (real)
 NOE>      eval($nchain2 = $nchain1 ) 
 EVALUATE: symbol $NCHAIN2 set to    2.00000     (real)
 NOE>      while ($nchain2 < $data.ncomponents) loop nloop2 
 NEXTCD: condition evaluated as false
 NOE>        eval($nchain2 = $nchain2 + 1) 
 NOE>        eval($cm_dist = $dim_$nchain1 + $dim_$nchain2) 
 NOE>        if ($selat$nchain1 = 1) then 
 NOE>          if ($selat$nchain2 = 1) then 
 NOE>            assign (segid $Toppar.prot_segid_$nchain1 and ( name CA or name N1 )) 
 NOE>	               (segid $Toppar.prot_segid_$nchain2 and ( name CA or name N1 )) $cm_dist $cm_dist 1.0 
 NOE>	      else 
 NOE>            assign (segid $Toppar.prot_segid_$nchain1 and ( name CA or name N1 )) 
 NOE>	               (segid $Toppar.prot_segid_$nchain2) $cm_dist $cm_dist 1.0 
 NOE>	      end if 
 NOE>	    else 
 NOE>          if ($selat$nchain2 = 1) then 
 NOE>            assign (segid $Toppar.prot_segid_$nchain1) 
 NOE>	               (segid $Toppar.prot_segid_$nchain2 and ( name CA or name N1 )) $cm_dist $cm_dist 1.0 
 NOE>	      else 
 NOE>            assign (segid $Toppar.prot_segid_$nchain1) 
 NOE>	               (segid $Toppar.prot_segid_$nchain2) $cm_dist $cm_dist 1.0 
 NOE>	      end if 
 NOE>	    end if 
 NOE>      end loop nloop2 
 NOE>    end loop nloop1 
 NOE>    while ($nchain1 < $data.ncomponents) loop nloop1 
 NEXTCD: condition evaluated as false
 NOE>      eval($nchain1 = $nchain1 + 1) 
 NOE>      eval($nchain2 = $nchain1 ) 
 NOE>      while ($nchain2 < $data.ncomponents) loop nloop2 
 NOE>        eval($nchain2 = $nchain2 + 1) 
 NOE>        eval($cm_dist = $dim_$nchain1 + $dim_$nchain2) 
 NOE>        if ($selat$nchain1 = 1) then 
 NOE>          if ($selat$nchain2 = 1) then 
 NOE>            assign (segid $Toppar.prot_segid_$nchain1 and ( name CA or name N1 )) 
 NOE>	               (segid $Toppar.prot_segid_$nchain2 and ( name CA or name N1 )) $cm_dist $cm_dist 1.0 
 NOE>	      else 
 NOE>            assign (segid $Toppar.prot_segid_$nchain1 and ( name CA or name N1 )) 
 NOE>	               (segid $Toppar.prot_segid_$nchain2) $cm_dist $cm_dist 1.0 
 NOE>	      end if 
 NOE>	    else 
 NOE>          if ($selat$nchain2 = 1) then 
 NOE>            assign (segid $Toppar.prot_segid_$nchain1) 
 NOE>	               (segid $Toppar.prot_segid_$nchain2 and ( name CA or name N1 )) $cm_dist $cm_dist 1.0 
 NOE>	      else 
 NOE>            assign (segid $Toppar.prot_segid_$nchain1) 
 NOE>	               (segid $Toppar.prot_segid_$nchain2) $cm_dist $cm_dist 1.0 
 NOE>	      end if 
 NOE>	    end if 
 NOE>      end loop nloop2 
 NOE>    end loop nloop1 
 NOE> 
 NOE>    averaging  contact center 
 NOE>    scale      contact $Data.kcont 
 NOE>    sqconstant contact 1.0 
 NOE>    sqexponent contact 2 
 NOE>    soexponent contact 1 
 NOE>    rswitch    contact 1.0 
 NOE>    sqoffset   contact 0.0 
 NOE>    asymptote  contact 2.0 
 NOE>    msoexponent contact 1 
 NOE>    masymptote  contact -0.1 
 NOE>    mrswitch    contact 1.0 
 NOE>  end 
 CNSsolve>  end if 
 CNSsolve> 
 CNSsolve>  if ($Data.surfrest eq true ) then 
 NEXTCD: condition evaluated as true
 CNSsolve>    @RUN:protocols/surf-restraints.cns 
 ASSFIL: file surf-restraints.cns opened.
 CNSsolve>! surf-restraints.cns 
 CNSsolve>!    Define surface contact restraints 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve>!define surface contact restraints between all molecules 
 CNSsolve>!using distance restraints between CA atoms with sum averaging 
 CNSsolve> 
 CNSsolve>  set echo=on message=on end 
 CNSsolve> 
 CNSsolve>  eval($nchain = 0) 
 EVALUATE: symbol $NCHAIN set to    0.00000     (real)
 CNSsolve>  do (store9 = 0) (all) 
 SELRPN:   2978 atoms have been selected out of   2978
 CNSsolve>  do (store9 = 1) (name CA or name N1) 
 SELRPN:    304 atoms have been selected out of   2978
 CNSsolve>  while ($nchain < $data.ncomponents) loop nloop0 
 NEXTCD: condition evaluated as true
 CNSsolve>    eval($nchain = $nchain + 1) 
 EVALUATE: symbol $NCHAIN set to    1.00000     (real)
 CNSsolve>    show sum (store9) (segid $Toppar.prot_segid_$nchain) 
 SELRPN:   2945 atoms have been selected out of   2978
 SHOW: sum over selected elements =     303.000000
 CNSsolve>    if ($result < 3) then 
 NEXTCD: condition evaluated as false
 CNSsolve>      evaluate ($selat$nchain = 0) 
 CNSsolve>      evaluate ($dist$nchain = 1.0) 
 CNSsolve>    else 
 CNSsolve>      evaluate ($selat$nchain = 1) 
 EVALUATE: symbol $SELAT1 set to    1.00000     (real)
 CNSsolve>      evaluate ($dist$nchain = 3.5) 
 EVALUATE: symbol $DIST1 set to    3.50000     (real)
 CNSsolve>    end if 
 CNSsolve>  end loop nloop0 
 CNSsolve>  while ($nchain < $data.ncomponents) loop nloop0 
 NEXTCD: condition evaluated as true
 CNSsolve>    eval($nchain = $nchain + 1) 
 EVALUATE: symbol $NCHAIN set to    2.00000     (real)
 CNSsolve>    show sum (store9) (segid $Toppar.prot_segid_$nchain) 
 SELRPN:     33 atoms have been selected out of   2978
 SHOW: sum over selected elements =       1.000000
 CNSsolve>    if ($result < 3) then 
 NEXTCD: condition evaluated as true
 CNSsolve>      evaluate ($selat$nchain = 0) 
 EVALUATE: symbol $SELAT2 set to    0.00000     (real)
 CNSsolve>      evaluate ($dist$nchain = 1.0) 
 EVALUATE: symbol $DIST2 set to    1.00000     (real)
 CNSsolve>    else 
 CNSsolve>      evaluate ($selat$nchain = 1) 
 CNSsolve>      evaluate ($dist$nchain = 3.5) 
 CNSsolve>    end if 
 CNSsolve>  end loop nloop0 
 CNSsolve>  while ($nchain < $data.ncomponents) loop nloop0 
 NEXTCD: condition evaluated as false
 CNSsolve>    eval($nchain = $nchain + 1) 
 CNSsolve>    show sum (store9) (segid $Toppar.prot_segid_$nchain) 
 CNSsolve>    if ($result < 3) then 
 CNSsolve>      evaluate ($selat$nchain = 0) 
 CNSsolve>      evaluate ($dist$nchain = 1.0) 
 CNSsolve>    else 
 CNSsolve>      evaluate ($selat$nchain = 1) 
 CNSsolve>      evaluate ($dist$nchain = 3.5) 
 CNSsolve>    end if 
 CNSsolve>  end loop nloop0 
 CNSsolve> 
 CNSsolve>  eval($nchain1 = 0) 
 EVALUATE: symbol $NCHAIN1 set to    0.00000     (real)
 CNSsolve>  noe class surface 
 NOE>    while ($nchain1 < $data.ncomponents) loop nloop1 
 NEXTCD: condition evaluated as true
 NOE>      eval($nchain1 = $nchain1 + 1) 
 EVALUATE: symbol $NCHAIN1 set to    1.00000     (real)
 NOE>      eval($nchain2 = $nchain1 ) 
 EVALUATE: symbol $NCHAIN2 set to    1.00000     (real)
 NOE>      while ($nchain2 < $data.ncomponents) loop nloop2 
 NEXTCD: condition evaluated as true
 NOE>        eval($nchain2 = $nchain2 + 1) 
 EVALUATE: symbol $NCHAIN2 set to    2.00000     (real)
 NOE>        evaluate ($updist = $dist$nchain1 + $dist$nchain2) 
 EVALUATE: symbol $UPDIST set to    4.50000     (real)
 NOE>        if ($selat$nchain1 = 1) then 
 NEXTCD: condition evaluated as true
 NOE>          if ($selat$nchain2 = 1) then 
 NEXTCD: condition evaluated as false
 NOE>            assign (segid $Toppar.prot_segid_$nchain1 and ( name CA or name N1 )) 
 NOE>	               (segid $Toppar.prot_segid_$nchain2 and ( name CA or name N1 )) $updist $updist 1.0 
 NOE>	      else 
 NOE>            assign (segid $Toppar.prot_segid_$nchain1 and ( name CA or name N1 )) 
 SELRPN:    303 atoms have been selected out of   2978
 SELRPN>	               (segid $Toppar.prot_segid_$nchain2) $updist $updist 1.0 
 SELRPN:     33 atoms have been selected out of   2978
 NOE>	      end if 
 NOE>	    else 
 NOE>          if ($selat$nchain2 = 1) then 
 NOE>            assign (segid $Toppar.prot_segid_$nchain1) 
 NOE>	               (segid $Toppar.prot_segid_$nchain2 and ( name CA or name N1 )) $updist $updist 1.0 
 NOE>	      else 
 NOE>            assign (segid $Toppar.prot_segid_$nchain1) 
 NOE>	               (segid $Toppar.prot_segid_$nchain2) $updist $updist 1.0 
 NOE>	      end if 
 NOE>	    end if 
 NOE>      end loop nloop2 
 NOE>      while ($nchain2 < $data.ncomponents) loop nloop2 
 NEXTCD: condition evaluated as false
 NOE>        eval($nchain2 = $nchain2 + 1) 
 NOE>        evaluate ($updist = $dist$nchain1 + $dist$nchain2) 
 NOE>        if ($selat$nchain1 = 1) then 
 NOE>          if ($selat$nchain2 = 1) then 
 NOE>            assign (segid $Toppar.prot_segid_$nchain1 and ( name CA or name N1 )) 
 NOE>	               (segid $Toppar.prot_segid_$nchain2 and ( name CA or name N1 )) $updist $updist 1.0 
 NOE>	      else 
 NOE>            assign (segid $Toppar.prot_segid_$nchain1 and ( name CA or name N1 )) 
 NOE>	               (segid $Toppar.prot_segid_$nchain2) $updist $updist 1.0 
 NOE>	      end if 
 NOE>	    else 
 NOE>          if ($selat$nchain2 = 1) then 
 NOE>            assign (segid $Toppar.prot_segid_$nchain1) 
 NOE>	               (segid $Toppar.prot_segid_$nchain2 and ( name CA or name N1 )) $updist $updist 1.0 
 NOE>	      else 
 NOE>            assign (segid $Toppar.prot_segid_$nchain1) 
 NOE>	               (segid $Toppar.prot_segid_$nchain2) $updist $updist 1.0 
 NOE>	      end if 
 NOE>	    end if 
 NOE>      end loop nloop2 
 NOE>    end loop nloop1 
 NOE>    while ($nchain1 < $data.ncomponents) loop nloop1 
 NEXTCD: condition evaluated as true
 NOE>      eval($nchain1 = $nchain1 + 1) 
 EVALUATE: symbol $NCHAIN1 set to    2.00000     (real)
 NOE>      eval($nchain2 = $nchain1 ) 
 EVALUATE: symbol $NCHAIN2 set to    2.00000     (real)
 NOE>      while ($nchain2 < $data.ncomponents) loop nloop2 
 NEXTCD: condition evaluated as false
 NOE>        eval($nchain2 = $nchain2 + 1) 
 NOE>        evaluate ($updist = $dist$nchain1 + $dist$nchain2) 
 NOE>        if ($selat$nchain1 = 1) then 
 NOE>          if ($selat$nchain2 = 1) then 
 NOE>            assign (segid $Toppar.prot_segid_$nchain1 and ( name CA or name N1 )) 
 NOE>	               (segid $Toppar.prot_segid_$nchain2 and ( name CA or name N1 )) $updist $updist 1.0 
 NOE>	      else 
 NOE>            assign (segid $Toppar.prot_segid_$nchain1 and ( name CA or name N1 )) 
 NOE>	               (segid $Toppar.prot_segid_$nchain2) $updist $updist 1.0 
 NOE>	      end if 
 NOE>	    else 
 NOE>          if ($selat$nchain2 = 1) then 
 NOE>            assign (segid $Toppar.prot_segid_$nchain1) 
 NOE>	               (segid $Toppar.prot_segid_$nchain2 and ( name CA or name N1 )) $updist $updist 1.0 
 NOE>	      else 
 NOE>            assign (segid $Toppar.prot_segid_$nchain1) 
 NOE>	               (segid $Toppar.prot_segid_$nchain2) $updist $updist 1.0 
 NOE>	      end if 
 NOE>	    end if 
 NOE>      end loop nloop2 
 NOE>    end loop nloop1 
 NOE>    while ($nchain1 < $data.ncomponents) loop nloop1 
 NEXTCD: condition evaluated as false
 NOE>      eval($nchain1 = $nchain1 + 1) 
 NOE>      eval($nchain2 = $nchain1 ) 
 NOE>      while ($nchain2 < $data.ncomponents) loop nloop2 
 NOE>        eval($nchain2 = $nchain2 + 1) 
 NOE>        evaluate ($updist = $dist$nchain1 + $dist$nchain2) 
 NOE>        if ($selat$nchain1 = 1) then 
 NOE>          if ($selat$nchain2 = 1) then 
 NOE>            assign (segid $Toppar.prot_segid_$nchain1 and ( name CA or name N1 )) 
 NOE>	               (segid $Toppar.prot_segid_$nchain2 and ( name CA or name N1 )) $updist $updist 1.0 
 NOE>	      else 
 NOE>            assign (segid $Toppar.prot_segid_$nchain1 and ( name CA or name N1 )) 
 NOE>	               (segid $Toppar.prot_segid_$nchain2) $updist $updist 1.0 
 NOE>	      end if 
 NOE>	    else 
 NOE>          if ($selat$nchain2 = 1) then 
 NOE>            assign (segid $Toppar.prot_segid_$nchain1) 
 NOE>	               (segid $Toppar.prot_segid_$nchain2 and ( name CA or name N1 )) $updist $updist 1.0 
 NOE>	      else 
 NOE>            assign (segid $Toppar.prot_segid_$nchain1) 
 NOE>	               (segid $Toppar.prot_segid_$nchain2) $updist $updist 1.0 
 NOE>	      end if 
 NOE>	    end if 
 NOE>      end loop nloop2 
 NOE>    end loop nloop1 
 NOE> 
 NOE>    averaging  surface sum 
 NOE>    scale      surface $Data.ksurf 
 NOE>    sqconstant surface 1.0 
 NOE>    sqexponent surface 2 
 NOE>    soexponent surface 1 
 NOE>    rswitch    surface 1.0 
 NOE>    sqoffset   surface 0.0 
 NOE>    asymptote  surface 2.0 
 NOE>    msoexponent surface 1 
 NOE>    masymptote  surface -0.1 
 NOE>    mrswitch    surface 1.0 
 NOE>  end 
 CNSsolve>  end if 
 CNSsolve> 
 CNSsolve>  flag excl ncs end 
 CNSsolve>  evaluate ($nrig = 0) 
 EVALUATE: symbol $NRIG set to    0.00000     (real)
 CNSsolve>  evaluate ($nfirst = 1) 
 EVALUATE: symbol $NFIRST set to    1.00000     (real)
 CNSsolve>  evaluate ($bestair = 0) 
 EVALUATE: symbol $BESTAIR set to    0.00000     (real)
 CNSsolve> 
 CNSsolve>  if ($SaProtocol.rigidmini eq true) then 
 NEXTCD: condition evaluated as false
 CNSsolve>    while ($nrig < $SaProtocol.ntrials) loop trials 
 CNSsolve> 
 CNSsolve>      evaluate ($nrig = $nrig + 1) 
 CNSsolve> 
 CNSsolve>      if ( $log_level = verbose ) then 
 CNSsolve>        set message=normal echo=on end 
 CNSsolve>       else 
 CNSsolve>        set message=off echo=off end 
 CNSsolve>      end if 
 CNSsolve> 
 CNSsolve>      if ($SaProtocol.randorien eq true) then 
 CNSsolve>        @RUN:protocols/random_rotations.cns 
 ASSFIL: file random_rotations.cns opened.
 CNSsolve>! random_rotations.cns 
 CNSsolve>!    Perform a random rotation 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve>!minimal spacing distance 
 CNSsolve>  evaluate ($minispacing = 25.0) 
 CNSsolve> 
 CNSsolve>!first find the largest dimension of all molecules 
 CNSsolve>  evaluate ($ncount = 0) 
 CNSsolve> 
 CNSsolve>  evaluate ($mxdim = 0) 
 CNSsolve>  evaluate ($midim = 1000) 
 CNSsolve>  while ($ncount < $data.ncomponents) loop nloop1 
 CNSsolve>    evaluate ($ncount = $ncount +1) 
 CNSsolve>    evaluate ($watersegname_$ncount = "WAT" + encode($ncount)) 
 CNSsolve>    show max (x) (segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount) 
 CNSsolve>    evaluate ($xdim = $result) 
 CNSsolve>    show max (y) (segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount) 
 CNSsolve>    evaluate ($ydim = $result) 
 CNSsolve>    show max (z) (segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount) 
 CNSsolve>    evaluate ($zdim = $result) 
 CNSsolve>    show min (x) (segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount) 
 CNSsolve>    evaluate ($xdim = $xdim - $result) 
 CNSsolve>    show min (y) (segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount) 
 CNSsolve>    evaluate ($ydim = $ydim - $result) 
 CNSsolve>    show min (z) (segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount) 
 CNSsolve>    evaluate ($zdim = $zdim - $result) 
 CNSsolve>    if ($xdim > $mxdim) then 
 CNSsolve>      evaluate ($mxdim = $xdim) 
 CNSsolve>    end if 
 CNSsolve>    if ($xdim < $midim) then 
 CNSsolve>      evaluate ($midim = $xdim) 
 CNSsolve>    end if 
 CNSsolve>    if ($ydim > $mxdim) then 
 CNSsolve>      evaluate ($mxdim = $ydim) 
 CNSsolve>    end if 
 CNSsolve>    if ($ydim < $midim) then 
 CNSsolve>      evaluate ($midim = $ydim) 
 CNSsolve>    end if 
 CNSsolve>    if ($zdim > $mxdim) then 
 CNSsolve>      evaluate ($mxdim = $zdim) 
 CNSsolve>    end if 
 CNSsolve>    if ($zdim < $midim) then 
 CNSsolve>      evaluate ($midim = $zdim) 
 CNSsolve>    end if 
 CNSsolve>  end loop nloop2 
 CNSsolve> 
 CNSsolve>  evaluate ($spacing=max($minispacing,10+$mxdim-$midim)) 
 CNSsolve>  DISPLAY INITIAL SPACING SET TO $spacing ANGSTROM 
 CNSsolve> 
 CNSsolve>  evaluate ($trdis=$spacing/2) 
 CNSsolve>  evaluate ($trc=sqrt($spacing**2 - $trdis**2)) 
 CNSsolve>  evaluate ($trd=sqrt($spacing**2 - $trdis**2)) 
 CNSsolve> 
 CNSsolve>  evaluate ($ncount = 0) 
 CNSsolve>  while ($ncount < $data.ncomponents) loop nloop1 
 CNSsolve>    evaluate ($ncount = $ncount +1) 
 CNSsolve>    evaluate ($watersegname_$ncount = "WAT" + encode($ncount)) 
 CNSsolve>    coor orient sele=(segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount) end 
 CNSsolve>    do (xcomp = x) (segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount ) 
 CNSsolve>    do (ycomp = y) (segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount) 
 CNSsolve>    do (zcomp = z) (segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount) 
 CNSsolve>  end loop nloop1 
 CNSsolve>  do (x = xcomp) (not (resn ANI or resn XAN or resn DAN)) 
 CNSsolve>  do (y = ycomp) (not (resn ANI or resn XAN or resn DAN)) 
 CNSsolve>  do (z = zcomp) (not (resn ANI or resn XAN or resn DAN)) 
 CNSsolve> 
 CNSsolve>  evaluate ($ncount = 0) 
 CNSsolve> 
 CNSsolve>  while ($ncount < $data.ncomponents) loop nloop2 
 CNSsolve>    evaluate ($ncount = $ncount +1) 
 CNSsolve>    show ave (x) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>    evaluate ($xdis=-$result) 
 CNSsolve>    show ave (y) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>    evaluate ($ydis=-$result) 
 CNSsolve>    show ave (z) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>    evaluate ($zdis=-$result) 
 CNSsolve>    coor trans sele=(segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount) vector=($xdis,$ydis,$zdis) end 
 CNSsolve>  end loop nloop2 
 CNSsolve> 
 CNSsolve>  show max (x) (segid $Toppar.prot_segid_1) 
 CNSsolve>  evaluate ($xt = -$trdis - $result ) 
 CNSsolve>  coor trans sele=(segid $Toppar.prot_segid_1 or segid $watersegname_1) vector=($xt,0,0) end 
 CNSsolve>  if ($data.ncomponents>1) then 
 CNSsolve>    show min (x) (segid $Toppar.prot_segid_2) 
 CNSsolve>    evaluate ($xt = $trdis - $result ) 
 CNSsolve>    coor trans sele=(segid $Toppar.prot_segid_2 or segid $watersegname_2) vector=($xt,0,0) end 
 CNSsolve>  end if 
 CNSsolve>  if ($data.ncomponents>2) then 
 CNSsolve>    show min (y) (segid $Toppar.prot_segid_3) 
 CNSsolve>    evaluate ($yt = $trc - $result ) 
 CNSsolve>    coor trans sele=(segid $Toppar.prot_segid_3 or segid $watersegname_3) vector=(0,$yt,0) end 
 CNSsolve>  end if 
 CNSsolve>  if ($data.ncomponents>3) then 
 CNSsolve>    show min (y) (segid $Toppar.prot_segid_4) 
 CNSsolve>    evaluate ($yt = 0.5 * ($trc - $result) ) 
 CNSsolve>    show min (z) (segid $Toppar.prot_segid_4) 
 CNSsolve>    evaluate ($zt = $trd - $result ) 
 CNSsolve>    coor trans sele=(segid $Toppar.prot_segid_4 or segid $watersegname_4) vector=(0,$yt,$zt) end 
 CNSsolve>  end if 
 CNSsolve>  if ($data.ncomponents>4) then 
 CNSsolve>    show min (y) (segid $Toppar.prot_segid_5) 
 CNSsolve>    evaluate ($yt = 0.5 * ($trc - $result) ) 
 CNSsolve>    show min (z) (segid $Toppar.prot_segid_5) 
 CNSsolve>    evaluate ($zt = -($trd - $result) ) 
 CNSsolve>    coor trans sele=(segid $Toppar.prot_segid_5 or segid $watersegname_5) vector=(0,$yt,$zt) end 
 CNSsolve>  end if 
 CNSsolve>  if ($data.ncomponents>5) then 
 CNSsolve>    evaluate ($ncount = 0) 
 CNSsolve>    while ($ncount < $data.ncomponents) loop nloop2 
 CNSsolve>      evaluate ($ncount = $ncount +1) 
 CNSsolve>      show ave (x) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>      evaluate ($xdis=-$result) 
 CNSsolve>      show ave (y) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>      evaluate ($ydis=-$result) 
 CNSsolve>      show ave (z) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>      evaluate ($zdis=-$result) 
 CNSsolve>      coor trans sele=(segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount) vector=($xdis,$ydis,$zdis) end 
 CNSsolve>    end loop nloop2 
 CNSsolve> 
 CNSsolve>    show max (x) (segid $Toppar.prot_segid_1) 
 CNSsolve>    evaluate ($xt = -$trdis - $result ) 
 CNSsolve>    coor trans sele=(segid $Toppar.prot_segid_1 or segid $watersegname_1) vector=($xt,0,0) end 
 CNSsolve>    show min (x) (segid $Toppar.prot_segid_2) 
 CNSsolve>    evaluate ($xt = $trdis - $result ) 
 CNSsolve>    coor trans sele=(segid $Toppar.prot_segid_2 or segid $watersegname_2) vector=($xt,0,0) end 
 CNSsolve>    show max (y) (segid $Toppar.prot_segid_3) 
 CNSsolve>    evaluate ($yt = -$trdis - $result ) 
 CNSsolve>    coor trans sele=(segid $Toppar.prot_segid_3 or segid $watersegname_3) vector=(0,$yt,0) end 
 CNSsolve>    show min (y) (segid $Toppar.prot_segid_4) 
 CNSsolve>    evaluate ($yt = $trdis - $result ) 
 CNSsolve>    coor trans sele=(segid $Toppar.prot_segid_4 or segid $watersegname_4) vector=(0,$yt,0) end 
 CNSsolve>    show max (z) (segid $Toppar.prot_segid_5) 
 CNSsolve>    evaluate ($zt = -$trdis - $result ) 
 CNSsolve>    coor trans sele=(segid $Toppar.prot_segid_5 or segid $watersegname_5) vector=(0,0,$zt) end 
 CNSsolve>    show min (z) (segid $Toppar.prot_segid_6) 
 CNSsolve>    evaluate ($zt = $trdis - $result ) 
 CNSsolve>    coor trans sele=(segid $Toppar.prot_segid_6 or segid $watersegname_6) vector=(0,0,$zt) end 
 CNSsolve>  end if 
 CNSsolve> 
 CNSsolve>  !random translation within a 10A cube 
 CNSsolve>  evaluate ($ncount = 0) 
 CNSsolve>  while ($ncount < $data.ncomponents) loop nloop3 
 CNSsolve>    evaluate ($ncount = $ncount +1) 
 CNSsolve>    evaluate ($xd = 10.0 * (0.5 - ran())) 
 CNSsolve>    evaluate ($yd = 10.0 * (0.5 - ran())) 
 CNSsolve>    evaluate ($zd = 10.0 * (0.5 - ran())) 
 CNSsolve>    coor trans sele=(segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount) vector=($xd,$yd,$zd) end 
 CNSsolve>  end loop nloop3 
 CNSsolve> 
 CNSsolve>!random rotation of molecules 
 CNSsolve>  evaluate ($ncount = 0) 
 CNSsolve>  while ($ncount < $data.ncomponents) loop nloop4 
 CNSsolve>    evaluate ($ncount = $ncount +1) 
 CNSsolve> 
 CNSsolve>    show aver (x) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>    evaluate ($xc = $result) 
 CNSsolve>    show aver (y) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>    evaluate ($yc = $result) 
 CNSsolve>    show aver (z) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>    evaluate ($zc = $result) 
 CNSsolve> 
 CNSsolve>    @RUN:protocols/get_random_rotation.cns(Rotation=$rand_rot;) 
 ASSFIL: file get_random_rotation.cns opened.
 CNSsolve>! get_random_rotation.cns 
 CNSsolve>!    Define a random rotation 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve>{* 
 CNSsolve>   The random rotation is calculated by taking a random unit quaternion, 
 CNSsolve>   so that all rotations are uniformely distributed. For more details, see 
 CNSsolve>   "Quaternions in molecular modeling" Charles F.F. Karney 
 CNSsolve>   Journal of Molecular Graphics and Modelling 25 (2007) 595-604 
 CNSsolve> 
 CNSsolve>   Original author: Christophe Schmidt 
 CNSsolve>   Modularized it: Gydo van Zundert 
 CNSsolve> 
 CNSsolve>   Parameters 
 CNSsolve>   ---------- 
 CNSsolve>       Rotation : A struct which will hold the random rotation 
 CNSsolve> 
 CNSsolve>       Type : Optional string, either 'Quaternion' or 'Matrix' 
 CNSsolve>           Determines whether the random rotation is expressed as a quaternion or a matrix 
 CNSsolve> 
 CNSsolve>   Note 
 CNSsolve>   ---- 
 CNSsolve>       There is no need in general to specify the Type as a matrix when performing the rotation. 
 CNSsolve> 
 CNSsolve>   Example: 
 CNSsolve>   >>>> ! $rand_rot does NOT have to exist currently 
 CNSsolve>   >>>> @RUN:protocols/get_random_rotation.cns(Rotation=$rand_rot;) 
 CNSsolve>   >>>> coor rotate 
 CNSsolve>   >>>>    quaternion $rand_rot.q0 $rand_rot.q1 $rand_rot.q2 $rand_rot.q3 
 CNSsolve>   >>>>    selection=(all) 
 CNSsolve>   >>>> end 
 CNSsolve> 
 CNSsolve>   Example using a rotation matrix: 
 CNSsolve>   >>>> @RUN:protocols/get_random_rotation.cns(Rotation=$rr; Type='Matrix';) 
 CNSsolve>   >>>> coor rotate 
 CNSsolve>   >>>>    matrix $rr.a11 $rr.a12 $rr.a13 
 CNSsolve>   >>>>           $rr.a21 $rr.a22 $rr.a23 
 CNSsolve>   >>>>           $rr.a31 $rr.a32 $rr.a33 
 CNSsolve>   >>>>    selection=(all) 
 CNSsolve>   >>>> end 
 CNSsolve>*} 
 CNSsolve> 
 CNSsolve>module {random_rotation} (Rotation; 
 MODULE-DECLARATION>                          Type='Quaternion'; 
 MODULE-DECLARATION>                          ) 
 CNSsolve> 
 CNSsolve>    !1. Generate random e1 e2 e3 and e4 in [-1, 1] so that e1^2 + e2^2 < 1 and e3^2+e4^2 < 1 
 CNSsolve>    evaluate ($RRM_e1 = random() * 2 - 1) 
 CNSsolve>    evaluate ($RRM_e2 = random() * 2 - 1) 
 CNSsolve>    evaluate ($RRM_s1 = ($RRM_e1)*($RRM_e1) + ($RRM_e2)*($RRM_e2)) 
 CNSsolve>    while ( $RRM_s1  >= 1) loop s1loop 
 CNSsolve>      evaluate ($RRM_e1 = random() * 2 - 1) 
 CNSsolve>      evaluate ($RRM_e2 = random() * 2 - 1) 
 CNSsolve>      evaluate ($RRM_s1 = ($RRM_e1)*($RRM_e1) + ($RRM_e2)*($RRM_e2)) 
 CNSsolve>    end loop s1loop 
 CNSsolve> 
 CNSsolve>    evaluate ($RRM_e3 = random() * 2 - 1) 
 CNSsolve>    evaluate ($RRM_e4 = random() * 2 - 1) 
 CNSsolve>    evaluate ($RRM_s2 = ($RRM_e3)*($RRM_e3) + ($RRM_e4)*($RRM_e4)) 
 CNSsolve>    while ( $RRM_s2  >= 1) loop s2loop 
 CNSsolve>      evaluate ($RRM_e3 = random() * 2 - 1) 
 CNSsolve>      evaluate ($RRM_e4 = random() * 2 - 1) 
 CNSsolve>      evaluate ($RRM_s2 = ($RRM_e3)*($RRM_e3) + ($RRM_e4)*($RRM_e4)) 
 CNSsolve>    end loop s2loop 
 CNSsolve> 
 CNSsolve>    !2. the quaternion q0 q1 q2 q3 
 CNSsolve>    evaluate($RRM_q0 = $RRM_e1) 
 CNSsolve>    evaluate($RRM_q1 = $RRM_e2) 
 CNSsolve>    evaluate($RRM_q2 = $RRM_e3 * sqrt((1 - $RRM_s1)/$RRM_s2) ) 
 CNSsolve>    evaluate($RRM_q3 = $RRM_e4 * sqrt((1 - $RRM_s1)/$RRM_s2) ) 
 CNSsolve> 
 CNSsolve>    ! package it in a struct 
 CNSsolve>    if (&Type='Quaternion') then 
 CNSsolve>        evaluate(&Rotation.q0 = $RRM_q0) 
 CNSsolve>        evaluate(&Rotation.q1 = $RRM_q1) 
 CNSsolve>        evaluate(&Rotation.q2 = $RRM_q2) 
 CNSsolve>        evaluate(&Rotation.q3 = $RRM_q3) 
 CNSsolve>    elseif (&Type='Matrix') then 
 CNSsolve>        evaluate (&Rotation.a11 = $RRM_q0 * $RRM_q0  +  $RRM_q1 * $RRM_q1  -  $RRM_q2 * $RRM_q2  -  $RRM_q3 * $RRM_q3) 
 CNSsolve>        evaluate (&Rotation.a12 = 2 * ($RRM_q1 * $RRM_q2 - $RRM_q0 * $RRM_q3) ) 
 CNSsolve>        evaluate (&Rotation.a13 = 2 * ($RRM_q1 * $RRM_q3 + $RRM_q0 * $RRM_q2) ) 
 CNSsolve>        evaluate (&Rotation.a21 = 2 * ($RRM_q1 * $RRM_q2 + $RRM_q0 * $RRM_q3) ) 
 CNSsolve>        evaluate (&Rotation.a22 = $RRM_q0 * $RRM_q0  -  $RRM_q1 * $RRM_q1  +  $RRM_q2 * $RRM_q2  -  $RRM_q3 * $RRM_q3) 
 CNSsolve>        evaluate (&Rotation.a23 = 2 * ($RRM_q2 * $RRM_q3 - $RRM_q0 * $RRM_q1) ) 
 CNSsolve>        evaluate (&Rotation.a31 = 2 * ($RRM_q1 * $RRM_q3 - $RRM_q0 * $RRM_q2) ) 
 CNSsolve>        evaluate (&Rotation.a32 = 2 * ($RRM_q2 * $RRM_q3 + $RRM_q0 * $RRM_q1) ) 
 CNSsolve>        evaluate (&Rotation.a33 = $RRM_q0 * $RRM_q0  -  $RRM_q1 * $RRM_q1  -  $RRM_q2 * $RRM_q2  +  $RRM_q3 * $RRM_q3) 
 CNSsolve>    end if 
 CNSsolve>    coor 
 CNSsolve>      center=($xc $yc $zc) 
 CNSsolve>      rotate quaternion $rand_rot.q0 $rand_rot.q1 $rand_rot.q2 $rand_rot.q3 
 CNSsolve>      sele=(segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount) 
 CNSsolve>    end 
 CNSsolve> 
 CNSsolve>  end loop nloop4 
 CNSsolve> 
 CNSsolve>!check if symmetry is used and reposition if needed 
 CNSsolve>  if ($data.flags.sym eq true) then 
 CNSsolve> 
 CNSsolve>    evaluate ($trdis = $trdis + 20) 
 CNSsolve> 
 CNSsolve>    if ($data.ncomponents = 2) then 
 CNSsolve>      if ($data.numc2sym > 0) then 
 CNSsolve>        @RUN:protocols/center.cns 
 ASSFIL: file center.cns opened.
 CNSsolve>! center.cns 
 CNSsolve>!    Move molecules to the center and apply random rotation 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve>! center molecules 
 CNSsolve>    evaluate ($ncount = 0) 
 CNSsolve>    while ($ncount < $data.ncomponents) loop nsloop2 
 CNSsolve>      evaluate ($ncount = $ncount +1) 
 CNSsolve>      show ave (x) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>      evaluate ($xdis=-$result) 
 CNSsolve>      show ave (y) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>      evaluate ($ydis=-$result) 
 CNSsolve>      show ave (z) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>      evaluate ($zdis=-$result) 
 CNSsolve>      coor trans sele=(segid $Toppar.prot_segid_$ncount) vector=($xdis,$ydis,$zdis) end 
 CNSsolve>    end loop nsloop2 
 CNSsolve>    coor orient sele=(segid $Toppar.prot_segid_1) end 
 CNSsolve>    do (xcomp = x) (segid $Toppar.prot_segid_1) 
 CNSsolve>    do (ycomp = y) (segid $Toppar.prot_segid_1) 
 CNSsolve>    do (zcomp = z) (segid $Toppar.prot_segid_1) 
 CNSsolve>    show max (x) (segid $Toppar.prot_segid_1) 
 CNSsolve>    eval ($xmax = $result) 
 CNSsolve>    show (resid) (attr x >= $xmax and segid $Toppar.prot_segid_1) 
 CNSsolve>    eval ($res1 = $result) 
 CNSsolve>    show (name) (attr x >= $xmax and segid $Toppar.prot_segid_1) 
 CNSsolve>    eval ($atm1 = $result) 
 CNSsolve>    show (x) (name $atm1 and resid $res1 and segid $Toppar.prot_segid_1) 
 CNSsolve>    eval ($xre = $result) 
 CNSsolve>    show (y) (name $atm1 and resid $res1 and segid $Toppar.prot_segid_1) 
 CNSsolve>    eval ($yre = $result) 
 CNSsolve>    show (z) (name $atm1 and resid $res1 and segid $Toppar.prot_segid_1) 
 CNSsolve>    eval ($zre = $result) 
 CNSsolve>    evaluate ($ncount = 1) 
 CNSsolve>    while ($ncount < $data.ncomponents) loop nloop1 
 CNSsolve>      evaluate ($ncount = $ncount +1) 
 CNSsolve>      coor orient sele=(segid $Toppar.prot_segid_$ncount) end 
 CNSsolve>      show (x) (name $atm1 and resid $res1 and segid $Toppar.prot_segid_$ncount) 
 CNSsolve>      eval ($xst = $result) 
 CNSsolve>      eval ($xxdiff = abs($xre - $xst)) 
 CNSsolve>      do (xcomp = x) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>      do (ycomp = y) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>      do (zcomp = z) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>      if ($xxdiff > 5.0) then 
 CNSsolve>        do (xcomp = -x) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>        do (ycomp = -y)  (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>        do (zcomp = z) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>      end if 
 CNSsolve>      do (x = xcomp) (not (resn DAN or resn ANI or resn XAN)) 
 CNSsolve>      do (y = ycomp) (not (resn DAN or resn ANI or resn XAN)) 
 CNSsolve>      do (z = zcomp) (not (resn DAN or resn ANI or resn XAN)) 
 CNSsolve>      show (y) (name $atm1 and resid $res1 and segid $Toppar.prot_segid_$ncount) 
 CNSsolve>      eval ($yst = $result) 
 CNSsolve>      eval ($yydiff = abs($yre - $yst)) 
 CNSsolve>      if ($yydiff > 5.0) then 
 CNSsolve>        do (xcomp = x)  (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>        do (ycomp = -y) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>        do (zcomp = -z) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>      end if 
 CNSsolve>      do (x = xcomp) (not (resn DAN or resn ANI or resn XAN)) 
 CNSsolve>      do (y = ycomp) (not (resn DAN or resn ANI or resn XAN)) 
 CNSsolve>      do (z = zcomp) (not (resn DAN or resn ANI or resn XAN)) 
 CNSsolve>    end loop nloop1 
 CNSsolve> 
 CNSsolve>    @RUN:protocols/get_random_rotation.cns(Rotation=$rand_rot;) 
 ASSFIL: file get_random_rotation.cns opened.
 CNSsolve>! get_random_rotation.cns 
 CNSsolve>!    Define a random rotation 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve>{* 
 CNSsolve>   The random rotation is calculated by taking a random unit quaternion, 
 CNSsolve>   so that all rotations are uniformely distributed. For more details, see 
 CNSsolve>   "Quaternions in molecular modeling" Charles F.F. Karney 
 CNSsolve>   Journal of Molecular Graphics and Modelling 25 (2007) 595-604 
 CNSsolve> 
 CNSsolve>   Original author: Christophe Schmidt 
 CNSsolve>   Modularized it: Gydo van Zundert 
 CNSsolve> 
 CNSsolve>   Parameters 
 CNSsolve>   ---------- 
 CNSsolve>       Rotation : A struct which will hold the random rotation 
 CNSsolve> 
 CNSsolve>       Type : Optional string, either 'Quaternion' or 'Matrix' 
 CNSsolve>           Determines whether the random rotation is expressed as a quaternion or a matrix 
 CNSsolve> 
 CNSsolve>   Note 
 CNSsolve>   ---- 
 CNSsolve>       There is no need in general to specify the Type as a matrix when performing the rotation. 
 CNSsolve> 
 CNSsolve>   Example: 
 CNSsolve>   >>>> ! $rand_rot does NOT have to exist currently 
 CNSsolve>   >>>> @RUN:protocols/get_random_rotation.cns(Rotation=$rand_rot;) 
 CNSsolve>   >>>> coor rotate 
 CNSsolve>   >>>>    quaternion $rand_rot.q0 $rand_rot.q1 $rand_rot.q2 $rand_rot.q3 
 CNSsolve>   >>>>    selection=(all) 
 CNSsolve>   >>>> end 
 CNSsolve> 
 CNSsolve>   Example using a rotation matrix: 
 CNSsolve>   >>>> @RUN:protocols/get_random_rotation.cns(Rotation=$rr; Type='Matrix';) 
 CNSsolve>   >>>> coor rotate 
 CNSsolve>   >>>>    matrix $rr.a11 $rr.a12 $rr.a13 
 CNSsolve>   >>>>           $rr.a21 $rr.a22 $rr.a23 
 CNSsolve>   >>>>           $rr.a31 $rr.a32 $rr.a33 
 CNSsolve>   >>>>    selection=(all) 
 CNSsolve>   >>>> end 
 CNSsolve>*} 
 CNSsolve> 
 CNSsolve>module {random_rotation} (Rotation; 
 MODULE-DECLARATION>                          Type='Quaternion'; 
 MODULE-DECLARATION>                          ) 
 CNSsolve> 
 CNSsolve>    !1. Generate random e1 e2 e3 and e4 in [-1, 1] so that e1^2 + e2^2 < 1 and e3^2+e4^2 < 1 
 CNSsolve>    evaluate ($RRM_e1 = random() * 2 - 1) 
 CNSsolve>    evaluate ($RRM_e2 = random() * 2 - 1) 
 CNSsolve>    evaluate ($RRM_s1 = ($RRM_e1)*($RRM_e1) + ($RRM_e2)*($RRM_e2)) 
 CNSsolve>    while ( $RRM_s1  >= 1) loop s1loop 
 CNSsolve>      evaluate ($RRM_e1 = random() * 2 - 1) 
 CNSsolve>      evaluate ($RRM_e2 = random() * 2 - 1) 
 CNSsolve>      evaluate ($RRM_s1 = ($RRM_e1)*($RRM_e1) + ($RRM_e2)*($RRM_e2)) 
 CNSsolve>    end loop s1loop 
 CNSsolve> 
 CNSsolve>    evaluate ($RRM_e3 = random() * 2 - 1) 
 CNSsolve>    evaluate ($RRM_e4 = random() * 2 - 1) 
 CNSsolve>    evaluate ($RRM_s2 = ($RRM_e3)*($RRM_e3) + ($RRM_e4)*($RRM_e4)) 
 CNSsolve>    while ( $RRM_s2  >= 1) loop s2loop 
 CNSsolve>      evaluate ($RRM_e3 = random() * 2 - 1) 
 CNSsolve>      evaluate ($RRM_e4 = random() * 2 - 1) 
 CNSsolve>      evaluate ($RRM_s2 = ($RRM_e3)*($RRM_e3) + ($RRM_e4)*($RRM_e4)) 
 CNSsolve>    end loop s2loop 
 CNSsolve> 
 CNSsolve>    !2. the quaternion q0 q1 q2 q3 
 CNSsolve>    evaluate($RRM_q0 = $RRM_e1) 
 CNSsolve>    evaluate($RRM_q1 = $RRM_e2) 
 CNSsolve>    evaluate($RRM_q2 = $RRM_e3 * sqrt((1 - $RRM_s1)/$RRM_s2) ) 
 CNSsolve>    evaluate($RRM_q3 = $RRM_e4 * sqrt((1 - $RRM_s1)/$RRM_s2) ) 
 CNSsolve> 
 CNSsolve>    ! package it in a struct 
 CNSsolve>    if (&Type='Quaternion') then 
 CNSsolve>        evaluate(&Rotation.q0 = $RRM_q0) 
 CNSsolve>        evaluate(&Rotation.q1 = $RRM_q1) 
 CNSsolve>        evaluate(&Rotation.q2 = $RRM_q2) 
 CNSsolve>        evaluate(&Rotation.q3 = $RRM_q3) 
 CNSsolve>    elseif (&Type='Matrix') then 
 CNSsolve>        evaluate (&Rotation.a11 = $RRM_q0 * $RRM_q0  +  $RRM_q1 * $RRM_q1  -  $RRM_q2 * $RRM_q2  -  $RRM_q3 * $RRM_q3) 
 CNSsolve>        evaluate (&Rotation.a12 = 2 * ($RRM_q1 * $RRM_q2 - $RRM_q0 * $RRM_q3) ) 
 CNSsolve>        evaluate (&Rotation.a13 = 2 * ($RRM_q1 * $RRM_q3 + $RRM_q0 * $RRM_q2) ) 
 CNSsolve>        evaluate (&Rotation.a21 = 2 * ($RRM_q1 * $RRM_q2 + $RRM_q0 * $RRM_q3) ) 
 CNSsolve>        evaluate (&Rotation.a22 = $RRM_q0 * $RRM_q0  -  $RRM_q1 * $RRM_q1  +  $RRM_q2 * $RRM_q2  -  $RRM_q3 * $RRM_q3) 
 CNSsolve>        evaluate (&Rotation.a23 = 2 * ($RRM_q2 * $RRM_q3 - $RRM_q0 * $RRM_q1) ) 
 CNSsolve>        evaluate (&Rotation.a31 = 2 * ($RRM_q1 * $RRM_q3 - $RRM_q0 * $RRM_q2) ) 
 CNSsolve>        evaluate (&Rotation.a32 = 2 * ($RRM_q2 * $RRM_q3 + $RRM_q0 * $RRM_q1) ) 
 CNSsolve>        evaluate (&Rotation.a33 = $RRM_q0 * $RRM_q0  -  $RRM_q1 * $RRM_q1  -  $RRM_q2 * $RRM_q2  +  $RRM_q3 * $RRM_q3) 
 CNSsolve>    end if 
 CNSsolve>    coor rotate 
 CNSsolve>      center=(0 0 0) 
 CNSsolve>      quaternion $rand_rot.q0 $rand_rot.q1 $rand_rot.q2 $rand_rot.q3 
 CNSsolve>      sele=(all) 
 CNSsolve>    end 
 CNSsolve> 
 CNSsolve>	{* translate and generate symmetric positions by rotation around z *} 
 CNSsolve>        coor trans sele=(all) vector=($trdis,0,0) end 
 CNSsolve>        {* rotate around z axis *} 
 CNSsolve>        evaluate ($xr = 180) 
 CNSsolve>        evaluate ($x1 = cos($xr)) 
 CNSsolve>        evaluate ($x2 = -sin($xr)) 
 CNSsolve>        evaluate ($x3 = 0 ) 
 CNSsolve>        evaluate ($y1 = sin($xr)) 
 CNSsolve>        evaluate ($y2 = cos($xr)) 
 CNSsolve>        evaluate ($y3 = 0 ) 
 CNSsolve>        evaluate ($z1 = 0 ) 
 CNSsolve>        evaluate ($z2 = 0 ) 
 CNSsolve>        evaluate ($z3 = 1 ) 
 CNSsolve>        coor 
 CNSsolve>          center=(0 0 0) 
 CNSsolve>          rotate matrix=($x1 $x2 $x3) ($y1 $y2 $y3) ($z1 $z2 $z3) 
 CNSsolve>          sele=(segid $Toppar.prot_segid_2 or segid $watersegname_2) 
 CNSsolve>        end 
 CNSsolve>      end if 
 CNSsolve>    end if 
 CNSsolve> 
 CNSsolve>    if ($data.ncomponents = 3) then 
 CNSsolve>      if ($data.numc3sym > 0) then 
 CNSsolve>        @RUN:protocols/center.cns 
 ASSFIL: file center.cns opened.
 CNSsolve>! center.cns 
 CNSsolve>!    Move molecules to the center and apply random rotation 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve>! center molecules 
 CNSsolve>    evaluate ($ncount = 0) 
 CNSsolve>    while ($ncount < $data.ncomponents) loop nsloop2 
 CNSsolve>      evaluate ($ncount = $ncount +1) 
 CNSsolve>      show ave (x) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>      evaluate ($xdis=-$result) 
 CNSsolve>      show ave (y) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>      evaluate ($ydis=-$result) 
 CNSsolve>      show ave (z) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>      evaluate ($zdis=-$result) 
 CNSsolve>      coor trans sele=(segid $Toppar.prot_segid_$ncount) vector=($xdis,$ydis,$zdis) end 
 CNSsolve>    end loop nsloop2 
 CNSsolve>    coor orient sele=(segid $Toppar.prot_segid_1) end 
 CNSsolve>    do (xcomp = x) (segid $Toppar.prot_segid_1) 
 CNSsolve>    do (ycomp = y) (segid $Toppar.prot_segid_1) 
 CNSsolve>    do (zcomp = z) (segid $Toppar.prot_segid_1) 
 CNSsolve>    show max (x) (segid $Toppar.prot_segid_1) 
 CNSsolve>    eval ($xmax = $result) 
 CNSsolve>    show (resid) (attr x >= $xmax and segid $Toppar.prot_segid_1) 
 CNSsolve>    eval ($res1 = $result) 
 CNSsolve>    show (name) (attr x >= $xmax and segid $Toppar.prot_segid_1) 
 CNSsolve>    eval ($atm1 = $result) 
 CNSsolve>    show (x) (name $atm1 and resid $res1 and segid $Toppar.prot_segid_1) 
 CNSsolve>    eval ($xre = $result) 
 CNSsolve>    show (y) (name $atm1 and resid $res1 and segid $Toppar.prot_segid_1) 
 CNSsolve>    eval ($yre = $result) 
 CNSsolve>    show (z) (name $atm1 and resid $res1 and segid $Toppar.prot_segid_1) 
 CNSsolve>    eval ($zre = $result) 
 CNSsolve>    evaluate ($ncount = 1) 
 CNSsolve>    while ($ncount < $data.ncomponents) loop nloop1 
 CNSsolve>      evaluate ($ncount = $ncount +1) 
 CNSsolve>      coor orient sele=(segid $Toppar.prot_segid_$ncount) end 
 CNSsolve>      show (x) (name $atm1 and resid $res1 and segid $Toppar.prot_segid_$ncount) 
 CNSsolve>      eval ($xst = $result) 
 CNSsolve>      eval ($xxdiff = abs($xre - $xst)) 
 CNSsolve>      do (xcomp = x) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>      do (ycomp = y) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>      do (zcomp = z) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>      if ($xxdiff > 5.0) then 
 CNSsolve>        do (xcomp = -x) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>        do (ycomp = -y)  (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>        do (zcomp = z) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>      end if 
 CNSsolve>      do (x = xcomp) (not (resn DAN or resn ANI or resn XAN)) 
 CNSsolve>      do (y = ycomp) (not (resn DAN or resn ANI or resn XAN)) 
 CNSsolve>      do (z = zcomp) (not (resn DAN or resn ANI or resn XAN)) 
 CNSsolve>      show (y) (name $atm1 and resid $res1 and segid $Toppar.prot_segid_$ncount) 
 CNSsolve>      eval ($yst = $result) 
 CNSsolve>      eval ($yydiff = abs($yre - $yst)) 
 CNSsolve>      if ($yydiff > 5.0) then 
 CNSsolve>        do (xcomp = x)  (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>        do (ycomp = -y) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>        do (zcomp = -z) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>      end if 
 CNSsolve>      do (x = xcomp) (not (resn DAN or resn ANI or resn XAN)) 
 CNSsolve>      do (y = ycomp) (not (resn DAN or resn ANI or resn XAN)) 
 CNSsolve>      do (z = zcomp) (not (resn DAN or resn ANI or resn XAN)) 
 CNSsolve>    end loop nloop1 
 CNSsolve> 
 CNSsolve>    @RUN:protocols/get_random_rotation.cns(Rotation=$rand_rot;) 
 ASSFIL: file get_random_rotation.cns opened.
 CNSsolve>! get_random_rotation.cns 
 CNSsolve>!    Define a random rotation 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve>{* 
 CNSsolve>   The random rotation is calculated by taking a random unit quaternion, 
 CNSsolve>   so that all rotations are uniformely distributed. For more details, see 
 CNSsolve>   "Quaternions in molecular modeling" Charles F.F. Karney 
 CNSsolve>   Journal of Molecular Graphics and Modelling 25 (2007) 595-604 
 CNSsolve> 
 CNSsolve>   Original author: Christophe Schmidt 
 CNSsolve>   Modularized it: Gydo van Zundert 
 CNSsolve> 
 CNSsolve>   Parameters 
 CNSsolve>   ---------- 
 CNSsolve>       Rotation : A struct which will hold the random rotation 
 CNSsolve> 
 CNSsolve>       Type : Optional string, either 'Quaternion' or 'Matrix' 
 CNSsolve>           Determines whether the random rotation is expressed as a quaternion or a matrix 
 CNSsolve> 
 CNSsolve>   Note 
 CNSsolve>   ---- 
 CNSsolve>       There is no need in general to specify the Type as a matrix when performing the rotation. 
 CNSsolve> 
 CNSsolve>   Example: 
 CNSsolve>   >>>> ! $rand_rot does NOT have to exist currently 
 CNSsolve>   >>>> @RUN:protocols/get_random_rotation.cns(Rotation=$rand_rot;) 
 CNSsolve>   >>>> coor rotate 
 CNSsolve>   >>>>    quaternion $rand_rot.q0 $rand_rot.q1 $rand_rot.q2 $rand_rot.q3 
 CNSsolve>   >>>>    selection=(all) 
 CNSsolve>   >>>> end 
 CNSsolve> 
 CNSsolve>   Example using a rotation matrix: 
 CNSsolve>   >>>> @RUN:protocols/get_random_rotation.cns(Rotation=$rr; Type='Matrix';) 
 CNSsolve>   >>>> coor rotate 
 CNSsolve>   >>>>    matrix $rr.a11 $rr.a12 $rr.a13 
 CNSsolve>   >>>>           $rr.a21 $rr.a22 $rr.a23 
 CNSsolve>   >>>>           $rr.a31 $rr.a32 $rr.a33 
 CNSsolve>   >>>>    selection=(all) 
 CNSsolve>   >>>> end 
 CNSsolve>*} 
 CNSsolve> 
 CNSsolve>module {random_rotation} (Rotation; 
 MODULE-DECLARATION>                          Type='Quaternion'; 
 MODULE-DECLARATION>                          ) 
 CNSsolve> 
 CNSsolve>    !1. Generate random e1 e2 e3 and e4 in [-1, 1] so that e1^2 + e2^2 < 1 and e3^2+e4^2 < 1 
 CNSsolve>    evaluate ($RRM_e1 = random() * 2 - 1) 
 CNSsolve>    evaluate ($RRM_e2 = random() * 2 - 1) 
 CNSsolve>    evaluate ($RRM_s1 = ($RRM_e1)*($RRM_e1) + ($RRM_e2)*($RRM_e2)) 
 CNSsolve>    while ( $RRM_s1  >= 1) loop s1loop 
 CNSsolve>      evaluate ($RRM_e1 = random() * 2 - 1) 
 CNSsolve>      evaluate ($RRM_e2 = random() * 2 - 1) 
 CNSsolve>      evaluate ($RRM_s1 = ($RRM_e1)*($RRM_e1) + ($RRM_e2)*($RRM_e2)) 
 CNSsolve>    end loop s1loop 
 CNSsolve> 
 CNSsolve>    evaluate ($RRM_e3 = random() * 2 - 1) 
 CNSsolve>    evaluate ($RRM_e4 = random() * 2 - 1) 
 CNSsolve>    evaluate ($RRM_s2 = ($RRM_e3)*($RRM_e3) + ($RRM_e4)*($RRM_e4)) 
 CNSsolve>    while ( $RRM_s2  >= 1) loop s2loop 
 CNSsolve>      evaluate ($RRM_e3 = random() * 2 - 1) 
 CNSsolve>      evaluate ($RRM_e4 = random() * 2 - 1) 
 CNSsolve>      evaluate ($RRM_s2 = ($RRM_e3)*($RRM_e3) + ($RRM_e4)*($RRM_e4)) 
 CNSsolve>    end loop s2loop 
 CNSsolve> 
 CNSsolve>    !2. the quaternion q0 q1 q2 q3 
 CNSsolve>    evaluate($RRM_q0 = $RRM_e1) 
 CNSsolve>    evaluate($RRM_q1 = $RRM_e2) 
 CNSsolve>    evaluate($RRM_q2 = $RRM_e3 * sqrt((1 - $RRM_s1)/$RRM_s2) ) 
 CNSsolve>    evaluate($RRM_q3 = $RRM_e4 * sqrt((1 - $RRM_s1)/$RRM_s2) ) 
 CNSsolve> 
 CNSsolve>    ! package it in a struct 
 CNSsolve>    if (&Type='Quaternion') then 
 CNSsolve>        evaluate(&Rotation.q0 = $RRM_q0) 
 CNSsolve>        evaluate(&Rotation.q1 = $RRM_q1) 
 CNSsolve>        evaluate(&Rotation.q2 = $RRM_q2) 
 CNSsolve>        evaluate(&Rotation.q3 = $RRM_q3) 
 CNSsolve>    elseif (&Type='Matrix') then 
 CNSsolve>        evaluate (&Rotation.a11 = $RRM_q0 * $RRM_q0  +  $RRM_q1 * $RRM_q1  -  $RRM_q2 * $RRM_q2  -  $RRM_q3 * $RRM_q3) 
 CNSsolve>        evaluate (&Rotation.a12 = 2 * ($RRM_q1 * $RRM_q2 - $RRM_q0 * $RRM_q3) ) 
 CNSsolve>        evaluate (&Rotation.a13 = 2 * ($RRM_q1 * $RRM_q3 + $RRM_q0 * $RRM_q2) ) 
 CNSsolve>        evaluate (&Rotation.a21 = 2 * ($RRM_q1 * $RRM_q2 + $RRM_q0 * $RRM_q3) ) 
 CNSsolve>        evaluate (&Rotation.a22 = $RRM_q0 * $RRM_q0  -  $RRM_q1 * $RRM_q1  +  $RRM_q2 * $RRM_q2  -  $RRM_q3 * $RRM_q3) 
 CNSsolve>        evaluate (&Rotation.a23 = 2 * ($RRM_q2 * $RRM_q3 - $RRM_q0 * $RRM_q1) ) 
 CNSsolve>        evaluate (&Rotation.a31 = 2 * ($RRM_q1 * $RRM_q3 - $RRM_q0 * $RRM_q2) ) 
 CNSsolve>        evaluate (&Rotation.a32 = 2 * ($RRM_q2 * $RRM_q3 + $RRM_q0 * $RRM_q1) ) 
 CNSsolve>        evaluate (&Rotation.a33 = $RRM_q0 * $RRM_q0  -  $RRM_q1 * $RRM_q1  -  $RRM_q2 * $RRM_q2  +  $RRM_q3 * $RRM_q3) 
 CNSsolve>    end if 
 CNSsolve>    coor rotate 
 CNSsolve>      center=(0 0 0) 
 CNSsolve>      quaternion $rand_rot.q0 $rand_rot.q1 $rand_rot.q2 $rand_rot.q3 
 CNSsolve>      sele=(all) 
 CNSsolve>    end 
 CNSsolve> 
 CNSsolve>	{* translate and generate symmetric positions by rotation around z *} 
 CNSsolve>        coor trans sele=(all) vector=($trdis,0,0) end 
 CNSsolve>        {* rotate around z axis *} 
 CNSsolve>        evaluate ($xr = 120) 
 CNSsolve>        evaluate ($x1 = cos($xr)) 
 CNSsolve>        evaluate ($x2 = -sin($xr)) 
 CNSsolve>        evaluate ($x3 = 0 ) 
 CNSsolve>        evaluate ($y1 = sin($xr)) 
 CNSsolve>        evaluate ($y2 = cos($xr)) 
 CNSsolve>        evaluate ($y3 = 0 ) 
 CNSsolve>        evaluate ($z1 = 0 ) 
 CNSsolve>        evaluate ($z2 = 0 ) 
 CNSsolve>        evaluate ($z3 = 1 ) 
 CNSsolve>        coor 
 CNSsolve>          center=(0 0 0) 
 CNSsolve>          rotate matrix=($x1 $x2 $x3) ($y1 $y2 $y3) ($z1 $z2 $z3) 
 CNSsolve>          sele=(segid $Toppar.prot_segid_2 or segid $watersegname_2) 
 CNSsolve>        end 
 CNSsolve>        evaluate ($xr = 240) 
 CNSsolve>        evaluate ($x1 = cos($xr)) 
 CNSsolve>        evaluate ($x2 = -sin($xr)) 
 CNSsolve>        evaluate ($x3 = 0 ) 
 CNSsolve>        evaluate ($y1 = sin($xr)) 
 CNSsolve>        evaluate ($y2 = cos($xr)) 
 CNSsolve>        evaluate ($y3 = 0 ) 
 CNSsolve>        evaluate ($z1 = 0 ) 
 CNSsolve>        evaluate ($z2 = 0 ) 
 CNSsolve>        evaluate ($z3 = 1 ) 
 CNSsolve>        coor 
 CNSsolve>          center=(0 0 0) 
 CNSsolve>          rotate matrix=($x1 $x2 $x3) ($y1 $y2 $y3) ($z1 $z2 $z3) 
 CNSsolve>          sele=(segid $Toppar.prot_segid_3 or segid $watersegname_3) 
 CNSsolve>        end 
 CNSsolve>      end if 
 CNSsolve>    end if 
 CNSsolve> 
 CNSsolve>    if ($data.ncomponents = 4) then 
 CNSsolve>      if ($data.numc4sym > 0) then 
 CNSsolve>        @RUN:protocols/center.cns 
 ASSFIL: file center.cns opened.
 CNSsolve>! center.cns 
 CNSsolve>!    Move molecules to the center and apply random rotation 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve>! center molecules 
 CNSsolve>    evaluate ($ncount = 0) 
 CNSsolve>    while ($ncount < $data.ncomponents) loop nsloop2 
 CNSsolve>      evaluate ($ncount = $ncount +1) 
 CNSsolve>      show ave (x) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>      evaluate ($xdis=-$result) 
 CNSsolve>      show ave (y) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>      evaluate ($ydis=-$result) 
 CNSsolve>      show ave (z) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>      evaluate ($zdis=-$result) 
 CNSsolve>      coor trans sele=(segid $Toppar.prot_segid_$ncount) vector=($xdis,$ydis,$zdis) end 
 CNSsolve>    end loop nsloop2 
 CNSsolve>    coor orient sele=(segid $Toppar.prot_segid_1) end 
 CNSsolve>    do (xcomp = x) (segid $Toppar.prot_segid_1) 
 CNSsolve>    do (ycomp = y) (segid $Toppar.prot_segid_1) 
 CNSsolve>    do (zcomp = z) (segid $Toppar.prot_segid_1) 
 CNSsolve>    show max (x) (segid $Toppar.prot_segid_1) 
 CNSsolve>    eval ($xmax = $result) 
 CNSsolve>    show (resid) (attr x >= $xmax and segid $Toppar.prot_segid_1) 
 CNSsolve>    eval ($res1 = $result) 
 CNSsolve>    show (name) (attr x >= $xmax and segid $Toppar.prot_segid_1) 
 CNSsolve>    eval ($atm1 = $result) 
 CNSsolve>    show (x) (name $atm1 and resid $res1 and segid $Toppar.prot_segid_1) 
 CNSsolve>    eval ($xre = $result) 
 CNSsolve>    show (y) (name $atm1 and resid $res1 and segid $Toppar.prot_segid_1) 
 CNSsolve>    eval ($yre = $result) 
 CNSsolve>    show (z) (name $atm1 and resid $res1 and segid $Toppar.prot_segid_1) 
 CNSsolve>    eval ($zre = $result) 
 CNSsolve>    evaluate ($ncount = 1) 
 CNSsolve>    while ($ncount < $data.ncomponents) loop nloop1 
 CNSsolve>      evaluate ($ncount = $ncount +1) 
 CNSsolve>      coor orient sele=(segid $Toppar.prot_segid_$ncount) end 
 CNSsolve>      show (x) (name $atm1 and resid $res1 and segid $Toppar.prot_segid_$ncount) 
 CNSsolve>      eval ($xst = $result) 
 CNSsolve>      eval ($xxdiff = abs($xre - $xst)) 
 CNSsolve>      do (xcomp = x) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>      do (ycomp = y) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>      do (zcomp = z) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>      if ($xxdiff > 5.0) then 
 CNSsolve>        do (xcomp = -x) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>        do (ycomp = -y)  (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>        do (zcomp = z) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>      end if 
 CNSsolve>      do (x = xcomp) (not (resn DAN or resn ANI or resn XAN)) 
 CNSsolve>      do (y = ycomp) (not (resn DAN or resn ANI or resn XAN)) 
 CNSsolve>      do (z = zcomp) (not (resn DAN or resn ANI or resn XAN)) 
 CNSsolve>      show (y) (name $atm1 and resid $res1 and segid $Toppar.prot_segid_$ncount) 
 CNSsolve>      eval ($yst = $result) 
 CNSsolve>      eval ($yydiff = abs($yre - $yst)) 
 CNSsolve>      if ($yydiff > 5.0) then 
 CNSsolve>        do (xcomp = x)  (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>        do (ycomp = -y) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>        do (zcomp = -z) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>      end if 
 CNSsolve>      do (x = xcomp) (not (resn DAN or resn ANI or resn XAN)) 
 CNSsolve>      do (y = ycomp) (not (resn DAN or resn ANI or resn XAN)) 
 CNSsolve>      do (z = zcomp) (not (resn DAN or resn ANI or resn XAN)) 
 CNSsolve>    end loop nloop1 
 CNSsolve> 
 CNSsolve>    @RUN:protocols/get_random_rotation.cns(Rotation=$rand_rot;) 
 ASSFIL: file get_random_rotation.cns opened.
 CNSsolve>! get_random_rotation.cns 
 CNSsolve>!    Define a random rotation 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve>{* 
 CNSsolve>   The random rotation is calculated by taking a random unit quaternion, 
 CNSsolve>   so that all rotations are uniformely distributed. For more details, see 
 CNSsolve>   "Quaternions in molecular modeling" Charles F.F. Karney 
 CNSsolve>   Journal of Molecular Graphics and Modelling 25 (2007) 595-604 
 CNSsolve> 
 CNSsolve>   Original author: Christophe Schmidt 
 CNSsolve>   Modularized it: Gydo van Zundert 
 CNSsolve> 
 CNSsolve>   Parameters 
 CNSsolve>   ---------- 
 CNSsolve>       Rotation : A struct which will hold the random rotation 
 CNSsolve> 
 CNSsolve>       Type : Optional string, either 'Quaternion' or 'Matrix' 
 CNSsolve>           Determines whether the random rotation is expressed as a quaternion or a matrix 
 CNSsolve> 
 CNSsolve>   Note 
 CNSsolve>   ---- 
 CNSsolve>       There is no need in general to specify the Type as a matrix when performing the rotation. 
 CNSsolve> 
 CNSsolve>   Example: 
 CNSsolve>   >>>> ! $rand_rot does NOT have to exist currently 
 CNSsolve>   >>>> @RUN:protocols/get_random_rotation.cns(Rotation=$rand_rot;) 
 CNSsolve>   >>>> coor rotate 
 CNSsolve>   >>>>    quaternion $rand_rot.q0 $rand_rot.q1 $rand_rot.q2 $rand_rot.q3 
 CNSsolve>   >>>>    selection=(all) 
 CNSsolve>   >>>> end 
 CNSsolve> 
 CNSsolve>   Example using a rotation matrix: 
 CNSsolve>   >>>> @RUN:protocols/get_random_rotation.cns(Rotation=$rr; Type='Matrix';) 
 CNSsolve>   >>>> coor rotate 
 CNSsolve>   >>>>    matrix $rr.a11 $rr.a12 $rr.a13 
 CNSsolve>   >>>>           $rr.a21 $rr.a22 $rr.a23 
 CNSsolve>   >>>>           $rr.a31 $rr.a32 $rr.a33 
 CNSsolve>   >>>>    selection=(all) 
 CNSsolve>   >>>> end 
 CNSsolve>*} 
 CNSsolve> 
 CNSsolve>module {random_rotation} (Rotation; 
 MODULE-DECLARATION>                          Type='Quaternion'; 
 MODULE-DECLARATION>                          ) 
 CNSsolve> 
 CNSsolve>    !1. Generate random e1 e2 e3 and e4 in [-1, 1] so that e1^2 + e2^2 < 1 and e3^2+e4^2 < 1 
 CNSsolve>    evaluate ($RRM_e1 = random() * 2 - 1) 
 CNSsolve>    evaluate ($RRM_e2 = random() * 2 - 1) 
 CNSsolve>    evaluate ($RRM_s1 = ($RRM_e1)*($RRM_e1) + ($RRM_e2)*($RRM_e2)) 
 CNSsolve>    while ( $RRM_s1  >= 1) loop s1loop 
 CNSsolve>      evaluate ($RRM_e1 = random() * 2 - 1) 
 CNSsolve>      evaluate ($RRM_e2 = random() * 2 - 1) 
 CNSsolve>      evaluate ($RRM_s1 = ($RRM_e1)*($RRM_e1) + ($RRM_e2)*($RRM_e2)) 
 CNSsolve>    end loop s1loop 
 CNSsolve> 
 CNSsolve>    evaluate ($RRM_e3 = random() * 2 - 1) 
 CNSsolve>    evaluate ($RRM_e4 = random() * 2 - 1) 
 CNSsolve>    evaluate ($RRM_s2 = ($RRM_e3)*($RRM_e3) + ($RRM_e4)*($RRM_e4)) 
 CNSsolve>    while ( $RRM_s2  >= 1) loop s2loop 
 CNSsolve>      evaluate ($RRM_e3 = random() * 2 - 1) 
 CNSsolve>      evaluate ($RRM_e4 = random() * 2 - 1) 
 CNSsolve>      evaluate ($RRM_s2 = ($RRM_e3)*($RRM_e3) + ($RRM_e4)*($RRM_e4)) 
 CNSsolve>    end loop s2loop 
 CNSsolve> 
 CNSsolve>    !2. the quaternion q0 q1 q2 q3 
 CNSsolve>    evaluate($RRM_q0 = $RRM_e1) 
 CNSsolve>    evaluate($RRM_q1 = $RRM_e2) 
 CNSsolve>    evaluate($RRM_q2 = $RRM_e3 * sqrt((1 - $RRM_s1)/$RRM_s2) ) 
 CNSsolve>    evaluate($RRM_q3 = $RRM_e4 * sqrt((1 - $RRM_s1)/$RRM_s2) ) 
 CNSsolve> 
 CNSsolve>    ! package it in a struct 
 CNSsolve>    if (&Type='Quaternion') then 
 CNSsolve>        evaluate(&Rotation.q0 = $RRM_q0) 
 CNSsolve>        evaluate(&Rotation.q1 = $RRM_q1) 
 CNSsolve>        evaluate(&Rotation.q2 = $RRM_q2) 
 CNSsolve>        evaluate(&Rotation.q3 = $RRM_q3) 
 CNSsolve>    elseif (&Type='Matrix') then 
 CNSsolve>        evaluate (&Rotation.a11 = $RRM_q0 * $RRM_q0  +  $RRM_q1 * $RRM_q1  -  $RRM_q2 * $RRM_q2  -  $RRM_q3 * $RRM_q3) 
 CNSsolve>        evaluate (&Rotation.a12 = 2 * ($RRM_q1 * $RRM_q2 - $RRM_q0 * $RRM_q3) ) 
 CNSsolve>        evaluate (&Rotation.a13 = 2 * ($RRM_q1 * $RRM_q3 + $RRM_q0 * $RRM_q2) ) 
 CNSsolve>        evaluate (&Rotation.a21 = 2 * ($RRM_q1 * $RRM_q2 + $RRM_q0 * $RRM_q3) ) 
 CNSsolve>        evaluate (&Rotation.a22 = $RRM_q0 * $RRM_q0  -  $RRM_q1 * $RRM_q1  +  $RRM_q2 * $RRM_q2  -  $RRM_q3 * $RRM_q3) 
 CNSsolve>        evaluate (&Rotation.a23 = 2 * ($RRM_q2 * $RRM_q3 - $RRM_q0 * $RRM_q1) ) 
 CNSsolve>        evaluate (&Rotation.a31 = 2 * ($RRM_q1 * $RRM_q3 - $RRM_q0 * $RRM_q2) ) 
 CNSsolve>        evaluate (&Rotation.a32 = 2 * ($RRM_q2 * $RRM_q3 + $RRM_q0 * $RRM_q1) ) 
 CNSsolve>        evaluate (&Rotation.a33 = $RRM_q0 * $RRM_q0  -  $RRM_q1 * $RRM_q1  -  $RRM_q2 * $RRM_q2  +  $RRM_q3 * $RRM_q3) 
 CNSsolve>    end if 
 CNSsolve>    coor rotate 
 CNSsolve>      center=(0 0 0) 
 CNSsolve>      quaternion $rand_rot.q0 $rand_rot.q1 $rand_rot.q2 $rand_rot.q3 
 CNSsolve>      sele=(all) 
 CNSsolve>    end 
 CNSsolve> 
 CNSsolve>	{* translate and generate symmetric positions by rotation around z *} 
 CNSsolve>        coor trans sele=(all) vector=($trdis,0,0) end 
 CNSsolve>        {* rotate around z axis *} 
 CNSsolve>        evaluate ($xr = 90) 
 CNSsolve>        evaluate ($x1 = cos($xr)) 
 CNSsolve>        evaluate ($x2 = -sin($xr)) 
 CNSsolve>        evaluate ($x3 = 0 ) 
 CNSsolve>        evaluate ($y1 = sin($xr)) 
 CNSsolve>        evaluate ($y2 = cos($xr)) 
 CNSsolve>        evaluate ($y3 = 0 ) 
 CNSsolve>        evaluate ($z1 = 0 ) 
 CNSsolve>        evaluate ($z2 = 0 ) 
 CNSsolve>        evaluate ($z3 = 1 ) 
 CNSsolve>        coor 
 CNSsolve>          center=(0 0 0) 
 CNSsolve>          rotate matrix=($x1 $x2 $x3) ($y1 $y2 $y3) ($z1 $z2 $z3) 
 CNSsolve>          sele=(segid $Toppar.prot_segid_2 or segid $watersegname_2) 
 CNSsolve>        end 
 CNSsolve>        evaluate ($xr = 180) 
 CNSsolve>        evaluate ($x1 = cos($xr)) 
 CNSsolve>        evaluate ($x2 = -sin($xr)) 
 CNSsolve>        evaluate ($x3 = 0 ) 
 CNSsolve>        evaluate ($y1 = sin($xr)) 
 CNSsolve>        evaluate ($y2 = cos($xr)) 
 CNSsolve>        evaluate ($y3 = 0 ) 
 CNSsolve>        evaluate ($z1 = 0 ) 
 CNSsolve>        evaluate ($z2 = 0 ) 
 CNSsolve>        evaluate ($z3 = 1 ) 
 CNSsolve>        coor 
 CNSsolve>          center=(0 0 0) 
 CNSsolve>          rotate matrix=($x1 $x2 $x3) ($y1 $y2 $y3) ($z1 $z2 $z3) 
 CNSsolve>          sele=(segid $Toppar.prot_segid_3 or segid $watersegname_3) 
 CNSsolve>        end 
 CNSsolve>        evaluate ($xr = -90) 
 CNSsolve>        evaluate ($x1 = cos($xr)) 
 CNSsolve>        evaluate ($x2 = -sin($xr)) 
 CNSsolve>        evaluate ($x3 = 0 ) 
 CNSsolve>        evaluate ($y1 = sin($xr)) 
 CNSsolve>        evaluate ($y2 = cos($xr)) 
 CNSsolve>        evaluate ($y3 = 0 ) 
 CNSsolve>        evaluate ($z1 = 0 ) 
 CNSsolve>        evaluate ($z2 = 0 ) 
 CNSsolve>        evaluate ($z3 = 1 ) 
 CNSsolve>        coor 
 CNSsolve>          center=(0 0 0) 
 CNSsolve>          rotate matrix=($x1 $x2 $x3) ($y1 $y2 $y3) ($z1 $z2 $z3) 
 CNSsolve>          sele=(segid $Toppar.prot_segid_4 or segid $watersegname_4) 
 CNSsolve>        end 
 CNSsolve>      end if 
 CNSsolve>    end if 
 CNSsolve> 
 CNSsolve>    if ($data.ncomponents = 5) then 
 CNSsolve>      if ($data.numc5sym > 0) then 
 CNSsolve>        @RUN:protocols/center.cns 
 ASSFIL: file center.cns opened.
 CNSsolve>! center.cns 
 CNSsolve>!    Move molecules to the center and apply random rotation 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve>! center molecules 
 CNSsolve>    evaluate ($ncount = 0) 
 CNSsolve>    while ($ncount < $data.ncomponents) loop nsloop2 
 CNSsolve>      evaluate ($ncount = $ncount +1) 
 CNSsolve>      show ave (x) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>      evaluate ($xdis=-$result) 
 CNSsolve>      show ave (y) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>      evaluate ($ydis=-$result) 
 CNSsolve>      show ave (z) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>      evaluate ($zdis=-$result) 
 CNSsolve>      coor trans sele=(segid $Toppar.prot_segid_$ncount) vector=($xdis,$ydis,$zdis) end 
 CNSsolve>    end loop nsloop2 
 CNSsolve>    coor orient sele=(segid $Toppar.prot_segid_1) end 
 CNSsolve>    do (xcomp = x) (segid $Toppar.prot_segid_1) 
 CNSsolve>    do (ycomp = y) (segid $Toppar.prot_segid_1) 
 CNSsolve>    do (zcomp = z) (segid $Toppar.prot_segid_1) 
 CNSsolve>    show max (x) (segid $Toppar.prot_segid_1) 
 CNSsolve>    eval ($xmax = $result) 
 CNSsolve>    show (resid) (attr x >= $xmax and segid $Toppar.prot_segid_1) 
 CNSsolve>    eval ($res1 = $result) 
 CNSsolve>    show (name) (attr x >= $xmax and segid $Toppar.prot_segid_1) 
 CNSsolve>    eval ($atm1 = $result) 
 CNSsolve>    show (x) (name $atm1 and resid $res1 and segid $Toppar.prot_segid_1) 
 CNSsolve>    eval ($xre = $result) 
 CNSsolve>    show (y) (name $atm1 and resid $res1 and segid $Toppar.prot_segid_1) 
 CNSsolve>    eval ($yre = $result) 
 CNSsolve>    show (z) (name $atm1 and resid $res1 and segid $Toppar.prot_segid_1) 
 CNSsolve>    eval ($zre = $result) 
 CNSsolve>    evaluate ($ncount = 1) 
 CNSsolve>    while ($ncount < $data.ncomponents) loop nloop1 
 CNSsolve>      evaluate ($ncount = $ncount +1) 
 CNSsolve>      coor orient sele=(segid $Toppar.prot_segid_$ncount) end 
 CNSsolve>      show (x) (name $atm1 and resid $res1 and segid $Toppar.prot_segid_$ncount) 
 CNSsolve>      eval ($xst = $result) 
 CNSsolve>      eval ($xxdiff = abs($xre - $xst)) 
 CNSsolve>      do (xcomp = x) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>      do (ycomp = y) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>      do (zcomp = z) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>      if ($xxdiff > 5.0) then 
 CNSsolve>        do (xcomp = -x) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>        do (ycomp = -y)  (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>        do (zcomp = z) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>      end if 
 CNSsolve>      do (x = xcomp) (not (resn DAN or resn ANI or resn XAN)) 
 CNSsolve>      do (y = ycomp) (not (resn DAN or resn ANI or resn XAN)) 
 CNSsolve>      do (z = zcomp) (not (resn DAN or resn ANI or resn XAN)) 
 CNSsolve>      show (y) (name $atm1 and resid $res1 and segid $Toppar.prot_segid_$ncount) 
 CNSsolve>      eval ($yst = $result) 
 CNSsolve>      eval ($yydiff = abs($yre - $yst)) 
 CNSsolve>      if ($yydiff > 5.0) then 
 CNSsolve>        do (xcomp = x)  (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>        do (ycomp = -y) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>        do (zcomp = -z) (segid $Toppar.prot_segid_$ncount) 
 CNSsolve>      end if 
 CNSsolve>      do (x = xcomp) (not (resn DAN or resn ANI or resn XAN)) 
 CNSsolve>      do (y = ycomp) (not (resn DAN or resn ANI or resn XAN)) 
 CNSsolve>      do (z = zcomp) (not (resn DAN or resn ANI or resn XAN)) 
 CNSsolve>    end loop nloop1 
 CNSsolve> 
 CNSsolve>    @RUN:protocols/get_random_rotation.cns(Rotation=$rand_rot;) 
 ASSFIL: file get_random_rotation.cns opened.
 CNSsolve>! get_random_rotation.cns 
 CNSsolve>!    Define a random rotation 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve>{* 
 CNSsolve>   The random rotation is calculated by taking a random unit quaternion, 
 CNSsolve>   so that all rotations are uniformely distributed. For more details, see 
 CNSsolve>   "Quaternions in molecular modeling" Charles F.F. Karney 
 CNSsolve>   Journal of Molecular Graphics and Modelling 25 (2007) 595-604 
 CNSsolve> 
 CNSsolve>   Original author: Christophe Schmidt 
 CNSsolve>   Modularized it: Gydo van Zundert 
 CNSsolve> 
 CNSsolve>   Parameters 
 CNSsolve>   ---------- 
 CNSsolve>       Rotation : A struct which will hold the random rotation 
 CNSsolve> 
 CNSsolve>       Type : Optional string, either 'Quaternion' or 'Matrix' 
 CNSsolve>           Determines whether the random rotation is expressed as a quaternion or a matrix 
 CNSsolve> 
 CNSsolve>   Note 
 CNSsolve>   ---- 
 CNSsolve>       There is no need in general to specify the Type as a matrix when performing the rotation. 
 CNSsolve> 
 CNSsolve>   Example: 
 CNSsolve>   >>>> ! $rand_rot does NOT have to exist currently 
 CNSsolve>   >>>> @RUN:protocols/get_random_rotation.cns(Rotation=$rand_rot;) 
 CNSsolve>   >>>> coor rotate 
 CNSsolve>   >>>>    quaternion $rand_rot.q0 $rand_rot.q1 $rand_rot.q2 $rand_rot.q3 
 CNSsolve>   >>>>    selection=(all) 
 CNSsolve>   >>>> end 
 CNSsolve> 
 CNSsolve>   Example using a rotation matrix: 
 CNSsolve>   >>>> @RUN:protocols/get_random_rotation.cns(Rotation=$rr; Type='Matrix';) 
 CNSsolve>   >>>> coor rotate 
 CNSsolve>   >>>>    matrix $rr.a11 $rr.a12 $rr.a13 
 CNSsolve>   >>>>           $rr.a21 $rr.a22 $rr.a23 
 CNSsolve>   >>>>           $rr.a31 $rr.a32 $rr.a33 
 CNSsolve>   >>>>    selection=(all) 
 CNSsolve>   >>>> end 
 CNSsolve>*} 
 CNSsolve> 
 CNSsolve>module {random_rotation} (Rotation; 
 MODULE-DECLARATION>                          Type='Quaternion'; 
 MODULE-DECLARATION>                          ) 
 CNSsolve> 
 CNSsolve>    !1. Generate random e1 e2 e3 and e4 in [-1, 1] so that e1^2 + e2^2 < 1 and e3^2+e4^2 < 1 
 CNSsolve>    evaluate ($RRM_e1 = random() * 2 - 1) 
 CNSsolve>    evaluate ($RRM_e2 = random() * 2 - 1) 
 CNSsolve>    evaluate ($RRM_s1 = ($RRM_e1)*($RRM_e1) + ($RRM_e2)*($RRM_e2)) 
 CNSsolve>    while ( $RRM_s1  >= 1) loop s1loop 
 CNSsolve>      evaluate ($RRM_e1 = random() * 2 - 1) 
 CNSsolve>      evaluate ($RRM_e2 = random() * 2 - 1) 
 CNSsolve>      evaluate ($RRM_s1 = ($RRM_e1)*($RRM_e1) + ($RRM_e2)*($RRM_e2)) 
 CNSsolve>    end loop s1loop 
 CNSsolve> 
 CNSsolve>    evaluate ($RRM_e3 = random() * 2 - 1) 
 CNSsolve>    evaluate ($RRM_e4 = random() * 2 - 1) 
 CNSsolve>    evaluate ($RRM_s2 = ($RRM_e3)*($RRM_e3) + ($RRM_e4)*($RRM_e4)) 
 CNSsolve>    while ( $RRM_s2  >= 1) loop s2loop 
 CNSsolve>      evaluate ($RRM_e3 = random() * 2 - 1) 
 CNSsolve>      evaluate ($RRM_e4 = random() * 2 - 1) 
 CNSsolve>      evaluate ($RRM_s2 = ($RRM_e3)*($RRM_e3) + ($RRM_e4)*($RRM_e4)) 
 CNSsolve>    end loop s2loop 
 CNSsolve> 
 CNSsolve>    !2. the quaternion q0 q1 q2 q3 
 CNSsolve>    evaluate($RRM_q0 = $RRM_e1) 
 CNSsolve>    evaluate($RRM_q1 = $RRM_e2) 
 CNSsolve>    evaluate($RRM_q2 = $RRM_e3 * sqrt((1 - $RRM_s1)/$RRM_s2) ) 
 CNSsolve>    evaluate($RRM_q3 = $RRM_e4 * sqrt((1 - $RRM_s1)/$RRM_s2) ) 
 CNSsolve> 
 CNSsolve>    ! package it in a struct 
 CNSsolve>    if (&Type='Quaternion') then 
 CNSsolve>        evaluate(&Rotation.q0 = $RRM_q0) 
 CNSsolve>        evaluate(&Rotation.q1 = $RRM_q1) 
 CNSsolve>        evaluate(&Rotation.q2 = $RRM_q2) 
 CNSsolve>        evaluate(&Rotation.q3 = $RRM_q3) 
 CNSsolve>    elseif (&Type='Matrix') then 
 CNSsolve>        evaluate (&Rotation.a11 = $RRM_q0 * $RRM_q0  +  $RRM_q1 * $RRM_q1  -  $RRM_q2 * $RRM_q2  -  $RRM_q3 * $RRM_q3) 
 CNSsolve>        evaluate (&Rotation.a12 = 2 * ($RRM_q1 * $RRM_q2 - $RRM_q0 * $RRM_q3) ) 
 CNSsolve>        evaluate (&Rotation.a13 = 2 * ($RRM_q1 * $RRM_q3 + $RRM_q0 * $RRM_q2) ) 
 CNSsolve>        evaluate (&Rotation.a21 = 2 * ($RRM_q1 * $RRM_q2 + $RRM_q0 * $RRM_q3) ) 
 CNSsolve>        evaluate (&Rotation.a22 = $RRM_q0 * $RRM_q0  -  $RRM_q1 * $RRM_q1  +  $RRM_q2 * $RRM_q2  -  $RRM_q3 * $RRM_q3) 
 CNSsolve>        evaluate (&Rotation.a23 = 2 * ($RRM_q2 * $RRM_q3 - $RRM_q0 * $RRM_q1) ) 
 CNSsolve>        evaluate (&Rotation.a31 = 2 * ($RRM_q1 * $RRM_q3 - $RRM_q0 * $RRM_q2) ) 
 CNSsolve>        evaluate (&Rotation.a32 = 2 * ($RRM_q2 * $RRM_q3 + $RRM_q0 * $RRM_q1) ) 
 CNSsolve>        evaluate (&Rotation.a33 = $RRM_q0 * $RRM_q0  -  $RRM_q1 * $RRM_q1  -  $RRM_q2 * $RRM_q2  +  $RRM_q3 * $RRM_q3) 
 CNSsolve>    end if 
 CNSsolve>    coor rotate 
 CNSsolve>      center=(0 0 0) 
 CNSsolve>      quaternion $rand_rot.q0 $rand_rot.q1 $rand_rot.q2 $rand_rot.q3 
 CNSsolve>      sele=(all) 
 CNSsolve>    end 
 CNSsolve> 
 CNSsolve>	{* translate and generate symmetric positions by rotation around z *} 
 CNSsolve>        coor trans sele=(all) vector=($trdis,0,0) end 
 CNSsolve>        {* rotate around z axis *} 
 CNSsolve>        evaluate ($xr = 72) 
 CNSsolve>        evaluate ($x1 = cos($xr)) 
 CNSsolve>        evaluate ($x2 = -sin($xr)) 
 CNSsolve>        evaluate ($x3 = 0 ) 
 CNSsolve>        evaluate ($y1 = sin($xr)) 
 CNSsolve>        evaluate ($y2 = cos($xr)) 
 CNSsolve>        evaluate ($y3 = 0 ) 
 CNSsolve>        evaluate ($z1 = 0 ) 
 CNSsolve>        evaluate ($z2 = 0 ) 
 CNSsolve>        evaluate ($z3 = 1 ) 
 CNSsolve>        coor 
 CNSsolve>          center=(0 0 0) 
 CNSsolve>          rotate matrix=($x1 $x2 $x3) ($y1 $y2 $y3) ($z1 $z2 $z3) 
 CNSsolve>          sele=(segid $Toppar.prot_segid_2 or segid $watersegname_2) 
 CNSsolve>        end 
 CNSsolve>        evaluate ($xr = 144) 
 CNSsolve>        evaluate ($x1 = cos($xr)) 
 CNSsolve>        evaluate ($x2 = -sin($xr)) 
 CNSsolve>        evaluate ($x3 = 0 ) 
 CNSsolve>        evaluate ($y1 = sin($xr)) 
 CNSsolve>        evaluate ($y2 = cos($xr)) 
 CNSsolve>        evaluate ($y3 = 0 ) 
 CNSsolve>        evaluate ($z1 = 0 ) 
 CNSsolve>        evaluate ($z2 = 0 ) 
 CNSsolve>        evaluate ($z3 = 1 ) 
 CNSsolve>        coor 
 CNSsolve>          center=(0 0 0) 
 CNSsolve>          rotate matrix=($x1 $x2 $x3) ($y1 $y2 $y3) ($z1 $z2 $z3) 
 CNSsolve>          sele=(segid $Toppar.prot_segid_3 or segid $watersegname_3) 
 CNSsolve>        end 
 CNSsolve>        evaluate ($xr = -144) 
 CNSsolve>        evaluate ($x1 = cos($xr)) 
 CNSsolve>        evaluate ($x2 = -sin($xr)) 
 CNSsolve>        evaluate ($x3 = 0 ) 
 CNSsolve>        evaluate ($y1 = sin($xr)) 
 CNSsolve>        evaluate ($y2 = cos($xr)) 
 CNSsolve>        evaluate ($y3 = 0 ) 
 CNSsolve>        evaluate ($z1 = 0 ) 
 CNSsolve>        evaluate ($z2 = 0 ) 
 CNSsolve>        evaluate ($z3 = 1 ) 
 CNSsolve>        coor 
 CNSsolve>          center=(0 0 0) 
 CNSsolve>          rotate matrix=($x1 $x2 $x3) ($y1 $y2 $y3) ($z1 $z2 $z3) 
 CNSsolve>          sele=(segid $Toppar.prot_segid_4 or segid $watersegname_4) 
 CNSsolve>        end 
 CNSsolve>        evaluate ($xr = -72) 
 CNSsolve>        evaluate ($x1 = cos($xr)) 
 CNSsolve>        evaluate ($x2 = -sin($xr)) 
 CNSsolve>        evaluate ($x3 = 0 ) 
 CNSsolve>        evaluate ($y1 = sin($xr)) 
 CNSsolve>        evaluate ($y2 = cos($xr)) 
 CNSsolve>        evaluate ($y3 = 0 ) 
 CNSsolve>        evaluate ($z1 = 0 ) 
 CNSsolve>        evaluate ($z2 = 0 ) 
 CNSsolve>        evaluate ($z3 = 1 ) 
 CNSsolve>        coor 
 CNSsolve>          center=(0 0 0) 
 CNSsolve>          rotate matrix=($x1 $x2 $x3) ($y1 $y2 $y3) ($z1 $z2 $z3) 
 CNSsolve>          sele=(segid $Toppar.prot_segid_5 or segid $watersegname_5) 
 CNSsolve>        end 
 CNSsolve>      end if 
 CNSsolve>    end if 
 CNSsolve>  end if 
 CNSsolve> 
 CNSsolve>  do (x = refx) (resn ANI or resn DAN or resn XAN) 
 CNSsolve>  do (y = refy) (resn ANI or resn DAN or resn XAN) 
 CNSsolve>  do (z = refz) (resn ANI or resn DAN or resn XAN) 
 CNSsolve> 
 CNSsolve>! evaluate ($outname = "RUN:" + "begin/" + $Filenames.fileroot + "_init_" + encode($count) + ".pdb") 
 CNSsolve>! write coor output=$outname end 
 CNSsolve>      end if 
 CNSsolve> 
 CNSsolve>      if ($Data.flags.sani eq true) then 
 CNSsolve>        coor @@RUN:toppar/tensor.pdb 
 CNSsolve>        do (x=x+$xcent+100) (resn ANI) 
 CNSsolve>        do (y=y+$ycent+100) (resn ANI) 
 CNSsolve>        do (z=z+$zcent+100) (resn ANI) 
 CNSsolve>      end if 
 CNSsolve> 
 CNSsolve>      if ($Data.flags.dani eq true) then 
 CNSsolve>        coor @@RUN:toppar/tensor_dani.pdb 
 CNSsolve>        do (x=x+$xcent+100) (resn DAN) 
 CNSsolve>        do (y=y+$ycent+100) (resn DAN) 
 CNSsolve>        do (z=z+$zcent+100) (resn DAN) 
 CNSsolve>      end if 
 CNSsolve> 
 CNSsolve>      if ($Data.flags.xrdc eq true) then 
 CNSsolve>        coor @@RUN:toppar/tensor_para.pdb 
 CNSsolve>        do (x=x+$xcent+100) (resn XAN) 
 CNSsolve>        do (y=y+$ycent+100) (resn XAN) 
 CNSsolve>        do (z=z+$zcent+100) (resn XAN) 
 CNSsolve>      end if 
 CNSsolve> 
 CNSsolve>      if ($Data.flags.xpcs eq true) then 
 CNSsolve>        coor @@RUN:toppar/tensor_para.pdb 
 CNSsolve>        do (x=x+$xcent+100) (resn XAN) 
 CNSsolve>        do (y=y+$ycent+100) (resn XAN) 
 CNSsolve>        do (z=z+$zcent+100) (resn XAN) 
 CNSsolve>      end if 
 CNSsolve> 
 CNSsolve>      evaluate ($unamb_scale = 1.0) 
 CNSsolve>      evaluate ($ambig_scale = 1.0) 
 CNSsolve>      evaluate ($hbond_scale = 1.0) 
 CNSsolve>      evaluate ($symm_scale = 1.0) 
 CNSsolve>      evaluate ($cont_scale = 0.0) 
 CNSsolve>      evaluate ($surf_scale = 0.0) 
 CNSsolve> 
 CNSsolve>      noe 
 CNSsolve>        scale dist $unamb_scale 
 CNSsolve>        scale ambi $ambig_scale 
 CNSsolve>        scale hbon $hbond_scale 
 CNSsolve>        scale symm $symm_scale 
 CNSsolve>        scale contact $cont_scale 
 CNSsolve>        scale surface $surf_scale 
 CNSsolve>      end 
 CNSsolve> 
 CNSsolve>      evaluate ($vea1_bor_scale = min($Data.ini_bor_hot_1,$Data.fin_bor_cool3_1)) 
 CNSsolve>      evaluate ($vea2_bor_scale = min($Data.ini_bor_hot_2,$Data.fin_bor_cool3_2)) 
 CNSsolve>      evaluate ($vea3_bor_scale = min($Data.ini_bor_hot_3,$Data.fin_bor_cool3_3)) 
 CNSsolve>      evaluate ($vea4_bor_scale = min($Data.ini_bor_hot_4,$Data.fin_bor_cool3_4)) 
 CNSsolve>      evaluate ($vea5_bor_scale = min($Data.ini_bor_hot_5,$Data.fin_bor_cool3_5)) 
 CNSsolve>      evaluate ($vea1_cen_scale = min($Data.ini_cen_hot_1,$Data.fin_cen_cool3_1)) 
 CNSsolve>      evaluate ($vea2_cen_scale = min($Data.ini_cen_hot_2,$Data.fin_cen_cool3_2)) 
 CNSsolve>      evaluate ($vea3_cen_scale = min($Data.ini_cen_hot_3,$Data.fin_cen_cool3_3)) 
 CNSsolve>      evaluate ($vea4_cen_scale = min($Data.ini_cen_hot_4,$Data.fin_cen_cool3_4)) 
 CNSsolve>      evaluate ($vea5_cen_scale = min($Data.ini_cen_hot_5,$Data.fin_cen_cool3_5)) 
 CNSsolve>      evaluate ($san1_scale = min($Data.rdc1_hot,$Data.rdc1_cool3)) 
 CNSsolve>      evaluate ($san2_scale = min($Data.rdc2_hot,$Data.rdc2_cool3)) 
 CNSsolve>      evaluate ($san3_scale = min($Data.rdc3_hot,$Data.rdc3_cool3)) 
 CNSsolve>      evaluate ($san4_scale = min($Data.rdc4_hot,$Data.rdc4_cool3)) 
 CNSsolve>      evaluate ($san5_scale = min($Data.rdc5_hot,$Data.rdc5_cool3)) 
 CNSsolve>      evaluate ($dan1_scale = min($Data.dan1_hot,$Data.dan1_cool3)) 
 CNSsolve>      evaluate ($dan2_scale = min($Data.dan2_hot,$Data.dan2_cool3)) 
 CNSsolve>      evaluate ($dan3_scale = min($Data.dan3_hot,$Data.dan3_cool3)) 
 CNSsolve>      evaluate ($dan4_scale = min($Data.dan4_hot,$Data.dan4_cool3)) 
 CNSsolve>      evaluate ($dan5_scale = min($Data.dan5_hot,$Data.dan5_cool3)) 
 CNSsolve> 
 CNSsolve>      if ($Data.flags.vean eq true) then 
 CNSsolve>        vean class vea1 force 0.0 0.0 end 
 CNSsolve>        vean class vea2 force 0.0 0.0 end 
 CNSsolve>        vean class vea3 force 0.0 0.0 end 
 CNSsolve>        vean class vea4 force 0.0 0.0 end 
 CNSsolve>        vean class vea5 force 0.0 0.0 end 
 CNSsolve>      end if 
 CNSsolve> 
 CNSsolve>      if ($Data.flags.sani eq true) then 
 CNSsolve>        sani class rdc1 force 0.0 end 
 CNSsolve>        sani class rdc2 force 0.0 end 
 CNSsolve>        sani class rdc3 force 0.0 end 
 CNSsolve>        sani class rdc4 force 0.0 end 
 CNSsolve>        sani class rdc5 force 0.0 end 
 CNSsolve>      end if 
 CNSsolve>      if ($Data.flags.xrdc eq true) then 
 CNSsolve>        xrdc class rdc1 force 0.0 end 
 CNSsolve>        xrdc class rdc2 force 0.0 end 
 CNSsolve>        xrdc class rdc3 force 0.0 end 
 CNSsolve>        xrdc class rdc4 force 0.0 end 
 CNSsolve>        xrdc class rdc5 force 0.0 end 
 CNSsolve>      end if 
 CNSsolve>      if ($Data.flags.xpcs eq true) then 
 CNSsolve>        xpcs class pcs1 force 0.0 end 
 CNSsolve>        xpcs class pcs2 force 0.0 end 
 CNSsolve>        xpcs class pcs3 force 0.0 end 
 CNSsolve>        xpcs class pcs4 force 0.0 end 
 CNSsolve>        xpcs class pcs5 force 0.0 end 
 CNSsolve>        xpcs class pcs6 force 0.0 end 
 CNSsolve>        xpcs class pcs7 force 0.0 end 
 CNSsolve>        xpcs class pcs8 force 0.0 end 
 CNSsolve>        xpcs class pcs9 force 0.0 end 
 CNSsolve>        xpcs class pcsA force 0.0 end 
 CNSsolve>      end if 
 CNSsolve>      if ($Data.flags.dani eq true) then 
 CNSsolve>        dani class dan1 force 0.0 end 
 CNSsolve>        dani class dan2 force 0.0 end 
 CNSsolve>        dani class dan3 force 0.0 end 
 CNSsolve>        dani class dan4 force 0.0 end 
 CNSsolve>        dani class dan5 force 0.0 end 
 CNSsolve>      end if 
 CNSsolve> 
 CNSsolve> 
 CNSsolve>      evaluate ($kinter = $SaProtocol.inter_rigid) 
 CNSsolve>      @RUN:protocols/scale_inter_mini.cns 
 ASSFIL: file scale_inter_mini.cns opened.
 CNSsolve>! scale_inter_mini.cns 
 CNSsolve>!    Scaling of intermolecular interations 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve>igroup interaction (not all) (not all) end 
 CNSsolve> 
 CNSsolve>igroup 
 CNSsolve> 
 CNSsolve>  eval($nchain1 = 0) 
 CNSsolve> 
 CNSsolve>  while ($nchain1 < $data.ncomponents) loop nloop1 
 CNSsolve>    eval($nchain1 = $nchain1 + 1) 
 CNSsolve>    eval($nchain2 = $nchain1 ) 
 CNSsolve>    while ($nchain2 < $data.ncomponents) loop nloop2 
 CNSsolve>      eval($nchain2 = $nchain2 + 1) 
 CNSsolve>      eval($scalfac = $kinter * $Toppar.int_$nchain1_$nchain2) 
 CNSsolve>      interaction (segid $Toppar.prot_segid_$nchain1 and not (resn ANI or resn DAN or resn XAN)) 
 CNSsolve>                  (segid $Toppar.prot_segid_$nchain2 and not (resn ANI or resn DAN or resn XAN)) weight * 1.0 vdw $scalfac elec $scalfac end 
 CNSsolve>    end loop nloop2 
 CNSsolve> 
 CNSsolve>  end loop nloop1 
 CNSsolve> 
 CNSsolve>  interaction (resn ANI) (resn ANI) weight * 1.0 vdw 0.0 elec 0.0 end 
 CNSsolve>  interaction (resn DAN) (resn DAN) weight * 1.0 vdw 0.0 elec 0.0 end 
 CNSsolve>  interaction (resn XAN) (resn XAN) weight * 1.0 vdw 0.0 elec 0.0 end 
 CNSsolve> 
 CNSsolve>end 
 CNSsolve> 
 CNSsolve>      evaluate ($vea1_bor_scale = min($Data.ini_bor_hot_1,$Data.fin_bor_cool3_1)) 
 CNSsolve>      evaluate ($vea2_bor_scale = min($Data.ini_bor_hot_2,$Data.fin_bor_cool3_2)) 
 CNSsolve>      evaluate ($vea3_bor_scale = min($Data.ini_bor_hot_3,$Data.fin_bor_cool3_3)) 
 CNSsolve>      evaluate ($vea4_bor_scale = min($Data.ini_bor_hot_4,$Data.fin_bor_cool3_4)) 
 CNSsolve>      evaluate ($vea5_bor_scale = min($Data.ini_bor_hot_5,$Data.fin_bor_cool3_5)) 
 CNSsolve>      evaluate ($vea1_cen_scale = min($Data.ini_cen_hot_1,$Data.fin_cen_cool3_1)) 
 CNSsolve>      evaluate ($vea2_cen_scale = min($Data.ini_cen_hot_2,$Data.fin_cen_cool3_2)) 
 CNSsolve>      evaluate ($vea3_cen_scale = min($Data.ini_cen_hot_3,$Data.fin_cen_cool3_3)) 
 CNSsolve>      evaluate ($vea4_cen_scale = min($Data.ini_cen_hot_4,$Data.fin_cen_cool3_4)) 
 CNSsolve>      evaluate ($vea5_cen_scale = min($Data.ini_cen_hot_5,$Data.fin_cen_cool3_5)) 
 CNSsolve>      evaluate ($san1_scale = min($Data.rdc1_hot,$Data.rdc1_cool3)) 
 CNSsolve>      evaluate ($san2_scale = min($Data.rdc2_hot,$Data.rdc2_cool3)) 
 CNSsolve>      evaluate ($san3_scale = min($Data.rdc3_hot,$Data.rdc3_cool3)) 
 CNSsolve>      evaluate ($san4_scale = min($Data.rdc4_hot,$Data.rdc4_cool3)) 
 CNSsolve>      evaluate ($san5_scale = min($Data.rdc5_hot,$Data.rdc5_cool3)) 
 CNSsolve>      evaluate ($pcs1_scale = min($Data.pcs1_hot,$Data.pcs1_cool3)) 
 CNSsolve>      evaluate ($pcs2_scale = min($Data.pcs2_hot,$Data.pcs2_cool3)) 
 CNSsolve>      evaluate ($pcs3_scale = min($Data.pcs3_hot,$Data.pcs3_cool3)) 
 CNSsolve>      evaluate ($pcs4_scale = min($Data.pcs4_hot,$Data.pcs4_cool3)) 
 CNSsolve>      evaluate ($pcs5_scale = min($Data.pcs5_hot,$Data.pcs5_cool3)) 
 CNSsolve>      evaluate ($pcs6_scale = min($Data.pcs6_hot,$Data.pcs6_cool3)) 
 CNSsolve>      evaluate ($pcs7_scale = min($Data.pcs7_hot,$Data.pcs7_cool3)) 
 CNSsolve>      evaluate ($pcs8_scale = min($Data.pcs8_hot,$Data.pcs8_cool3)) 
 CNSsolve>      evaluate ($pcs9_scale = min($Data.pcs9_hot,$Data.pcs9_cool3)) 
 CNSsolve>      evaluate ($pcsA_scale = min($Data.pcsA_hot,$Data.pcsA_cool3)) 
 CNSsolve>      evaluate ($dan1_scale = min($Data.dan1_hot,$Data.dan1_cool3)) 
 CNSsolve>      evaluate ($dan2_scale = min($Data.dan2_hot,$Data.dan2_cool3)) 
 CNSsolve>      evaluate ($dan3_scale = min($Data.dan3_hot,$Data.dan3_cool3)) 
 CNSsolve>      evaluate ($dan4_scale = min($Data.dan4_hot,$Data.dan4_cool3)) 
 CNSsolve>      evaluate ($dan5_scale = min($Data.dan5_hot,$Data.dan5_cool3)) 
 CNSsolve> 
 CNSsolve>      evaluate ($imini = 0) 
 CNSsolve>      while ($imini le 4) loop rigmin 
 CNSsolve> 
 CNSsolve>        if ($imini >= 1) then 
 CNSsolve>          if ($Data.flags.vean eq true) then 
 CNSsolve>            vean class vea1 force $vea1_bor_scale $vea1_cen_scale end 
 CNSsolve>            vean class vea2 force $vea2_bor_scale $vea2_cen_scale end 
 CNSsolve>            vean class vea3 force $vea3_bor_scale $vea3_cen_scale end 
 CNSsolve>            vean class vea4 force $vea4_bor_scale $vea4_cen_scale end 
 CNSsolve>            vean class vea5 force $vea5_bor_scale $vea5_cen_scale end 
 CNSsolve>            evaluate ($vea1_bor_scale = min(($vea1_bor_scale * 2),$Data.fin_bor_cool3_1)) 
 CNSsolve>            evaluate ($vea2_bor_scale = min(($vea2_bor_scale * 2),$Data.fin_bor_cool3_2)) 
 CNSsolve>            evaluate ($vea3_bor_scale = min(($vea3_bor_scale * 2),$Data.fin_bor_cool3_3)) 
 CNSsolve>            evaluate ($vea4_bor_scale = min(($vea4_bor_scale * 2),$Data.fin_bor_cool3_4)) 
 CNSsolve>            evaluate ($vea5_bor_scale = min(($vea5_bor_scale * 2),$Data.fin_bor_cool3_5)) 
 CNSsolve>            evaluate ($vea1_cen_scale = min(($vea1_cen_scale * 2),$Data.fin_cen_cool3_1)) 
 CNSsolve>            evaluate ($vea2_cen_scale = min(($vea2_cen_scale * 2),$Data.fin_cen_cool3_2)) 
 CNSsolve>            evaluate ($vea3_cen_scale = min(($vea3_cen_scale * 2),$Data.fin_cen_cool3_3)) 
 CNSsolve>            evaluate ($vea4_cen_scale = min(($vea4_cen_scale * 2),$Data.fin_cen_cool3_4)) 
 CNSsolve>            evaluate ($vea5_cen_scale = min(($vea5_cen_scale * 2),$Data.fin_cen_cool3_5)) 
 CNSsolve>          end if 
 CNSsolve>          if ($Data.flags.sani eq true) then 
 CNSsolve>            sani class rdc1 force $san1_scale end 
 CNSsolve>            sani class rdc2 force $san2_scale end 
 CNSsolve>            sani class rdc3 force $san3_scale end 
 CNSsolve>            sani class rdc4 force $san4_scale end 
 CNSsolve>            sani class rdc5 force $san5_scale end 
 CNSsolve>            evaluate ($san1_scale = min($san1_scale * 2,$Data.rdc1_cool3)) 
 CNSsolve>            evaluate ($san2_scale = min($san2_scale * 2,$Data.rdc2_cool3)) 
 CNSsolve>            evaluate ($san3_scale = min($san3_scale * 2,$Data.rdc3_cool3)) 
 CNSsolve>            evaluate ($san4_scale = min($san4_scale * 2,$Data.rdc4_cool3)) 
 CNSsolve>            evaluate ($san5_scale = min($san5_scale * 2,$Data.rdc5_cool3)) 
 CNSsolve> 
 CNSsolve>            if ($rantens eq true) then 
 CNSsolve>              @RUN:protocols/mini_tensor.cns 
 ASSFIL: file mini_tensor.cns opened.
 CNSsolve>! mini_tensor.cns 
 CNSsolve>!    Optimize the RDC tensor orientation 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * Originally adapted from Aria 1.2 from Nilges and Linge, EMBL.       * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve>{* Optimize tensor orientation *} 
 CNSsolve> 
 CNSsolve>{* first randomize the tensor orientation because of some CNS problems *} 
 CNSsolve>{* possible resulting in infinite gradient and a failure of the EM     *} 
 CNSsolve> 
 CNSsolve>eval ($erdc = 999999999.0) 
 CNSsolve>eval ($ncount = 0) 
 CNSsolve>while ($ncount < 4) loop trial 
 CNSsolve>  eval ($ncount = $ncount + 1) 
 CNSsolve>  do (xcomp = x) (resn ANI) 
 CNSsolve>  do (ycomp = y) (resn ANI) 
 CNSsolve>  do (zcomp = z) (resn ANI) 
 CNSsolve> 
 CNSsolve>  !random rotation of tensor 
 CNSsolve> 
 CNSsolve>  show aver (x) (resn ANI) 
 CNSsolve>  evaluate ($xc = $result) 
 CNSsolve>  show aver (y) (resn ANI) 
 CNSsolve>  evaluate ($yc = $result) 
 CNSsolve>  show aver (z) (resn ANI) 
 CNSsolve>  evaluate ($zc = $result) 
 CNSsolve> 
 CNSsolve>  evaluate ($xr = ran ()) 
 CNSsolve>  {* rotate around z axis *} 
 CNSsolve>  evaluate ($xr = $xr * 360) 
 CNSsolve>  evaluate ($x1 = cos($xr)) 
 CNSsolve>  evaluate ($x2 = -sin($xr)) 
 CNSsolve>  evaluate ($x3 = 0 ) 
 CNSsolve>  evaluate ($y1 = sin($xr)) 
 CNSsolve>  evaluate ($y2 = cos($xr)) 
 CNSsolve>  evaluate ($y3 = 0 ) 
 CNSsolve>  evaluate ($z1 = 0 ) 
 CNSsolve>  evaluate ($z2 = 0 ) 
 CNSsolve>  evaluate ($z3 = 1 ) 
 CNSsolve>  coor 
 CNSsolve>    center=($xc $yc $zc) 
 CNSsolve>    rotate matrix=($x1 $x2 $x3) ($y1 $y2 $y3) ($z1 $z2 $z3) 
 CNSsolve>    sele=(resn ANI) 
 CNSsolve>  end 
 CNSsolve> 
 CNSsolve>  {* rotate around x axis *} 
 CNSsolve>  evaluate ($xr = ran ()) 
 CNSsolve>  evaluate ($xr = $xr * 360) 
 CNSsolve>  evaluate ($x1 = 1 ) 
 CNSsolve>  evaluate ($x2 = 0 ) 
 CNSsolve>  evaluate ($x3 = 0 ) 
 CNSsolve>  evaluate ($y1 = 0 ) 
 CNSsolve>  evaluate ($y2 = cos($xr)) 
 CNSsolve>  evaluate ($y3 = -sin($xr)) 
 CNSsolve>  evaluate ($z1 = 0 ) 
 CNSsolve>  evaluate ($z2 = sin($xr)) 
 CNSsolve>  evaluate ($z3 = cos($xr)) 
 CNSsolve>  coor 
 CNSsolve>    center=($xc $yc $zc) 
 CNSsolve>    rotate matrix=($x1 $x2 $x3) ($y1 $y2 $y3) ($z1 $z2 $z3) 
 CNSsolve>    sele=(resn ANI) 
 CNSsolve>  end 
 CNSsolve>  {* rotate around y axis *} 
 CNSsolve>  evaluate ($xr = ran ()) 
 CNSsolve>  evaluate ($xr = $xr * 360) 
 CNSsolve>  evaluate ($x1 = cos($xr)) 
 CNSsolve>  evaluate ($x2 = 0 ) 
 CNSsolve>  evaluate ($x3 = -sin($xr)) 
 CNSsolve>  evaluate ($y1 = 0 ) 
 CNSsolve>  evaluate ($y2 = 1 ) 
 CNSsolve>  evaluate ($y3 = 0 ) 
 CNSsolve>  evaluate ($z1 = sin($xr)) 
 CNSsolve>  evaluate ($z2 = 0 ) 
 CNSsolve>  evaluate ($z3 = cos($xr)) 
 CNSsolve>  coor 
 CNSsolve>    center=($xc $yc $zc) 
 CNSsolve>    rotate matrix=($x1 $x2 $x3) ($y1 $y2 $y3) ($z1 $z2 $z3) 
 CNSsolve>    sele=(resn ANI) 
 CNSsolve>  end 
 CNSsolve> 
 CNSsolve>  energy end 
 CNSsolve> 
 CNSsolve>  if ($ncount = 1) then 
 CNSsolve>    eval ($erdc=$sani) 
 CNSsolve>  end if 
 CNSsolve>  if ($sani < $erdc) then 
 CNSsolve>    eval ($erdc=$sani) 
 CNSsolve>    do (xcomp = x) (resn ANI) 
 CNSsolve>    do (ycomp = y) (resn ANI) 
 CNSsolve>    do (zcomp = z) (resn ANI) 
 CNSsolve>  else 
 CNSsolve>    do (x = xcomp) (resn ANI) 
 CNSsolve>    do (y = ycomp) (resn ANI) 
 CNSsolve>    do (z = zcomp) (resn ANI) 
 CNSsolve>  end if 
 CNSsolve> 
 CNSsolve>end loop trial 
 CNSsolve> 
 CNSsolve>fix sele=(not all) end 
 CNSsolve>fix sele=(name OO) end 
 CNSsolve>minimize rigid 
 CNSsolve>  group (not resn ANI) 
 CNSsolve>  translation=false 
 CNSsolve>  for $id in id (resn ANI and name OO) loop miniani 
 CNSsolve>    group (byres(id $id)) 
 CNSsolve>    translation=false 
 CNSsolve>  end loop miniani 
 CNSsolve>  translation=false 
 CNSsolve>  nstep 500 
 CNSsolve>  nprint 10 
 CNSsolve>end 
 CNSsolve>minimize rigid 
 CNSsolve>  eval($nchain1= 1) 
 CNSsolve>  while ($nchain1 <= $data.ncomponents) loop cloop1 
 CNSsolve>    group (segid $Toppar.prot_segid_$nchain1) 
 CNSsolve>    translation=false 
 CNSsolve>    eval($nchain1 = $nchain1 + 1) 
 CNSsolve>  end loop cloop1 
 CNSsolve>  for $id in id (resn ANI and name OO) loop miniani 
 CNSsolve>    group (byres(id $id)) 
 CNSsolve>    translation=false 
 CNSsolve>  end loop miniani 
 CNSsolve>  translation=false 
 CNSsolve>  nstep 500 
 CNSsolve>  nprint 10 
 CNSsolve>end 
 CNSsolve> 
 CNSsolve>            end if 
 CNSsolve>          end if 
 CNSsolve> 
 CNSsolve>	  evaluate ($paramin = false) 
 CNSsolve>          if ($Data.flags.xrdc eq true) then 
 CNSsolve>            xrdc class san1 force $san1_scale end 
 CNSsolve>            xrdc class san2 force $san2_scale end 
 CNSsolve>            xrdc class san3 force $san3_scale end 
 CNSsolve>            xrdc class san4 force $san4_scale end 
 CNSsolve>            xrdc class san5 force $san5_scale end 
 CNSsolve>            evaluate ($san1_scale = min($san1_scale * 2,$Data.rdc1_cool3)) 
 CNSsolve>            evaluate ($san2_scale = min($san2_scale * 2,$Data.rdc2_cool3)) 
 CNSsolve>            evaluate ($san3_scale = min($san3_scale * 2,$Data.rdc3_cool3)) 
 CNSsolve>            evaluate ($san4_scale = min($san4_scale * 2,$Data.rdc4_cool3)) 
 CNSsolve>            evaluate ($san5_scale = min($san5_scale * 2,$Data.rdc5_cool3)) 
 CNSsolve>     	    evaluate ($paramin = true) 
 CNSsolve>          end if 
 CNSsolve> 
 CNSsolve>          if ($Data.flags.xpcs eq true) then 
 CNSsolve>            xpcs class pcs1 force $pcs1_scale end 
 CNSsolve>            xpcs class pcs2 force $pcs2_scale end 
 CNSsolve>            xpcs class pcs3 force $pcs3_scale end 
 CNSsolve>            xpcs class pcs4 force $pcs4_scale end 
 CNSsolve>            xpcs class pcs5 force $pcs5_scale end 
 CNSsolve>            xpcs class pcs6 force $pcs6_scale end 
 CNSsolve>            xpcs class pcs7 force $pcs7_scale end 
 CNSsolve>            xpcs class pcs8 force $pcs8_scale end 
 CNSsolve>            xpcs class pcs9 force $pcs9_scale end 
 CNSsolve>            xpcs class pcsA force $pcsA_scale end 
 CNSsolve> 
 CNSsolve>            evaluate ($pcs1_scale = min($pcs1_scale * 2,$Data.pcs1_cool3)) 
 CNSsolve>            evaluate ($pcs2_scale = min($pcs2_scale * 2,$Data.pcs2_cool3)) 
 CNSsolve>            evaluate ($pcs3_scale = min($pcs3_scale * 2,$Data.pcs3_cool3)) 
 CNSsolve>            evaluate ($pcs4_scale = min($pcs4_scale * 2,$Data.pcs4_cool3)) 
 CNSsolve>            evaluate ($pcs5_scale = min($pcs5_scale * 2,$Data.pcs5_cool3)) 
 CNSsolve>            evaluate ($pcs6_scale = min($pcs6_scale * 2,$Data.pcs6_cool3)) 
 CNSsolve>            evaluate ($pcs7_scale = min($pcs7_scale * 2,$Data.pcs7_cool3)) 
 CNSsolve>            evaluate ($pcs8_scale = min($pcs8_scale * 2,$Data.pcs8_cool3)) 
 CNSsolve>            evaluate ($pcs9_scale = min($pcs9_scale * 2,$Data.pcs9_cool3)) 
 CNSsolve>            evaluate ($pcsA_scale = min($pcsA_scale * 2,$Data.pcsA_cool3)) 
 CNSsolve>	        evaluate ($paramin = true) 
 CNSsolve>          end if 
 CNSsolve> 
 CNSsolve>	  if ($paramin eq TRUE) then 
 CNSsolve>            if ($rantens_para eq true) then 
 CNSsolve>              @RUN:protocols/mini_tensor_para.cns 
 ASSFIL: file mini_tensor_para.cns opened.
 CNSsolve>! mini_tensor_para.cns 
 CNSsolve>!    Optimize the tensor orientation for PCS restraints 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * Originally adapted from Aria 1.2 from Nilges and Linge, EMBL.       * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve>!set message on echo on end 
 CNSsolve> 
 CNSsolve>display STARTing mini_tensor_para.cns 
 CNSsolve> 
 CNSsolve>!write coordinates sele=(resn XAN) output="trial.pdb" end 
 CNSsolve> 
 CNSsolve> 
 CNSsolve>{* minimize tensor position *} 
 CNSsolve>display STARTing minimization of OO-LA distance 
 CNSsolve> 
 CNSsolve>!flag excl * include noe end 
 CNSsolve>flag excl xpcs include noe end 
 CNSsolve>fix sele=(not resn XAN) end 
 CNSsolve> 
 CNSsolve> 
 CNSsolve>igroup 
 CNSsolve>  interaction (not all) (not all) 
 CNSsolve>end 
 CNSsolve> 
 CNSsolve> 
 CNSsolve>minimize rigid 
 CNSsolve>  group (resname XAN) 
 CNSsolve>  translation=true 
 CNSsolve>  nstep 1000 
 CNSsolve>  tole 0.1 
 CNSsolve>  nprint 10 
 CNSsolve>end 
 CNSsolve> 
 CNSsolve>!write coordinates sele=(resn XAN) output="position.pdb" end 
 CNSsolve> 
 CNSsolve>display ENDing minimization of OO-LA distance 
 CNSsolve> 
 CNSsolve>display STARTing minimization of orientation 
 CNSsolve> 
 CNSsolve>{* minimize tensor orientation *} 
 CNSsolve> 
 CNSsolve>evaluate ($protocol = 0) 
 CNSsolve> 
 CNSsolve> 
 CNSsolve>if ($protocol = 0) then {* powell minimization protocol together *} 
 CNSsolve> 
 CNSsolve>  display protocol 0 
 CNSsolve>!  flag excl * include noe xpcs bond end 
 CNSsolve>  flag  include noe xpcs bond end 
 CNSsolve> 
 CNSsolve>  igroup 
 CNSsolve>    interaction (not all) (not all) 
 CNSsolve>    interaction ( resn XAN ) ( resn XAN ) weight * 0 bond 1.0 end 
 CNSsolve>  end 
 CNSsolve> 
 CNSsolve>  fix sele=(not (resn XAN)) end 
 CNSsolve> 
 CNSsolve>  minimize powell 
 CNSsolve>    nstep=5000 
 CNSsolve>    drop=10 
 CNSsolve>    nprint=10 
 CNSsolve>    tolgradient=0.01 
 CNSsolve>  end 
 CNSsolve>elseif ($protocol = 1) then {* powell minimization protocol *} 
 CNSsolve> 
 CNSsolve>  display protocol 1 
 CNSsolve>  flag excl * include noe xpcs bond end 
 CNSsolve> 
 CNSsolve>  for $id in id (resn XAN and name OO) loop miniani 
 CNSsolve>    igroup 
 CNSsolve>      interaction (not all) (not all) 
 CNSsolve>      interaction ( (byres(id $id)) ) ( (byres(id $id)) ) weight * 0 bond 1.0 end 
 CNSsolve>    end 
 CNSsolve> 
 CNSsolve>    fix sele=(not ( (byres(id $id)) )) end 
 CNSsolve> 
 CNSsolve>    minimize powell 
 CNSsolve>      nstep=500 
 CNSsolve>      drop=10 
 CNSsolve>      nprint=10 
 CNSsolve>      tolgradient=0.01 
 CNSsolve>    end 
 CNSsolve>  end loop miniani 
 CNSsolve> 
 CNSsolve>elseif ($protocol = 4) then {* powell minimization protocol simultaneously *} 
 CNSsolve> 
 CNSsolve>  display protocol 4 
 CNSsolve>  flag excl * include noe xpcs end 
 CNSsolve> 
 CNSsolve>  fix sele=(not ( resname XAN )) end 
 CNSsolve> 
 CNSsolve>  minimize powell 
 CNSsolve>    nstep=5000 
 CNSsolve>    drop=10 
 CNSsolve>    nprint=10 
 CNSsolve>    tolgradient=0.01 
 CNSsolve>  end 
 CNSsolve> 
 CNSsolve>elseif ($protocol = 2) then  {* rigid body minimization protocol *} 
 CNSsolve> 
 CNSsolve>  display protocol 2 
 CNSsolve>  flag excl * include noe xpcs end 
 CNSsolve>  for $id in id (resn XAN and name OO) loop miniani 
 CNSsolve>    minimize rigid 
 CNSsolve>      group (byres(id $id)) 
 CNSsolve>      translation=true 
 CNSsolve>      nstep 500 
 CNSsolve>      nprint 10 
 CNSsolve>      drop=10 
 CNSsolve>    end 
 CNSsolve>  end loop miniani 
 CNSsolve> 
 CNSsolve>elseif ($protocol = 3) then {* original rigid body minimization protocol *} 
 CNSsolve>  display protocol 3 
 CNSsolve>  flag excl * include noe xpcs end 
 CNSsolve>  fix sele=(not resname XAN) end 
 CNSsolve>  minimize rigid 
 CNSsolve>    group (not resname XAN) 
 CNSsolve>    translation=true 
 CNSsolve>    for $id in id (resn XAN and name OO) loop miniani 
 CNSsolve>      group (byres(id $id)) 
 CNSsolve>      translation=true 
 CNSsolve>    end loop miniani 
 CNSsolve>    translation=true 
 CNSsolve>    nstep 5000 
 CNSsolve> 
 CNSsolve>    nprint 10 
 CNSsolve>  end 
 CNSsolve>  display XPCS_ENERGY $xpcs 
 CNSsolve>  fix sele=(not all) end 
 CNSsolve> 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>fix sele=(not all) end 
 CNSsolve> 
 CNSsolve>!xpcs print thresh=0.0 class pcs1 end 
 CNSsolve>!xpcs print thresh=0.0 class pcs2 end 
 CNSsolve>!xpcs print thresh=0.0 class pcs3 end 
 CNSsolve>!xpcs print thresh=0.0 class pcs4 end 
 CNSsolve>!xpcs print thresh=0.0 class pcs5 end 
 CNSsolve>!xpcs print thresh=0.0 class pcs6 end 
 CNSsolve>!xpcs print thresh=0.0 class pcs7 end 
 CNSsolve>!xpcs print thresh=0.0 class pcs8 end 
 CNSsolve>!xpcs print thresh=0.0 class pcs9 end 
 CNSsolve>!xpcs print thresh=0.0 class pcsA end 
 CNSsolve> 
 CNSsolve>!write coordinates sele=(resn XAN) output="min.pdb" end 
 CNSsolve> 
 CNSsolve>display ENDing minimization of orientation 
 CNSsolve>            end if 
 CNSsolve>	  end if 
 CNSsolve> 
 CNSsolve>          if ($Data.flags.dani eq true) then 
 CNSsolve>            dani class dan1 force $dan1_scale end 
 CNSsolve>            dani class dan2 force $dan2_scale end 
 CNSsolve>            dani class dan3 force $dan3_scale end 
 CNSsolve>            dani class dan4 force $dan4_scale end 
 CNSsolve>            dani class dan5 force $dan5_scale end 
 CNSsolve>            evaluate ($dan1_scale = min($dan1_scale * 2,$Data.dan1_cool3)) 
 CNSsolve>            evaluate ($dan2_scale = min($dan2_scale * 2,$Data.dan2_cool3)) 
 CNSsolve>            evaluate ($dan3_scale = min($dan3_scale * 2,$Data.dan3_cool3)) 
 CNSsolve>            evaluate ($dan4_scale = min($dan4_scale * 2,$Data.dan4_cool3)) 
 CNSsolve>            evaluate ($dan5_scale = min($dan5_scale * 2,$Data.dan5_cool3)) 
 CNSsolve> 
 CNSsolve>            if ($rantens_dani eq true) then 
 CNSsolve>              @RUN:protocols/mini_tensor_dani.cns 
 ASSFIL: file mini_tensor_dani.cns opened.
 CNSsolve>! mini_tensor_dani.cns 
 CNSsolve>!    Optimize the tensor orientation for diffusion anisotropy restraints 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * Originally adapted from Aria 1.2 from Nilges and Linge, EMBL.       * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve>{* Optimize tensor orientation *} 
 CNSsolve>{* ADJ van Dijk*} 
 CNSsolve>{* copied from mini_tensor.cns *} 
 CNSsolve> 
 CNSsolve>{* first randomize the tensor orientation because of some CNS problems *} 
 CNSsolve>{* possible resulting in infinite gradient and a failure of the EM     *} 
 CNSsolve> 
 CNSsolve>eval ($edani = 999999999.0) 
 CNSsolve>eval ($ncount = 0) 
 CNSsolve>while ($ncount < 4) loop trial 
 CNSsolve>  eval ($ncount = $ncount + 1) 
 CNSsolve>  do (xcomp = x) (resn DAN) 
 CNSsolve>  do (ycomp = y) (resn DAN) 
 CNSsolve>  do (zcomp = z) (resn DAN) 
 CNSsolve> 
 CNSsolve>  !random rotation of tensor 
 CNSsolve> 
 CNSsolve>  show aver (x) (resn DAN) 
 CNSsolve>  evaluate ($xc = $result) 
 CNSsolve>  show aver (y) (resn DAN) 
 CNSsolve>  evaluate ($yc = $result) 
 CNSsolve>  show aver (z) (resn DAN) 
 CNSsolve>  evaluate ($zc = $result) 
 CNSsolve> 
 CNSsolve>  evaluate ($xr = ran ()) 
 CNSsolve>  {* rotate around z axis *} 
 CNSsolve>  evaluate ($xr = $xr * 360) 
 CNSsolve>  evaluate ($x1 = cos($xr)) 
 CNSsolve>  evaluate ($x2 = -sin($xr)) 
 CNSsolve>  evaluate ($x3 = 0 ) 
 CNSsolve>  evaluate ($y1 = sin($xr)) 
 CNSsolve>  evaluate ($y2 = cos($xr)) 
 CNSsolve>  evaluate ($y3 = 0 ) 
 CNSsolve>  evaluate ($z1 = 0 ) 
 CNSsolve>  evaluate ($z2 = 0 ) 
 CNSsolve>  evaluate ($z3 = 1 ) 
 CNSsolve>  coor 
 CNSsolve>    center=($xc $yc $zc) 
 CNSsolve>    rotate matrix=($x1 $x2 $x3) ($y1 $y2 $y3) ($z1 $z2 $z3) 
 CNSsolve>    sele=(resn DAN) 
 CNSsolve>  end 
 CNSsolve> 
 CNSsolve>  {* rotate around x axis *} 
 CNSsolve>  evaluate ($xr = ran ()) 
 CNSsolve>  evaluate ($xr = $xr * 360) 
 CNSsolve>  evaluate ($x1 = 1 ) 
 CNSsolve>  evaluate ($x2 = 0 ) 
 CNSsolve>  evaluate ($x3 = 0 ) 
 CNSsolve>  evaluate ($y1 = 0 ) 
 CNSsolve>  evaluate ($y2 = cos($xr)) 
 CNSsolve>  evaluate ($y3 = -sin($xr)) 
 CNSsolve>  evaluate ($z1 = 0 ) 
 CNSsolve>  evaluate ($z2 = sin($xr)) 
 CNSsolve>  evaluate ($z3 = cos($xr)) 
 CNSsolve>  coor 
 CNSsolve>    center=($xc $yc $zc) 
 CNSsolve>    rotate matrix=($x1 $x2 $x3) ($y1 $y2 $y3) ($z1 $z2 $z3) 
 CNSsolve>    sele=(resn DAN) 
 CNSsolve>  end 
 CNSsolve>  {* rotate around y axis *} 
 CNSsolve>  evaluate ($xr = ran ()) 
 CNSsolve>  evaluate ($xr = $xr * 360) 
 CNSsolve>  evaluate ($x1 = cos($xr)) 
 CNSsolve>  evaluate ($x2 = 0 ) 
 CNSsolve>  evaluate ($x3 = -sin($xr)) 
 CNSsolve>  evaluate ($y1 = 0 ) 
 CNSsolve>  evaluate ($y2 = 1 ) 
 CNSsolve>  evaluate ($y3 = 0 ) 
 CNSsolve>  evaluate ($z1 = sin($xr)) 
 CNSsolve>  evaluate ($z2 = 0 ) 
 CNSsolve>  evaluate ($z3 = cos($xr)) 
 CNSsolve>  coor 
 CNSsolve>    center=($xc $yc $zc) 
 CNSsolve>    rotate matrix=($x1 $x2 $x3) ($y1 $y2 $y3) ($z1 $z2 $z3) 
 CNSsolve>    sele=(resn DAN) 
 CNSsolve>  end 
 CNSsolve> 
 CNSsolve>  energy end 
 CNSsolve> 
 CNSsolve>  if ($ncount = 1) then 
 CNSsolve>    eval ($edani=$dani) 
 CNSsolve>  end if 
 CNSsolve>  if ($dani < $edani) then 
 CNSsolve>    eval ($edani=$dani) 
 CNSsolve>    do (xcomp = x) (resn DAN) 
 CNSsolve>    do (ycomp = y) (resn DAN) 
 CNSsolve>    do (zcomp = z) (resn DAN) 
 CNSsolve>  else 
 CNSsolve>    do (x = xcomp) (resn DAN) 
 CNSsolve>    do (y = ycomp) (resn DAN) 
 CNSsolve>    do (z = zcomp) (resn DAN) 
 CNSsolve>  end if 
 CNSsolve> 
 CNSsolve>end loop trial 
 CNSsolve> 
 CNSsolve>fix sele=(not all) end 
 CNSsolve>fix sele=(name OO) end 
 CNSsolve>minimize rigid 
 CNSsolve>  group (not resn DAN) 
 CNSsolve>  translation=false 
 CNSsolve>  for $id in id (resn DAN and name OO) loop minidan 
 CNSsolve>    group (byres(id $id)) 
 CNSsolve>    translation=false 
 CNSsolve>  end loop minidan 
 CNSsolve>  nstep 500 
 CNSsolve>  nprint 10 
 CNSsolve>end 
 CNSsolve>minimize rigid 
 CNSsolve>  eval($nchain1= 1) 
 CNSsolve>  while ($nchain1 <= $data.ncomponents) loop cloop1 
 CNSsolve>    group (segid $Toppar.prot_segid_$nchain1) 
 CNSsolve>    eval($nchain1 = $nchain1 + 1) 
 CNSsolve>    translation=false 
 CNSsolve>  end loop cloop1 
 CNSsolve>  for $id in id (resn DAN and name OO) loop minidan 
 CNSsolve>    group (byres(id $id)) 
 CNSsolve>    translation=false 
 CNSsolve>  end loop minidan 
 CNSsolve>  nstep 500 
 CNSsolve>  nprint 10 
 CNSsolve>end 
 CNSsolve> 
 CNSsolve>            end if 
 CNSsolve> 
 CNSsolve>          end if 
 CNSsolve> 
 CNSsolve>        end if 
 CNSsolve> 
 CNSsolve>        evaluate ($imini = $imini + 1) 
 CNSsolve>        eval ($ministeps = 500 * nint ($data.ncomponents/6 + 1)) 
 CNSsolve>        if ($SaProtocol.randorien eq true) then 
 CNSsolve>          flag excl vdw elec coll end 
 CNSsolve>        end if 
 CNSsolve>        eval ($nchain1 = 0) 
 CNSsolve>        while ($nchain1 < $data.ncomponents) loop nloop1 
 CNSsolve>          eval($nchain1 = $nchain1 + 1) 
 CNSsolve>          fix sele=(not all) end 
 CNSsolve>          fix sele=( not (segid $Toppar.prot_segid_$nchain1 or segid $watersegname_$nchain1) and not name OO) end 
 CNSsolve>          minimize rigid 
 CNSsolve>            group (segid $Toppar.prot_segid_$nchain1 or segid $watersegname_$nchain1) 
 CNSsolve>            translation=false 
 CNSsolve>            nstep 250 
 CNSsolve>            drop 10.0 
 CNSsolve>            tole 0.1 
 CNSsolve>            nprint 10 
 CNSsolve>          end 
 CNSsolve> 
 CNSsolve>        end loop nloop1 
 CNSsolve>        fix sele=(not all) end 
 CNSsolve> 
 CNSsolve>        flag include vdw end 
 CNSsolve>        if ($Data.flags.elec0 eq true) then 
 CNSsolve>          flag include elec end 
 CNSsolve>        end if 
 CNSsolve> 
 CNSsolve>        evaluate ($unamb_scale = min(($unamb_scale * 2),$Data.unamb_cool3)) 
 CNSsolve>        evaluate ($ambig_scale = min(($ambig_scale * 2),$Data.amb_cool3)) 
 CNSsolve>        evaluate ($hbond_scale = min(($hbond_scale * 2),$Data.hbond_cool3)) 
 CNSsolve>        evaluate ($symm_scale = min(($symm_scale * 2),$Data.ksym)) 
 CNSsolve> 
 CNSsolve>        noe 
 CNSsolve>          scale dist $unamb_scale 
 CNSsolve>          scale ambi $ambig_scale 
 CNSsolve>          scale hbon $hbond_scale 
 CNSsolve>          scale symm $symm_scale 
 CNSsolve>        end 
 CNSsolve> 
 CNSsolve>      end loop rigmin 
 CNSsolve> 
 CNSsolve>      evaluate ($unamb_scale_store = $unamb_scale) 
 CNSsolve>      evaluate ($ambig_scale_store = $ambig_scale) 
 CNSsolve>      evaluate ($hbond_scale_store = $hbond_scale) 
 CNSsolve>      evaluate ($symm_scale_store = $symm_scale) 
 CNSsolve> 
 CNSsolve>      flag include vdw end 
 CNSsolve>      if ($Data.flags.elec0 eq true) then 
 CNSsolve>        flag include elec end 
 CNSsolve>      end if 
 CNSsolve> 
 CNSsolve>      if ($SaProtocol.rigidtrans eq true) then 
 CNSsolve> 
 CNSsolve>        if ($data.waterdock eq true) then 
 CNSsolve>         if ($data.solvate_method ne "db") then 
 CNSsolve>          inline @RUN:protocols/waterdock_remove-water.cns 
 ASSFIL: file waterdock_remove-water.cns opened.
 CNSsolve>! waterdock_remove-water.cns 
 CNSsolve>!    MC-based removal of waters in solvated docking 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve> !store5 contains the waters that are to be "removed" 
 CNSsolve> ident (store5) (not all) 
 CNSsolve> 
 CNSsolve> ident (store5) ((resn WAT or resn HOH)) 
 CNSsolve> 
 CNSsolve> !count number of waters 
 CNSsolve> show sum(1) ((resn WAT or resn HOH) and name OH2) 
 CNSsolve> eval ($watercount=$result) 
 CNSsolve> 
 CNSsolve> !determine how many of those to keep 
 CNSsolve> eval ($randfrac = random(1.0)) 
 CNSsolve> eval ($randfrac = $randfrac * $data.water_randfrac) 
 CNSsolve> eval ($fractionkeep =$data.water_tokeep + $randfrac) 
 CNSsolve> eval ($tokeep = $fractionkeep * $watercount) 
 CNSsolve> 
 CNSsolve> display info: watercount $watercount 
 CNSsolve> display info: tokeep $tokeep 
 CNSsolve> !for each nrig value, different waters are "removed" 
 CNSsolve> for $atom_id in id ((resn WAT or resn HOH) and name OH2) loop loop2 
 CNSsolve>  eval ($r = random(1.0) * $watercount) 
 CNSsolve>  display info: r-value $r 
 CNSsolve>  if ($r > $tokeep) then 
 CNSsolve>     ident (store5) (store5 or id $atom_id) 
 CNSsolve>  end if 
 CNSsolve> end loop loop2 
 CNSsolve> 
 CNSsolve> ident (store5) (byres store5) 
 CNSsolve> 
 CNSsolve> !"removing" of water: interaction weight 0 
 CNSsolve> igroup interaction (not all) (not all) end 
 CNSsolve> 
 CNSsolve> igroup 
 CNSsolve>  eval($nchain1 = 0) 
 CNSsolve> 
 CNSsolve>  while ($nchain1 < $data.ncomponents) loop nloop1 
 CNSsolve>    eval($nchain1 = $nchain1 + 1) 
 CNSsolve>    eval($nchain2 = $nchain1 ) 
 CNSsolve>    while ($nchain2 < $data.ncomponents) loop nloop2 
 CNSsolve>      eval($nchain2 = $nchain2 + 1) 
 CNSsolve>      interaction (segid $Toppar.prot_segid_$nchain1) 
 CNSsolve>                  (segid $Toppar.prot_segid_$nchain2) weight * 1.0 vdw $kinter elec $kinter end 
 CNSsolve>    end loop nloop2 
 CNSsolve>    interaction ((resn WAT or resn HOH or resn TIP*) and not store5) (segid $Toppar.prot_segid_$nchain1) weight * 1.0 end 
 CNSsolve>  end loop nloop1 
 CNSsolve> 
 CNSsolve>  interaction ((resn WAT or resn HOH or resn TIP*) and not store5) 
 CNSsolve>	           ((resn WAT or resn HOH or resn TIP*) and not store5) weight * 1.0 end 
 CNSsolve>  interaction (store5) (all) weight * 0.0 end 
 CNSsolve> end 
 CNSsolve> 
 CNSsolve> if ($data.solvate_method eq "restraints") then 
 CNSsolve>  noe reset end 
 CNSsolve>  !read again the NOE data 
 CNSsolve>  @RUN:protocols/read_noes.cns(Iteration=$Iteration; Data=$Data; count=$count) 
 ASSFIL: file read_noes.cns opened.
 CNSsolve>! read_noes.cns 
 CNSsolve>!    Read distance restraints 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * Originally adapted from Aria 1.2 from Nilges and Linge, EMBL.       * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve> 
 CNSsolve>module(Iteration; Data; count;) 
 CNSsolve> 
 CNSsolve>!NOEs, hbonds 
 CNSsolve>noe 
 CNSsolve>  reset 
 CNSsolve>  nrestraints = 4000000     ! allocate space for NOEs 
 CNSsolve>  ceiling 1000 
 CNSsolve>end 
 CNSsolve> 
 CNSsolve>display reading NEWIT:unambig.tbl in iteration &iteration with option &data.unamb_firstit 
 CNSsolve> 
 CNSsolve> 
 CNSsolve>if (&data.amb_firstit le &iteration)   then 
 CNSsolve>     evaluate ($filenam0 = "NEWIT:ambig.tbl_" + encode($count)) 
 CNSsolve>     fileexist $filenam0 end 
 CNSsolve>     if ($result eq false) then 
 CNSsolve>       evaluate ($filenam0 = "NEWIT:ambig.tbl") 
 CNSsolve>     end if 
 CNSsolve>     noe class ambi @@$filenam0 end 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if (&data.unamb_firstit le &iteration) then 
 CNSsolve>     noe class dist @@NEWIT:unambig.tbl end 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if (&data.hbond_firstit le &iteration) then 
 CNSsolve>   if (&data.hbonds_on eq true) then 
 CNSsolve>      noe @@RUN:data/hbonds/hbonds.tbl end 
 CNSsolve>   end if 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>noe 
 CNSsolve>  averaging  * sum 
 CNSsolve>  potential  * soft 
 CNSsolve>  scale      * 1.0 
 CNSsolve>  sqconstant * 1.0 
 CNSsolve>  sqexponent * 2 
 CNSsolve>  soexponent * 1 
 CNSsolve>  rswitch    * 1.0 
 CNSsolve>  sqoffset   * 0.0 
 CNSsolve>  asymptote  * 2.0 
 CNSsolve>  msoexponent * 1 
 CNSsolve>  masymptote  * -0.1 
 CNSsolve>  mrswitch    * 1.0 
 CNSsolve>  avexpo hbond 20 
 CNSsolve>end 
 CNSsolve> 
 CNSsolve>if (&data.waterdock eq true) then 
 CNSsolve> if (&iteration eq 0) then 
 CNSsolve>  if (&data.solvate_method eq "restraints") then 
 CNSsolve>   evaluate ($nchain=0) 
 CNSsolve>   while ($nchain < &data.ncomponents) loop nloop1 
 CNSsolve>    evaluate ($nchain = $nchain + 1) 
 CNSsolve>    evaluate ($watersegname_$nchain="WAT" + encode($nchain)) 
 CNSsolve>    noe class amwa end 
 CNSsolve>    for $atom_id in id ((resn WAT or resn HOH or resn TIP*) and name OH2 and segid $watersegname_$nchain and not store5) loop waterrestraint 
 CNSsolve>   noe 
 CNSsolve>    assi (segid $toppar.prot_segid_$nchain and (resn arg or resn glu or resn lys or resn asp or resn tyr) and ((id $atom_id) around &data.water_restraint_cutoff)) 
 CNSsolve>        (id $atom_id) &data.water_restraint_cutoff &data.water_restraint_cutoff 0.0 
 CNSsolve>   end 
 CNSsolve>  end loop waterrestraint 
 CNSsolve>   end loop nloop1 
 CNSsolve>  end if 
 CNSsolve> end if 
 CNSsolve>end if 
 CNSsolve> end if 
 CNSsolve>         else 
 CNSsolve>          inline @RUN:protocols/db0.cns 
 ASSFIL: file db0.cns opened.
 CNSsolve>! db0.cns 
 CNSsolve>!    Use in the removal of interfacial waters in solvated docking 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve> !store5=1 contains the waters that are to be "removed" 
 CNSsolve> !none at this stage 
 CNSsolve> 
 CNSsolve> do (store5 = 0) (all) 
 CNSsolve> 
 CNSsolve> !"removing" of water: interaction weight 0 
 CNSsolve> igroup interaction (not all) (not all) end 
 CNSsolve> 
 CNSsolve> igroup 
 CNSsolve>  eval($nchain1 = 0) 
 CNSsolve> 
 CNSsolve>  while ($nchain1 < $data.ncomponents) loop nloop1 
 CNSsolve>    eval($nchain1 = $nchain1 + 1) 
 CNSsolve>    eval($nchain2 = $nchain1 ) 
 CNSsolve>    while ($nchain2 < $data.ncomponents) loop nloop2 
 CNSsolve>      eval($nchain2 = $nchain2 + 1) 
 CNSsolve>      interaction (segid $Toppar.prot_segid_$nchain1) 
 CNSsolve>                  (segid $Toppar.prot_segid_$nchain2) weight * 1.0 vdw $kinter elec $kinter end 
 CNSsolve>    end loop nloop2 
 CNSsolve>    interaction ((resn WAT or resn HOH or resn TIP*) and (attr store5 ne 1)) (segid $Toppar.prot_segid_$nchain1) weight * 1.0 end 
 CNSsolve>  end loop nloop1 
 CNSsolve> 
 CNSsolve>  interaction ((resn WAT or resn HOH or resn TIP*) and (attr store5 ne 1)) 
 CNSsolve>	           ((resn WAT or resn HOH or resn TIP*) and (attr store5 ne 1)) weight * 1.0 end 
 CNSsolve>  interaction (attr store5 = 1) (all) weight * 0.0 end 
 CNSsolve> end 
 CNSsolve>         end if 
 CNSsolve>        end if 
 CNSsolve> 
 CNSsolve>        evaluate ($cont_scale = $Data.kcont) 
 CNSsolve>        evaluate ($surf_scale = $Data.ksurf) 
 CNSsolve>        noe 
 CNSsolve>          scale contact $cont_scale 
 CNSsolve>          scale surface $surf_scale 
 CNSsolve>        end 
 CNSsolve>        fix sele=(name OO and not resn XAN) end 
 CNSsolve>        minimize rigid 
 CNSsolve>          eval ($nchain1 = 0) 
 CNSsolve>          while ($nchain1 < $data.ncomponents) loop nloop1 
 CNSsolve>            eval($nchain1 = $nchain1 + 1) 
 CNSsolve>            group (segid $Toppar.prot_segid_$nchain1 or segid $watersegname_$nchain1) 
 CNSsolve>            translation=false 
 CNSsolve>          end loop nloop1 
 CNSsolve>          nstep 250 
 CNSsolve>          nprint 10 
 CNSsolve>        end 
 CNSsolve> 
 CNSsolve>        if ($data.solvate_method eq "db") then 
 CNSsolve>          inline @RUN:protocols/db00.cns 
 ASSFIL: file db00.cns opened.
 CNSsolve>! db00.cns 
 CNSsolve>!    Used in the removal of interfacial waters in solvated docking 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve> !store5 is what is to be removed 
 CNSsolve> !store4 is used to determine what is at an interface 
 CNSsolve> eval ($surfcutoff = $data.water_surfcutoff) 
 CNSsolve> do (store4 = 0) (all) 
 CNSsolve> do (store4 = 1) ((resn WAT or resn HOH) and name oh2) 
 CNSsolve> show sum (store4) (all) 
 CNSsolve> display SOLVATED-DOCKING: INITIAL NUMBER OF WATERS IS $result 
 CNSsolve> do (store4 = 0) (all) 
 CNSsolve> 
 CNSsolve> eval($nchain1 = 0) 
 CNSsolve> while ($nchain1 < $data.ncomponents) loop nloop1 
 CNSsolve>   eval($nchain1 = $nchain1 + 1) 
 CNSsolve>   do (store4 = store4 + 1) (name oh2 and ((segid $Toppar.prot_segid_$nchain1) around $surfcutoff)) 
 CNSsolve> end loop nloop1 
 CNSsolve> 
 CNSsolve> !an interfacial water should have at least store4=2 
 CNSsolve> do (store4 = 0) (attribute store4 < 2) 
 CNSsolve> do (store4 = 1) (attribute store4 > 0) 
 CNSsolve> show sum (store4) (all) 
 CNSsolve> display SOLVATED-DOCKING: REMAINING NUMBER OF INTERFACIAL WATERS IS $result 
 CNSsolve> 
 CNSsolve> do (store5 = 1) ((attr store5 = 1) or (name oh2 and (attr store4 ne 1))) 
 CNSsolve> do (store5 = 1) (byres (attr store5 = 1)) 
 CNSsolve> 
 CNSsolve>!"removing" of water: interaction weight 0 
 CNSsolve> igroup interaction (not all) (not all) end 
 CNSsolve> 
 CNSsolve> igroup 
 CNSsolve>  eval($nchain1 = 0) 
 CNSsolve> 
 CNSsolve>  while ($nchain1 < $data.ncomponents) loop nloop1 
 CNSsolve>    eval($nchain1 = $nchain1 + 1) 
 CNSsolve>    eval($nchain2 = $nchain1 ) 
 CNSsolve>    while ($nchain2 < $data.ncomponents) loop nloop2 
 CNSsolve>      eval($nchain2 = $nchain2 + 1) 
 CNSsolve>      interaction (segid $Toppar.prot_segid_$nchain1) 
 CNSsolve>                  (segid $Toppar.prot_segid_$nchain2) weight * 1.0 vdw $kinter elec $kinter end 
 CNSsolve>    end loop nloop2 
 CNSsolve>    interaction ((resn WAT or resn HOH or resn TIP*) and (attr store5 ne 1)) (segid $Toppar.prot_segid_$nchain1) weight * 1.0 end 
 CNSsolve>  end loop nloop1 
 CNSsolve> 
 CNSsolve>  interaction ((resn WAT or resn HOH or resn TIP*) and (attr store5 ne 1)) 
 CNSsolve>	           ((resn WAT or resn HOH or resn TIP*) and (attr store5 ne 1)) weight * 1.0 end 
 CNSsolve>  interaction (attr store5 = 1) (all) weight * 0.0 end 
 CNSsolve> end 
 CNSsolve>        end if 
 CNSsolve> 
 CNSsolve>        energy end 
 CNSsolve> 
 CNSsolve>        if ($Data.flags.rg eq true) then 
 CNSsolve>          flag include coll end 
 CNSsolve>        end if 
 CNSsolve> 
 CNSsolve>        fix sele=(name OO and not resn XAN) end 
 CNSsolve>        eval ($ministeps = 500 * nint ($data.ncomponents/6 + 1)) 
 CNSsolve>        minimize rigid 
 CNSsolve>          eval ($nchain1 = 0) 
 CNSsolve>          while ($nchain1 < $data.ncomponents) loop nloop1 
 CNSsolve>            eval($nchain1 = $nchain1 + 1) 
 CNSsolve>            group (segid $Toppar.prot_segid_$nchain1 or segid $watersegname_$nchain1) 
 CNSsolve>            translation=true 
 CNSsolve>          end loop nloop1 
 CNSsolve>          nstep $ministeps 
 CNSsolve>          nprint 10 
 CNSsolve>        end 
 CNSsolve> 
 CNSsolve>        energy end 
 CNSsolve> 
 CNSsolve>        if ($data.waterdock eq true) then 
 CNSsolve>          if ($data.solvate_method eq "db") then 
 CNSsolve>            display MINIMIZATION ENERGY BEFORE: $grad $ener $vdw $elec 
 CNSsolve>            minimize rigid 
 CNSsolve>              eval ($nchain1 = 0) 
 CNSsolve>              while ($nchain1 < $data.ncomponents) loop nloop1 
 CNSsolve>                eval($nchain1 = $nchain1 + 1) 
 CNSsolve>                group (segid $Toppar.prot_segid_$nchain1 and not (resn WAT or resn HOH or resn TIP*)) 
 CNSsolve>                translation=true 
 CNSsolve>              end loop nloop1 
 CNSsolve>              for $id in id ((resn WAT or resn HOH or resn TIP*) and name OH2 and (attr store5 ne 1)) loop miniwater 
 CNSsolve>                group (byres(id $id)) 
 CNSsolve>              end loop miniwater 
 CNSsolve>              translation=$data.transwater 
 CNSsolve>              nstep $ministeps 
 CNSsolve>              nprint 100 
 CNSsolve>            end 
 CNSsolve>            display MINIMIZATION ENERGY AFTER: $grad $ener $vdw $elec 
 CNSsolve>            inline @RUN:protocols/db1.cns 
 ASSFIL: file db1.cns opened.
 CNSsolve>! db1.cns 
 CNSsolve>!    Used in the removal of interfacial waters in solvated docking 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve>eval ($rmultfact=1.0) 
 CNSsolve>eval($testcutoff=3.5) 
 CNSsolve>eval($enercutoff=0.0) 
 CNSsolve> 
 CNSsolve>show sum(1) ((resn WAT or resn HOH) and name OH2 and (attr store5 ne 1) and (not (name P or name O*P* or name "O3'" or name "O5'") around $testcutoff)) 
 CNSsolve>eval ($watercount=$result) 
 CNSsolve>show sum(1) ((resn WAT or resn HOH) and name OH2 and (attr store5 ne 1) and ((name P or name O*P* or name "O3'" or name "O5'") around $testcutoff)) 
 CNSsolve>eval ($dnapwatercount=$result) 
 CNSsolve> 
 CNSsolve>display SOLVATED-DOCKING: info: watercount $watercount 
 CNSsolve> 
 CNSsolve>evaluate ($icount = 1) 
 CNSsolve>do (store4 = 0) (all) 
 CNSsolve> 
 CNSsolve>for $atom_id in id ((resn WAT or resn HOH) and name OH2 and (attr store5 ne 1)) loop count 
 CNSsolve>  do (store4 = $icount) (id $atom_id) 
 CNSsolve>  evaluate ($icount = $icount + 1) 
 CNSsolve>end loop count 
 CNSsolve>display SOLVATED-DOCKING: info: watercount $icount 
 CNSsolve> 
 CNSsolve>show min(store4) ((resn WAT or resn HOH) and name OH2 and (attr store5 ne 1)) 
 CNSsolve>evaluate ($rmin = $result) 
 CNSsolve>show max(store4) ((resn WAT or resn HOH) and name OH2 and (attr store5 ne 1)) 
 CNSsolve>evaluate ($rmax = $result) 
 CNSsolve> 
 CNSsolve>evaluate ($nres = $rmax - $rmin + 1) 
 CNSsolve>display SOLVATED-DOCKING: $nres WATERS SELECTED FOR DATABASE-STATISTICS BASED RANDOM REMOVAL 
 CNSsolve>if ($nres < 1) then 
 CNSsolve>  display SOLVATED-DOCKING: NO WATER IN DEFINED WATERS 
 CNSsolve>  display SOLVATED-DOCKING: DB WATER REMOVAL FAILED 
 CNSsolve>  display SOLVATED-DOCKING: STOPPING... 
 CNSsolve>  stop 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>! initialize water-mediated contact probabilities to average 
 CNSsolve>! value of the protein-protein matrix (0.22 for statistical and 0.33 for Kyte-Doolittle) 
 CNSsolve>! 
 CNSsolve>if ($data.db_method eq 'statistical') then 
 CNSsolve>  evaluate ($dbave = 0.22) 
 CNSsolve>else 
 CNSsolve>  eval ($dbave = 0.33) 
 CNSsolve>end if 
 CNSsolve>eval($nchain1 = 0) 
 CNSsolve>while ($nchain1 < $data.ncomponents) loop nloop1 
 CNSsolve>  evaluate($nchain1 = $nchain1 + 1) 
 CNSsolve>  eval($nchain2 = 0) 
 CNSsolve>  while ($nchain2 < $data.ncomponents) loop nloop2 
 CNSsolve>    evaluate ($nchain2 = $nchain2 + 1) 
 CNSsolve>    if ($nchain1 ne $nchain2) then 
 CNSsolve>      for $at1_id in id ( tag and segid $Toppar.prot_segid_$nchain1 ) loop atm1 
 CNSsolve>        show (resn) (id $at1_id) 
 CNSsolve>        evaluate ($rsn1 = $result) 
 CNSsolve>        for $at2_id in id ( tag and segid $Toppar.prot_segid_$nchain2 ) loop atm2 
 CNSsolve>           show (resn) (id $at2_id) 
 CNSsolve>           evaluate ($rsn2 = $result) 
 CNSsolve>           evaluate ($db.$rsn1_$rsn2 = $dbave) 
 CNSsolve>        end loop atm2 
 CNSsolve>      end loop atm1 
 CNSsolve>    end if 
 CNSsolve>  end loop nloop2 
 CNSsolve>end loop nloop1 
 CNSsolve> 
 CNSsolve>if ($data.db_method eq 'statistical') then 
 CNSsolve>  inline @RUN:protocols/db_statistical.dat 
 ASSFIL: file db_statistical.dat opened.
 CNSsolve>! db_statistical.dat 
 CNSsolve>!    PDB-derived probabilities of finding a water molecule 
 CNSsolve>!    between two specific amino acids 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve>eval($db.ALA_ALA = 0.190 ) 
 CNSsolve>eval($db.ALA_ARG = 0.220 ) 
 CNSsolve>eval($db.ALA_ASN = 0.290 ) 
 CNSsolve>eval($db.ALA_ASP = 0.330 ) 
 CNSsolve>eval($db.ALA_CYS = 0.150 ) 
 CNSsolve>eval($db.ALA_GLN = 0.170 ) 
 CNSsolve>eval($db.ALA_GLU = 0.260 ) 
 CNSsolve>eval($db.ALA_GLY = 0.290 ) 
 CNSsolve>eval($db.ALA_HIS = 0.240 ) 
 CNSsolve>eval($db.ALA_NEP = 0.240 ) 
 CNSsolve>eval($db.ALA_ILE = 0.170 ) 
 CNSsolve>eval($db.ALA_LEU = 0.110 ) 
 CNSsolve>eval($db.ALA_LYS = 0.210 ) 
 CNSsolve>eval($db.ALA_MET = 0.240 ) 
 CNSsolve>eval($db.ALA_PHE = 0.070 ) 
 CNSsolve>eval($db.ALA_PRO = 0.240 ) 
 CNSsolve>eval($db.ALA_SER = 0.170 ) 
 CNSsolve>eval($db.ALA_THR = 0.060 ) 
 CNSsolve>eval($db.ALA_TRP = 0.150 ) 
 CNSsolve>eval($db.ALA_TYR = 0.150 ) 
 CNSsolve>eval($db.ALA_VAL = 0.080 ) 
 CNSsolve>eval($db.ARG_ALA = 0.220 ) 
 CNSsolve>eval($db.ARG_ARG = 0.660 ) 
 CNSsolve>eval($db.ARG_ASN = 0.260 ) 
 CNSsolve>eval($db.ARG_ASP = 0.390 ) 
 CNSsolve>eval($db.ARG_CYS = 0.200 ) 
 CNSsolve>eval($db.ARG_GLN = 0.310 ) 
 CNSsolve>eval($db.ARG_GLU = 0.340 ) 
 CNSsolve>eval($db.ARG_GLY = 0.270 ) 
 CNSsolve>eval($db.ARG_HIS = 0.340 ) 
 CNSsolve>eval($db.ARG_NEP = 0.340 ) 
 CNSsolve>eval($db.ARG_ILE = 0.240 ) 
 CNSsolve>eval($db.ARG_LEU = 0.240 ) 
 CNSsolve>eval($db.ARG_LYS = 0.350 ) 
 CNSsolve>eval($db.ARG_MET = 0.300 ) 
 CNSsolve>eval($db.ARG_PHE = 0.090 ) 
 CNSsolve>eval($db.ARG_PRO = 0.340 ) 
 CNSsolve>eval($db.ARG_SER = 0.380 ) 
 CNSsolve>eval($db.ARG_THR = 0.120 ) 
 CNSsolve>eval($db.ARG_TRP = 0.180 ) 
 CNSsolve>eval($db.ARG_TYR = 0.280 ) 
 CNSsolve>eval($db.ARG_VAL = 0.280 ) 
 CNSsolve>eval($db.ASN_ALA = 0.290 ) 
 CNSsolve>eval($db.ASN_ARG = 0.260 ) 
 CNSsolve>eval($db.ASN_ASN = 0.460 ) 
 CNSsolve>eval($db.ASN_ASP = 0.350 ) 
 CNSsolve>eval($db.ASN_CYS = 0.220 ) 
 CNSsolve>eval($db.ASN_GLN = 0.260 ) 
 CNSsolve>eval($db.ASN_GLU = 0.230 ) 
 CNSsolve>eval($db.ASN_GLY = 0.280 ) 
 CNSsolve>eval($db.ASN_HIS = 0.230 ) 
 CNSsolve>eval($db.ASN_NEP = 0.230 ) 
 CNSsolve>eval($db.ASN_ILE = 0.070 ) 
 CNSsolve>eval($db.ASN_LEU = 0.100 ) 
 CNSsolve>eval($db.ASN_LYS = 0.270 ) 
 CNSsolve>eval($db.ASN_MET = 0.190 ) 
 CNSsolve>eval($db.ASN_PHE = 0.050 ) 
 CNSsolve>eval($db.ASN_PRO = 0.110 ) 
 CNSsolve>eval($db.ASN_SER = 0.270 ) 
 CNSsolve>eval($db.ASN_THR = 0.250 ) 
 CNSsolve>eval($db.ASN_TRP = 0.000 ) 
 CNSsolve>eval($db.ASN_TYR = 0.170 ) 
 CNSsolve>eval($db.ASN_VAL = 0.260 ) 
 CNSsolve>eval($db.ASP_ALA = 0.330 ) 
 CNSsolve>eval($db.ASP_ARG = 0.390 ) 
 CNSsolve>eval($db.ASP_ASN = 0.350 ) 
 CNSsolve>eval($db.ASP_ASP = 0.420 ) 
 CNSsolve>eval($db.ASP_CYS = 0.230 ) 
 CNSsolve>eval($db.ASP_GLN = 0.300 ) 
 CNSsolve>eval($db.ASP_GLU = 0.450 ) 
 CNSsolve>eval($db.ASP_GLY = 0.120 ) 
 CNSsolve>eval($db.ASP_HIS = 0.700 ) 
 CNSsolve>eval($db.ASP_NEP = 0.700 ) 
 CNSsolve>eval($db.ASP_ILE = 0.100 ) 
 CNSsolve>eval($db.ASP_LEU = 0.140 ) 
 CNSsolve>eval($db.ASP_LYS = 0.460 ) 
 CNSsolve>eval($db.ASP_MET = 0.190 ) 
 CNSsolve>eval($db.ASP_PHE = 0.310 ) 
 CNSsolve>eval($db.ASP_PRO = 0.130 ) 
 CNSsolve>eval($db.ASP_SER = 0.270 ) 
 CNSsolve>eval($db.ASP_THR = 0.250 ) 
 CNSsolve>eval($db.ASP_TRP = 0.140 ) 
 CNSsolve>eval($db.ASP_TYR = 0.280 ) 
 CNSsolve>eval($db.ASP_VAL = 0.310 ) 
 CNSsolve>eval($db.CYS_ALA = 0.150 ) 
 CNSsolve>eval($db.CYS_ARG = 0.200 ) 
 CNSsolve>eval($db.CYS_ASN = 0.220 ) 
 CNSsolve>eval($db.CYS_ASP = 0.230 ) 
 CNSsolve>eval($db.CYS_CYS = 0.120 ) 
 CNSsolve>eval($db.CYS_GLN = 0.000 ) 
 CNSsolve>eval($db.CYS_GLU = 0.180 ) 
 CNSsolve>eval($db.CYS_GLY = 0.400 ) 
 CNSsolve>eval($db.CYS_HIS = 0.000 ) 
 CNSsolve>eval($db.CYS_NEP = 0.000 ) 
 CNSsolve>eval($db.CYS_ILE = 0.090 ) 
 CNSsolve>eval($db.CYS_LEU = 0.050 ) 
 CNSsolve>eval($db.CYS_LYS = 0.330 ) 
 CNSsolve>eval($db.CYS_MET = 0.000 ) 
 CNSsolve>eval($db.CYS_PHE = 0.000 ) 
 CNSsolve>eval($db.CYS_PRO = 0.200 ) 
 CNSsolve>eval($db.CYS_SER = 0.580 ) 
 CNSsolve>eval($db.CYS_THR = 0.000 ) 
 CNSsolve>eval($db.CYS_TRP = 0.250 ) 
 CNSsolve>eval($db.CYS_TYR = 0.060 ) 
 CNSsolve>eval($db.CYS_VAL = 0.140 ) 
 CNSsolve>eval($db.GLN_ALA = 0.170 ) 
 CNSsolve>eval($db.GLN_ARG = 0.310 ) 
 CNSsolve>eval($db.GLN_ASN = 0.260 ) 
 CNSsolve>eval($db.GLN_ASP = 0.300 ) 
 CNSsolve>eval($db.GLN_CYS = 0.000 ) 
 CNSsolve>eval($db.GLN_GLN = 0.270 ) 
 CNSsolve>eval($db.GLN_GLU = 0.370 ) 
 CNSsolve>eval($db.GLN_GLY = 0.240 ) 
 CNSsolve>eval($db.GLN_HIS = 0.240 ) 
 CNSsolve>eval($db.GLN_NEP = 0.240 ) 
 CNSsolve>eval($db.GLN_ILE = 0.150 ) 
 CNSsolve>eval($db.GLN_LEU = 0.190 ) 
 CNSsolve>eval($db.GLN_LYS = 0.350 ) 
 CNSsolve>eval($db.GLN_MET = 0.230 ) 
 CNSsolve>eval($db.GLN_PHE = 0.000 ) 
 CNSsolve>eval($db.GLN_PRO = 0.570 ) 
 CNSsolve>eval($db.GLN_SER = 0.330 ) 
 CNSsolve>eval($db.GLN_THR = 0.130 ) 
 CNSsolve>eval($db.GLN_TRP = 0.000 ) 
 CNSsolve>eval($db.GLN_TYR = 0.470 ) 
 CNSsolve>eval($db.GLN_VAL = 0.230 ) 
 CNSsolve>eval($db.GLU_ALA = 0.260 ) 
 CNSsolve>eval($db.GLU_ARG = 0.340 ) 
 CNSsolve>eval($db.GLU_ASN = 0.230 ) 
 CNSsolve>eval($db.GLU_ASP = 0.450 ) 
 CNSsolve>eval($db.GLU_CYS = 0.180 ) 
 CNSsolve>eval($db.GLU_GLN = 0.370 ) 
 CNSsolve>eval($db.GLU_GLU = 0.310 ) 
 CNSsolve>eval($db.GLU_GLY = 0.270 ) 
 CNSsolve>eval($db.GLU_HIS = 0.730 ) 
 CNSsolve>eval($db.GLU_NEP = 0.730 ) 
 CNSsolve>eval($db.GLU_ILE = 0.260 ) 
 CNSsolve>eval($db.GLU_LEU = 0.230 ) 
 CNSsolve>eval($db.GLU_LYS = 0.390 ) 
 CNSsolve>eval($db.GLU_MET = 0.250 ) 
 CNSsolve>eval($db.GLU_PHE = 0.270 ) 
 CNSsolve>eval($db.GLU_PRO = 0.290 ) 
 CNSsolve>eval($db.GLU_SER = 0.460 ) 
 CNSsolve>eval($db.GLU_THR = 0.270 ) 
 CNSsolve>eval($db.GLU_TRP = 0.170 ) 
 CNSsolve>eval($db.GLU_TYR = 0.310 ) 
 CNSsolve>eval($db.GLU_VAL = 0.270 ) 
 CNSsolve>eval($db.GLY_ALA = 0.290 ) 
 CNSsolve>eval($db.GLY_ARG = 0.270 ) 
 CNSsolve>eval($db.GLY_ASN = 0.280 ) 
 CNSsolve>eval($db.GLY_ASP = 0.120 ) 
 CNSsolve>eval($db.GLY_CYS = 0.400 ) 
 CNSsolve>eval($db.GLY_GLN = 0.240 ) 
 CNSsolve>eval($db.GLY_GLU = 0.270 ) 
 CNSsolve>eval($db.GLY_GLY = 0.190 ) 
 CNSsolve>eval($db.GLY_HIS = 0.240 ) 
 CNSsolve>eval($db.GLY_NEP = 0.240 ) 
 CNSsolve>eval($db.GLY_ILE = 0.090 ) 
 CNSsolve>eval($db.GLY_LEU = 0.190 ) 
 CNSsolve>eval($db.GLY_LYS = 0.520 ) 
 CNSsolve>eval($db.GLY_MET = 0.420 ) 
 CNSsolve>eval($db.GLY_PHE = 0.200 ) 
 CNSsolve>eval($db.GLY_PRO = 0.250 ) 
 CNSsolve>eval($db.GLY_SER = 0.340 ) 
 CNSsolve>eval($db.GLY_THR = 0.240 ) 
 CNSsolve>eval($db.GLY_TRP = 0.110 ) 
 CNSsolve>eval($db.GLY_TYR = 0.370 ) 
 CNSsolve>eval($db.GLY_VAL = 0.250 ) 
 CNSsolve>eval($db.HIS_ALA = 0.240 ) 
 CNSsolve>eval($db.HIS_ARG = 0.340 ) 
 CNSsolve>eval($db.HIS_ASN = 0.230 ) 
 CNSsolve>eval($db.HIS_ASP = 0.700 ) 
 CNSsolve>eval($db.HIS_CYS = 0.000 ) 
 CNSsolve>eval($db.HIS_GLN = 0.240 ) 
 CNSsolve>eval($db.HIS_GLU = 0.730 ) 
 CNSsolve>eval($db.HIS_GLY = 0.240 ) 
 CNSsolve>eval($db.HIS_HIS = 0.570 ) 
 CNSsolve>eval($db.HIS_NEP = 0.570 ) 
 CNSsolve>eval($db.HIS_ILE = 0.190 ) 
 CNSsolve>eval($db.HIS_LEU = 0.100 ) 
 CNSsolve>eval($db.HIS_LYS = 0.280 ) 
 CNSsolve>eval($db.HIS_MET = 0.380 ) 
 CNSsolve>eval($db.HIS_PHE = 0.000 ) 
 CNSsolve>eval($db.HIS_PRO = 0.170 ) 
 CNSsolve>eval($db.HIS_SER = 0.400 ) 
 CNSsolve>eval($db.HIS_THR = 0.430 ) 
 CNSsolve>eval($db.HIS_TRP = 0.400 ) 
 CNSsolve>eval($db.HIS_TYR = 0.160 ) 
 CNSsolve>eval($db.HIS_VAL = 0.000 ) 
 CNSsolve>eval($db.NEP_ALA = 0.240 ) 
 CNSsolve>eval($db.NEP_ARG = 0.340 ) 
 CNSsolve>eval($db.NEP_ASN = 0.230 ) 
 CNSsolve>eval($db.NEP_ASP = 0.700 ) 
 CNSsolve>eval($db.NEP_CYS = 0.000 ) 
 CNSsolve>eval($db.NEP_GLN = 0.240 ) 
 CNSsolve>eval($db.NEP_GLU = 0.730 ) 
 CNSsolve>eval($db.NEP_GLY = 0.240 ) 
 CNSsolve>eval($db.NEP_NEP = 0.570 ) 
 CNSsolve>eval($db.NEP_HIS = 0.570 ) 
 CNSsolve>eval($db.NEP_ILE = 0.190 ) 
 CNSsolve>eval($db.NEP_LEU = 0.100 ) 
 CNSsolve>eval($db.NEP_LYS = 0.280 ) 
 CNSsolve>eval($db.NEP_MET = 0.380 ) 
 CNSsolve>eval($db.NEP_PHE = 0.000 ) 
 CNSsolve>eval($db.NEP_PRO = 0.170 ) 
 CNSsolve>eval($db.NEP_SER = 0.400 ) 
 CNSsolve>eval($db.NEP_THR = 0.430 ) 
 CNSsolve>eval($db.NEP_TRP = 0.400 ) 
 CNSsolve>eval($db.NEP_TYR = 0.160 ) 
 CNSsolve>eval($db.NEP_VAL = 0.000 ) 
 CNSsolve>eval($db.ILE_ALA = 0.170 ) 
 CNSsolve>eval($db.ILE_ARG = 0.240 ) 
 CNSsolve>eval($db.ILE_ASN = 0.070 ) 
 CNSsolve>eval($db.ILE_ASP = 0.100 ) 
 CNSsolve>eval($db.ILE_CYS = 0.090 ) 
 CNSsolve>eval($db.ILE_GLN = 0.150 ) 
 CNSsolve>eval($db.ILE_GLU = 0.260 ) 
 CNSsolve>eval($db.ILE_GLY = 0.090 ) 
 CNSsolve>eval($db.ILE_HIS = 0.190 ) 
 CNSsolve>eval($db.ILE_NEP = 0.190 ) 
 CNSsolve>eval($db.ILE_ILE = 0.090 ) 
 CNSsolve>eval($db.ILE_LEU = 0.110 ) 
 CNSsolve>eval($db.ILE_LYS = 0.240 ) 
 CNSsolve>eval($db.ILE_MET = 0.040 ) 
 CNSsolve>eval($db.ILE_PHE = 0.030 ) 
 CNSsolve>eval($db.ILE_PRO = 0.100 ) 
 CNSsolve>eval($db.ILE_SER = 0.100 ) 
 CNSsolve>eval($db.ILE_THR = 0.060 ) 
 CNSsolve>eval($db.ILE_TRP = 0.000 ) 
 CNSsolve>eval($db.ILE_TYR = 0.020 ) 
 CNSsolve>eval($db.ILE_VAL = 0.080 ) 
 CNSsolve>eval($db.LEU_ALA = 0.110 ) 
 CNSsolve>eval($db.LEU_ARG = 0.240 ) 
 CNSsolve>eval($db.LEU_ASN = 0.100 ) 
 CNSsolve>eval($db.LEU_ASP = 0.140 ) 
 CNSsolve>eval($db.LEU_CYS = 0.050 ) 
 CNSsolve>eval($db.LEU_GLN = 0.190 ) 
 CNSsolve>eval($db.LEU_GLU = 0.230 ) 
 CNSsolve>eval($db.LEU_GLY = 0.190 ) 
 CNSsolve>eval($db.LEU_HIS = 0.100 ) 
 CNSsolve>eval($db.LEU_NEP = 0.100 ) 
 CNSsolve>eval($db.LEU_ILE = 0.110 ) 
 CNSsolve>eval($db.LEU_LEU = 0.110 ) 
 CNSsolve>eval($db.LEU_LYS = 0.180 ) 
 CNSsolve>eval($db.LEU_MET = 0.270 ) 
 CNSsolve>eval($db.LEU_PHE = 0.030 ) 
 CNSsolve>eval($db.LEU_PRO = 0.120 ) 
 CNSsolve>eval($db.LEU_SER = 0.130 ) 
 CNSsolve>eval($db.LEU_THR = 0.130 ) 
 CNSsolve>eval($db.LEU_TRP = 0.110 ) 
 CNSsolve>eval($db.LEU_TYR = 0.090 ) 
 CNSsolve>eval($db.LEU_VAL = 0.100 ) 
 CNSsolve>eval($db.LYS_ALA = 0.210 ) 
 CNSsolve>eval($db.LYS_ARG = 0.350 ) 
 CNSsolve>eval($db.LYS_ASN = 0.270 ) 
 CNSsolve>eval($db.LYS_ASP = 0.460 ) 
 CNSsolve>eval($db.LYS_CYS = 0.330 ) 
 CNSsolve>eval($db.LYS_GLN = 0.350 ) 
 CNSsolve>eval($db.LYS_GLU = 0.390 ) 
 CNSsolve>eval($db.LYS_GLY = 0.520 ) 
 CNSsolve>eval($db.LYS_HIS = 0.280 ) 
 CNSsolve>eval($db.LYS_NEP = 0.280 ) 
 CNSsolve>eval($db.LYS_ILE = 0.240 ) 
 CNSsolve>eval($db.LYS_LEU = 0.180 ) 
 CNSsolve>eval($db.LYS_LYS = 0.580 ) 
 CNSsolve>eval($db.LYS_MET = 0.210 ) 
 CNSsolve>eval($db.LYS_PHE = 0.280 ) 
 CNSsolve>eval($db.LYS_PRO = 0.200 ) 
 CNSsolve>eval($db.LYS_SER = 0.420 ) 
 CNSsolve>eval($db.LYS_THR = 0.320 ) 
 CNSsolve>eval($db.LYS_TRP = 0.220 ) 
 CNSsolve>eval($db.LYS_TYR = 0.240 ) 
 CNSsolve>eval($db.LYS_VAL = 0.260 ) 
 CNSsolve>eval($db.MET_ALA = 0.240 ) 
 CNSsolve>eval($db.MET_ARG = 0.300 ) 
 CNSsolve>eval($db.MET_ASN = 0.190 ) 
 CNSsolve>eval($db.MET_ASP = 0.190 ) 
 CNSsolve>eval($db.MET_CYS = 0.000 ) 
 CNSsolve>eval($db.MET_GLN = 0.230 ) 
 CNSsolve>eval($db.MET_GLU = 0.250 ) 
 CNSsolve>eval($db.MET_GLY = 0.420 ) 
 CNSsolve>eval($db.MET_HIS = 0.380 ) 
 CNSsolve>eval($db.MET_NEP = 0.380 ) 
 CNSsolve>eval($db.MET_ILE = 0.040 ) 
 CNSsolve>eval($db.MET_LEU = 0.270 ) 
 CNSsolve>eval($db.MET_LYS = 0.210 ) 
 CNSsolve>eval($db.MET_MET = 0.400 ) 
 CNSsolve>eval($db.MET_PHE = 0.000 ) 
 CNSsolve>eval($db.MET_PRO = 0.000 ) 
 CNSsolve>eval($db.MET_SER = 0.120 ) 
 CNSsolve>eval($db.MET_THR = 0.350 ) 
 CNSsolve>eval($db.MET_TRP = 0.240 ) 
 CNSsolve>eval($db.MET_TYR = 0.230 ) 
 CNSsolve>eval($db.MET_VAL = 0.170 ) 
 CNSsolve>eval($db.PHE_ALA = 0.070 ) 
 CNSsolve>eval($db.PHE_ARG = 0.090 ) 
 CNSsolve>eval($db.PHE_ASN = 0.050 ) 
 CNSsolve>eval($db.PHE_ASP = 0.310 ) 
 CNSsolve>eval($db.PHE_CYS = 0.000 ) 
 CNSsolve>eval($db.PHE_GLN = 0.000 ) 
 CNSsolve>eval($db.PHE_GLU = 0.270 ) 
 CNSsolve>eval($db.PHE_GLY = 0.200 ) 
 CNSsolve>eval($db.PHE_HIS = 0.000 ) 
 CNSsolve>eval($db.PHE_NEP = 0.000 ) 
 CNSsolve>eval($db.PHE_ILE = 0.030 ) 
 CNSsolve>eval($db.PHE_LEU = 0.030 ) 
 CNSsolve>eval($db.PHE_LYS = 0.280 ) 
 CNSsolve>eval($db.PHE_MET = 0.000 ) 
 CNSsolve>eval($db.PHE_PHE = 0.000 ) 
 CNSsolve>eval($db.PHE_PRO = 0.000 ) 
 CNSsolve>eval($db.PHE_SER = 0.070 ) 
 CNSsolve>eval($db.PHE_THR = 0.030 ) 
 CNSsolve>eval($db.PHE_TRP = 0.000 ) 
 CNSsolve>eval($db.PHE_TYR = 0.120 ) 
 CNSsolve>eval($db.PHE_VAL = 0.110 ) 
 CNSsolve>eval($db.PRO_ALA = 0.240 ) 
 CNSsolve>eval($db.PRO_ARG = 0.340 ) 
 CNSsolve>eval($db.PRO_ASN = 0.110 ) 
 CNSsolve>eval($db.PRO_ASP = 0.130 ) 
 CNSsolve>eval($db.PRO_CYS = 0.200 ) 
 CNSsolve>eval($db.PRO_GLN = 0.570 ) 
 CNSsolve>eval($db.PRO_GLU = 0.290 ) 
 CNSsolve>eval($db.PRO_GLY = 0.250 ) 
 CNSsolve>eval($db.PRO_HIS = 0.170 ) 
 CNSsolve>eval($db.PRO_NEP = 0.170 ) 
 CNSsolve>eval($db.PRO_ILE = 0.100 ) 
 CNSsolve>eval($db.PRO_LEU = 0.120 ) 
 CNSsolve>eval($db.PRO_LYS = 0.200 ) 
 CNSsolve>eval($db.PRO_MET = 0.000 ) 
 CNSsolve>eval($db.PRO_PHE = 0.000 ) 
 CNSsolve>eval($db.PRO_PRO = 0.300 ) 
 CNSsolve>eval($db.PRO_SER = 0.190 ) 
 CNSsolve>eval($db.PRO_THR = 0.240 ) 
 CNSsolve>eval($db.PRO_TRP = 0.140 ) 
 CNSsolve>eval($db.PRO_TYR = 0.550 ) 
 CNSsolve>eval($db.PRO_VAL = 0.200 ) 
 CNSsolve>eval($db.SER_ALA = 0.170 ) 
 CNSsolve>eval($db.SER_ARG = 0.380 ) 
 CNSsolve>eval($db.SER_ASN = 0.270 ) 
 CNSsolve>eval($db.SER_ASP = 0.270 ) 
 CNSsolve>eval($db.SER_CYS = 0.580 ) 
 CNSsolve>eval($db.SER_GLN = 0.330 ) 
 CNSsolve>eval($db.SER_GLU = 0.460 ) 
 CNSsolve>eval($db.SER_GLY = 0.340 ) 
 CNSsolve>eval($db.SER_HIS = 0.400 ) 
 CNSsolve>eval($db.SER_NEP = 0.400 ) 
 CNSsolve>eval($db.SER_ILE = 0.100 ) 
 CNSsolve>eval($db.SER_LEU = 0.130 ) 
 CNSsolve>eval($db.SER_LYS = 0.420 ) 
 CNSsolve>eval($db.SER_MET = 0.120 ) 
 CNSsolve>eval($db.SER_PHE = 0.070 ) 
 CNSsolve>eval($db.SER_PRO = 0.190 ) 
 CNSsolve>eval($db.SER_SER = 0.130 ) 
 CNSsolve>eval($db.SER_THR = 0.340 ) 
 CNSsolve>eval($db.SER_TRP = 0.000 ) 
 CNSsolve>eval($db.SER_TYR = 0.140 ) 
 CNSsolve>eval($db.SER_VAL = 0.220 ) 
 CNSsolve>eval($db.THR_ALA = 0.060 ) 
 CNSsolve>eval($db.THR_ARG = 0.120 ) 
 CNSsolve>eval($db.THR_ASN = 0.250 ) 
 CNSsolve>eval($db.THR_ASP = 0.250 ) 
 CNSsolve>eval($db.THR_CYS = 0.000 ) 
 CNSsolve>eval($db.THR_GLN = 0.130 ) 
 CNSsolve>eval($db.THR_GLU = 0.270 ) 
 CNSsolve>eval($db.THR_GLY = 0.240 ) 
 CNSsolve>eval($db.THR_HIS = 0.430 ) 
 CNSsolve>eval($db.THR_NEP = 0.430 ) 
 CNSsolve>eval($db.THR_ILE = 0.060 ) 
 CNSsolve>eval($db.THR_LEU = 0.130 ) 
 CNSsolve>eval($db.THR_LYS = 0.320 ) 
 CNSsolve>eval($db.THR_MET = 0.350 ) 
 CNSsolve>eval($db.THR_PHE = 0.030 ) 
 CNSsolve>eval($db.THR_PRO = 0.240 ) 
 CNSsolve>eval($db.THR_SER = 0.340 ) 
 CNSsolve>eval($db.THR_THR = 0.090 ) 
 CNSsolve>eval($db.THR_TRP = 0.000 ) 
 CNSsolve>eval($db.THR_TYR = 0.200 ) 
 CNSsolve>eval($db.THR_VAL = 0.140 ) 
 CNSsolve>eval($db.TRP_ALA = 0.150 ) 
 CNSsolve>eval($db.TRP_ARG = 0.180 ) 
 CNSsolve>eval($db.TRP_ASN = 0.000 ) 
 CNSsolve>eval($db.TRP_ASP = 0.140 ) 
 CNSsolve>eval($db.TRP_CYS = 0.250 ) 
 CNSsolve>eval($db.TRP_GLN = 0.000 ) 
 CNSsolve>eval($db.TRP_GLU = 0.170 ) 
 CNSsolve>eval($db.TRP_GLY = 0.110 ) 
 CNSsolve>eval($db.TRP_HIS = 0.400 ) 
 CNSsolve>eval($db.TRP_NEP = 0.400 ) 
 CNSsolve>eval($db.TRP_ILE = 0.000 ) 
 CNSsolve>eval($db.TRP_LEU = 0.110 ) 
 CNSsolve>eval($db.TRP_LYS = 0.220 ) 
 CNSsolve>eval($db.TRP_MET = 0.240 ) 
 CNSsolve>eval($db.TRP_PHE = 0.000 ) 
 CNSsolve>eval($db.TRP_PRO = 0.140 ) 
 CNSsolve>eval($db.TRP_SER = 0.000 ) 
 CNSsolve>eval($db.TRP_THR = 0.000 ) 
 CNSsolve>eval($db.TRP_TRP = 0.000 ) 
 CNSsolve>eval($db.TRP_TYR = 0.250 ) 
 CNSsolve>eval($db.TRP_VAL = 0.140 ) 
 CNSsolve>eval($db.TYR_ALA = 0.150 ) 
 CNSsolve>eval($db.TYR_ARG = 0.280 ) 
 CNSsolve>eval($db.TYR_ASN = 0.170 ) 
 CNSsolve>eval($db.TYR_ASP = 0.280 ) 
 CNSsolve>eval($db.TYR_CYS = 0.060 ) 
 CNSsolve>eval($db.TYR_GLN = 0.470 ) 
 CNSsolve>eval($db.TYR_GLU = 0.310 ) 
 CNSsolve>eval($db.TYR_GLY = 0.370 ) 
 CNSsolve>eval($db.TYR_HIS = 0.160 ) 
 CNSsolve>eval($db.TYR_NEP = 0.160 ) 
 CNSsolve>eval($db.TYR_ILE = 0.020 ) 
 CNSsolve>eval($db.TYR_LEU = 0.090 ) 
 CNSsolve>eval($db.TYR_LYS = 0.240 ) 
 CNSsolve>eval($db.TYR_MET = 0.230 ) 
 CNSsolve>eval($db.TYR_PHE = 0.120 ) 
 CNSsolve>eval($db.TYR_PRO = 0.550 ) 
 CNSsolve>eval($db.TYR_SER = 0.140 ) 
 CNSsolve>eval($db.TYR_THR = 0.200 ) 
 CNSsolve>eval($db.TYR_TRP = 0.250 ) 
 CNSsolve>eval($db.TYR_TYR = 0.270 ) 
 CNSsolve>eval($db.TYR_VAL = 0.220 ) 
 CNSsolve>eval($db.VAL_ALA = 0.080 ) 
 CNSsolve>eval($db.VAL_ARG = 0.280 ) 
 CNSsolve>eval($db.VAL_ASN = 0.260 ) 
 CNSsolve>eval($db.VAL_ASP = 0.310 ) 
 CNSsolve>eval($db.VAL_CYS = 0.140 ) 
 CNSsolve>eval($db.VAL_GLN = 0.230 ) 
 CNSsolve>eval($db.VAL_GLU = 0.270 ) 
 CNSsolve>eval($db.VAL_GLY = 0.250 ) 
 CNSsolve>eval($db.VAL_HIS = 0.000 ) 
 CNSsolve>eval($db.VAL_NEP = 0.000 ) 
 CNSsolve>eval($db.VAL_ILE = 0.080 ) 
 CNSsolve>eval($db.VAL_LEU = 0.100 ) 
 CNSsolve>eval($db.VAL_LYS = 0.260 ) 
 CNSsolve>eval($db.VAL_MET = 0.170 ) 
 CNSsolve>eval($db.VAL_PHE = 0.110 ) 
 CNSsolve>eval($db.VAL_PRO = 0.200 ) 
 CNSsolve>eval($db.VAL_SER = 0.220 ) 
 CNSsolve>eval($db.VAL_THR = 0.140 ) 
 CNSsolve>eval($db.VAL_TRP = 0.140 ) 
 CNSsolve>eval($db.VAL_TYR = 0.220 ) 
 CNSsolve>eval($db.VAL_VAL = 0.170 ) 
 CNSsolve>eval($db.ALA_ADE = 0.00 ) 
 CNSsolve>eval($db.ALA_CYT = 0.00 ) 
 CNSsolve>eval($db.ALA_GUA = 0.00 ) 
 CNSsolve>eval($db.ALA_THY = 0.00 ) 
 CNSsolve>eval($db.ARG_ADE = 0.14 ) 
 CNSsolve>eval($db.ARG_CYT = 0.07 ) 
 CNSsolve>eval($db.ARG_GUA = 0.14 ) 
 CNSsolve>eval($db.ARG_THY = 0.08 ) 
 CNSsolve>eval($db.ASN_ADE = 0.19 ) 
 CNSsolve>eval($db.ASN_CYT = 0.09 ) 
 CNSsolve>eval($db.ASN_GUA = 0.22 ) 
 CNSsolve>eval($db.ASN_THY = 0.10 ) 
 CNSsolve>eval($db.ASP_ADE = 0.44 ) 
 CNSsolve>eval($db.ASP_CYT = 0.16 ) 
 CNSsolve>eval($db.ASP_GUA = 0.10 ) 
 CNSsolve>eval($db.ASP_THY = 0.05 ) 
 CNSsolve>eval($db.CYS_ADE = 0.00 ) 
 CNSsolve>eval($db.CYS_CYT = 0.00 ) 
 CNSsolve>eval($db.CYS_GUA = 0.00 ) 
 CNSsolve>eval($db.CYS_THY = 0.00 ) 
 CNSsolve>eval($db.GLN_ADE = 0.15 ) 
 CNSsolve>eval($db.GLN_CYT = 0.19 ) 
 CNSsolve>eval($db.GLN_GUA = 0.15 ) 
 CNSsolve>eval($db.GLN_THY = 0.13 ) 
 CNSsolve>eval($db.GLU_ADE = 0.11 ) 
 CNSsolve>eval($db.GLU_CYT = 0.15 ) 
 CNSsolve>eval($db.GLU_GUA = 0.13 ) 
 CNSsolve>eval($db.GLU_THY = 0.00 ) 
 CNSsolve>eval($db.GLY_ADE = 0.00 ) 
 CNSsolve>eval($db.GLY_CYT = 0.00 ) 
 CNSsolve>eval($db.GLY_GUA = 0.00 ) 
 CNSsolve>eval($db.GLY_THY = 0.00 ) 
 CNSsolve>eval($db.HIS_ADE = 0.10 ) 
 CNSsolve>eval($db.HIS_CYT = 0.14 ) 
 CNSsolve>eval($db.HIS_GUA = 0.18 ) 
 CNSsolve>eval($db.HIS_THY = 0.06 ) 
 CNSsolve>eval($db.ILE_ADE = 0.00 ) 
 CNSsolve>eval($db.ILE_CYT = 0.00 ) 
 CNSsolve>eval($db.ILE_GUA = 0.00 ) 
 CNSsolve>eval($db.ILE_THY = 0.00 ) 
 CNSsolve>eval($db.LEU_ADE = 0.00 ) 
 CNSsolve>eval($db.LEU_CYT = 0.00 ) 
 CNSsolve>eval($db.LEU_GUA = 0.00 ) 
 CNSsolve>eval($db.LEU_THY = 0.00 ) 
 CNSsolve>eval($db.LYS_ADE = 0.31 ) 
 CNSsolve>eval($db.LYS_CYT = 0.15 ) 
 CNSsolve>eval($db.LYS_GUA = 0.29 ) 
 CNSsolve>eval($db.LYS_THY = 0.18 ) 
 CNSsolve>eval($db.MET_ADE = 0.00 ) 
 CNSsolve>eval($db.MET_CYT = 0.00 ) 
 CNSsolve>eval($db.MET_GUA = 0.00 ) 
 CNSsolve>eval($db.MET_THY = 0.00 ) 
 CNSsolve>eval($db.PHE_ADE = 0.00 ) 
 CNSsolve>eval($db.PHE_CYT = 0.00 ) 
 CNSsolve>eval($db.PHE_GUA = 0.00 ) 
 CNSsolve>eval($db.PHE_THY = 0.00 ) 
 CNSsolve>eval($db.PRO_ADE = 0.00 ) 
 CNSsolve>eval($db.PRO_CYT = 0.00 ) 
 CNSsolve>eval($db.PRO_GUA = 0.00 ) 
 CNSsolve>eval($db.PRO_THY = 0.00 ) 
 CNSsolve>eval($db.SER_ADE = 0.30 ) 
 CNSsolve>eval($db.SER_CYT = 0.03 ) 
 CNSsolve>eval($db.SER_GUA = 0.09 ) 
 CNSsolve>eval($db.SER_THY = 0.03 ) 
 CNSsolve>eval($db.THR_ADE = 0.16 ) 
 CNSsolve>eval($db.THR_CYT = 0.16 ) 
 CNSsolve>eval($db.THR_GUA = 0.03 ) 
 CNSsolve>eval($db.THR_THY = 0.05 ) 
 CNSsolve>eval($db.TRP_ADE = 0.00 ) 
 CNSsolve>eval($db.TRP_CYT = 0.00 ) 
 CNSsolve>eval($db.TRP_GUA = 0.00 ) 
 CNSsolve>eval($db.TRP_THY = 0.00 ) 
 CNSsolve>eval($db.TYR_ADE = 0.13 ) 
 CNSsolve>eval($db.TYR_CYT = 0.10 ) 
 CNSsolve>eval($db.TYR_GUA = 0.10 ) 
 CNSsolve>eval($db.TYR_THY = 0.02 ) 
 CNSsolve>eval($db.VAL_ADE = 0.00 ) 
 CNSsolve>eval($db.VAL_CYT = 0.00 ) 
 CNSsolve>eval($db.VAL_GUA = 0.00 ) 
 CNSsolve>eval($db.VAL_THY = 0.00 ) 
 CNSsolve>eval($db.ADE_ALA = 0.00 ) 
 CNSsolve>eval($db.CYT_ALA = 0.00 ) 
 CNSsolve>eval($db.GUA_ALA = 0.00 ) 
 CNSsolve>eval($db.THY_ALA = 0.00 ) 
 CNSsolve>eval($db.ADE_ARG = 0.14 ) 
 CNSsolve>eval($db.CYT_ARG = 0.07 ) 
 CNSsolve>eval($db.GUA_ARG = 0.14 ) 
 CNSsolve>eval($db.THY_ARG = 0.08 ) 
 CNSsolve>eval($db.ADE_ASN = 0.19 ) 
 CNSsolve>eval($db.CYT_ASN = 0.09 ) 
 CNSsolve>eval($db.GUA_ASN = 0.22 ) 
 CNSsolve>eval($db.THY_ASN = 0.10 ) 
 CNSsolve>eval($db.ADE_ASP = 0.44 ) 
 CNSsolve>eval($db.CYT_ASP = 0.16 ) 
 CNSsolve>eval($db.GUA_ASP = 0.10 ) 
 CNSsolve>eval($db.THY_ASP = 0.05 ) 
 CNSsolve>eval($db.ADE_CYS = 0.00 ) 
 CNSsolve>eval($db.CYT_CYS = 0.00 ) 
 CNSsolve>eval($db.GUA_CYS = 0.00 ) 
 CNSsolve>eval($db.THY_CYS = 0.00 ) 
 CNSsolve>eval($db.ADE_GLN = 0.15 ) 
 CNSsolve>eval($db.CYT_GLN = 0.19 ) 
 CNSsolve>eval($db.GUA_GLN = 0.15 ) 
 CNSsolve>eval($db.THY_GLN = 0.13 ) 
 CNSsolve>eval($db.ADE_GLU = 0.11 ) 
 CNSsolve>eval($db.CYT_GLU = 0.15 ) 
 CNSsolve>eval($db.GUA_GLU = 0.13 ) 
 CNSsolve>eval($db.THY_GLU = 0.00 ) 
 CNSsolve>eval($db.ADE_GLY = 0.00 ) 
 CNSsolve>eval($db.CYT_GLY = 0.00 ) 
 CNSsolve>eval($db.GUA_GLY = 0.00 ) 
 CNSsolve>eval($db.THY_GLY = 0.00 ) 
 CNSsolve>eval($db.ADE_HIS = 0.10 ) 
 CNSsolve>eval($db.CYT_HIS = 0.14 ) 
 CNSsolve>eval($db.GUA_HIS = 0.18 ) 
 CNSsolve>eval($db.THY_HIS = 0.06 ) 
 CNSsolve>eval($db.ADE_ILE = 0.00 ) 
 CNSsolve>eval($db.CYT_ILE = 0.00 ) 
 CNSsolve>eval($db.GUA_ILE = 0.00 ) 
 CNSsolve>eval($db.THY_ILE = 0.00 ) 
 CNSsolve>eval($db.ADE_LEU = 0.00 ) 
 CNSsolve>eval($db.CYT_LEU = 0.00 ) 
 CNSsolve>eval($db.GUA_LEU = 0.00 ) 
 CNSsolve>eval($db.THY_LEU = 0.00 ) 
 CNSsolve>eval($db.ADE_LYS = 0.31 ) 
 CNSsolve>eval($db.CYT_LYS = 0.15 ) 
 CNSsolve>eval($db.GUA_LYS = 0.29 ) 
 CNSsolve>eval($db.THY_LYS = 0.18 ) 
 CNSsolve>eval($db.ADE_MET = 0.00 ) 
 CNSsolve>eval($db.CYT_MET = 0.00 ) 
 CNSsolve>eval($db.GUA_MET = 0.00 ) 
 CNSsolve>eval($db.THY_MET = 0.00 ) 
 CNSsolve>eval($db.ADE_PHE = 0.00 ) 
 CNSsolve>eval($db.CYT_PHE = 0.00 ) 
 CNSsolve>eval($db.GUA_PHE = 0.00 ) 
 CNSsolve>eval($db.THY_PHE = 0.00 ) 
 CNSsolve>eval($db.ADE_PRO = 0.00 ) 
 CNSsolve>eval($db.CYT_PRO = 0.00 ) 
 CNSsolve>eval($db.GUA_PRO = 0.00 ) 
 CNSsolve>eval($db.THY_PRO = 0.00 ) 
 CNSsolve>eval($db.ADE_SER = 0.30 ) 
 CNSsolve>eval($db.CYT_SER = 0.03 ) 
 CNSsolve>eval($db.GUA_SER = 0.09 ) 
 CNSsolve>eval($db.THY_SER = 0.03 ) 
 CNSsolve>eval($db.ADE_THR = 0.16 ) 
 CNSsolve>eval($db.CYT_THR = 0.16 ) 
 CNSsolve>eval($db.GUA_THR = 0.03 ) 
 CNSsolve>eval($db.THY_THR = 0.05 ) 
 CNSsolve>eval($db.ADE_TRP = 0.00 ) 
 CNSsolve>eval($db.CYT_TRP = 0.00 ) 
 CNSsolve>eval($db.GUA_TRP = 0.00 ) 
 CNSsolve>eval($db.THY_TRP = 0.00 ) 
 CNSsolve>eval($db.ADE_TYR = 0.13 ) 
 CNSsolve>eval($db.CYT_TYR = 0.10 ) 
 CNSsolve>eval($db.GUA_TYR = 0.10 ) 
 CNSsolve>eval($db.THY_TYR = 0.02 ) 
 CNSsolve>eval($db.ADE_VAL = 0.00 ) 
 CNSsolve>eval($db.CYT_VAL = 0.00 ) 
 CNSsolve>eval($db.GUA_VAL = 0.00 ) 
 CNSsolve>eval($db.THY_VAL = 0.00 ) 
 CNSsolve>eval($db.DP_ALA_ADE = 0.51 ) 
 CNSsolve>eval($db.DP_ALA_CYT = 0.51 ) 
 CNSsolve>eval($db.DP_ALA_GUA = 0.51 ) 
 CNSsolve>eval($db.DP_ALA_THY = 0.51 ) 
 CNSsolve>eval($db.DP_ARG_ADE = 0.34 ) 
 CNSsolve>eval($db.DP_ARG_CYT = 0.34 ) 
 CNSsolve>eval($db.DP_ARG_GUA = 0.34 ) 
 CNSsolve>eval($db.DP_ARG_THY = 0.34 ) 
 CNSsolve>eval($db.DP_ASN_ADE = 0.52 ) 
 CNSsolve>eval($db.DP_ASN_CYT = 0.52 ) 
 CNSsolve>eval($db.DP_ASN_GUA = 0.52 ) 
 CNSsolve>eval($db.DP_ASN_THY = 0.52 ) 
 CNSsolve>eval($db.DP_ASP_ADE = 0.93 ) 
 CNSsolve>eval($db.DP_ASP_CYT = 0.93 ) 
 CNSsolve>eval($db.DP_ASP_GUA = 0.93 ) 
 CNSsolve>eval($db.DP_ASP_THY = 0.93 ) 
 CNSsolve>eval($db.DP_CYS_ADE = 0.43 ) 
 CNSsolve>eval($db.DP_CYS_CYT = 0.43 ) 
 CNSsolve>eval($db.DP_CYS_GUA = 0.43 ) 
 CNSsolve>eval($db.DP_CYS_THY = 0.43 ) 
 CNSsolve>eval($db.DP_GLN_ADE = 0.47 ) 
 CNSsolve>eval($db.DP_GLN_CYT = 0.47 ) 
 CNSsolve>eval($db.DP_GLN_GUA = 0.47 ) 
 CNSsolve>eval($db.DP_GLN_THY = 0.47 ) 
 CNSsolve>eval($db.DP_GLU_ADE = 0.83 ) 
 CNSsolve>eval($db.DP_GLU_CYT = 0.83 ) 
 CNSsolve>eval($db.DP_GLU_GUA = 0.83 ) 
 CNSsolve>eval($db.DP_GLU_THY = 0.83 ) 
 CNSsolve>eval($db.DP_GLY_ADE = 0.38 ) 
 CNSsolve>eval($db.DP_GLY_CYT = 0.38 ) 
 CNSsolve>eval($db.DP_GLY_GUA = 0.38 ) 
 CNSsolve>eval($db.DP_GLY_THY = 0.38 ) 
 CNSsolve>eval($db.DP_HIS_ADE = 0.40 ) 
 CNSsolve>eval($db.DP_HIS_CYT = 0.40 ) 
 CNSsolve>eval($db.DP_HIS_GUA = 0.40 ) 
 CNSsolve>eval($db.DP_HIS_THY = 0.40 ) 
 CNSsolve>eval($db.DP_ILE_ADE = 0.54 ) 
 CNSsolve>eval($db.DP_ILE_CYT = 0.54 ) 
 CNSsolve>eval($db.DP_ILE_GUA = 0.54 ) 
 CNSsolve>eval($db.DP_ILE_THY = 0.54 ) 
 CNSsolve>eval($db.DP_LEU_ADE = 0.38 ) 
 CNSsolve>eval($db.DP_LEU_CYT = 0.38 ) 
 CNSsolve>eval($db.DP_LEU_GUA = 0.38 ) 
 CNSsolve>eval($db.DP_LEU_THY = 0.38 ) 
 CNSsolve>eval($db.DP_LYS_ADE = 0.35 ) 
 CNSsolve>eval($db.DP_LYS_CYT = 0.35 ) 
 CNSsolve>eval($db.DP_LYS_GUA = 0.35 ) 
 CNSsolve>eval($db.DP_LYS_THY = 0.35 ) 
 CNSsolve>eval($db.DP_MET_ADE = 0.50 ) 
 CNSsolve>eval($db.DP_MET_CYT = 0.50 ) 
 CNSsolve>eval($db.DP_MET_GUA = 0.50 ) 
 CNSsolve>eval($db.DP_MET_THY = 0.50 ) 
 CNSsolve>eval($db.DP_PHE_ADE = 0.75 ) 
 CNSsolve>eval($db.DP_PHE_CYT = 0.75 ) 
 CNSsolve>eval($db.DP_PHE_GUA = 0.75 ) 
 CNSsolve>eval($db.DP_PHE_THY = 0.75 ) 
 CNSsolve>eval($db.DP_PRO_ADE = 1.00 ) 
 CNSsolve>eval($db.DP_PRO_CYT = 1.00 ) 
 CNSsolve>eval($db.DP_PRO_GUA = 1.00 ) 
 CNSsolve>eval($db.DP_PRO_THY = 1.00 ) 
 CNSsolve>eval($db.DP_SER_ADE = 0.38 ) 
 CNSsolve>eval($db.DP_SER_CYT = 0.38 ) 
 CNSsolve>eval($db.DP_SER_GUA = 0.38 ) 
 CNSsolve>eval($db.DP_SER_THY = 0.38 ) 
 CNSsolve>eval($db.DP_THR_ADE = 0.40 ) 
 CNSsolve>eval($db.DP_THR_CYT = 0.40 ) 
 CNSsolve>eval($db.DP_THR_GUA = 0.40 ) 
 CNSsolve>eval($db.DP_THR_THY = 0.40 ) 
 CNSsolve>eval($db.DP_TRP_ADE = 0.67 ) 
 CNSsolve>eval($db.DP_TRP_CYT = 0.67 ) 
 CNSsolve>eval($db.DP_TRP_GUA = 0.67 ) 
 CNSsolve>eval($db.DP_TRP_THY = 0.67 ) 
 CNSsolve>eval($db.DP_TYR_ADE = 0.43 ) 
 CNSsolve>eval($db.DP_TYR_CYT = 0.43 ) 
 CNSsolve>eval($db.DP_TYR_GUA = 0.43 ) 
 CNSsolve>eval($db.DP_TYR_THY = 0.43 ) 
 CNSsolve>eval($db.DP_VAL_ADE = 0.50 ) 
 CNSsolve>eval($db.DP_VAL_CYT = 0.50 ) 
 CNSsolve>eval($db.DP_VAL_GUA = 0.50 ) 
 CNSsolve>eval($db.DP_VAL_THY = 0.50 ) 
 CNSsolve>eval($db.DP_ADE_ALA = 0.51 ) 
 CNSsolve>eval($db.DP_CYT_ALA = 0.51 ) 
 CNSsolve>eval($db.DP_GUA_ALA = 0.51 ) 
 CNSsolve>eval($db.DP_THY_ALA = 0.51 ) 
 CNSsolve>eval($db.DP_ADE_ARG = 0.34 ) 
 CNSsolve>eval($db.DP_CYT_ARG = 0.34 ) 
 CNSsolve>eval($db.DP_GUA_ARG = 0.34 ) 
 CNSsolve>eval($db.DP_THY_ARG = 0.34 ) 
 CNSsolve>eval($db.DP_ADE_ASN = 0.52 ) 
 CNSsolve>eval($db.DP_CYT_ASN = 0.52 ) 
 CNSsolve>eval($db.DP_GUA_ASN = 0.52 ) 
 CNSsolve>eval($db.DP_THY_ASN = 0.52 ) 
 CNSsolve>eval($db.DP_ADE_ASP = 0.93 ) 
 CNSsolve>eval($db.DP_CYT_ASP = 0.93 ) 
 CNSsolve>eval($db.DP_GUA_ASP = 0.93 ) 
 CNSsolve>eval($db.DP_THY_ASP = 0.93 ) 
 CNSsolve>eval($db.DP_ADE_CYS = 0.43 ) 
 CNSsolve>eval($db.DP_CYT_CYS = 0.43 ) 
 CNSsolve>eval($db.DP_GUA_CYS = 0.43 ) 
 CNSsolve>eval($db.DP_THY_CYS = 0.43 ) 
 CNSsolve>eval($db.DP_ADE_GLN = 0.47 ) 
 CNSsolve>eval($db.DP_CYT_GLN = 0.47 ) 
 CNSsolve>eval($db.DP_GUA_GLN = 0.47 ) 
 CNSsolve>eval($db.DP_THY_GLN = 0.47 ) 
 CNSsolve>eval($db.DP_ADE_GLU = 0.83 ) 
 CNSsolve>eval($db.DP_CYT_GLU = 0.83 ) 
 CNSsolve>eval($db.DP_GUA_GLU = 0.83 ) 
 CNSsolve>eval($db.DP_THY_GLU = 0.83 ) 
 CNSsolve>eval($db.DP_ADE_GLY = 0.38 ) 
 CNSsolve>eval($db.DP_CYT_GLY = 0.38 ) 
 CNSsolve>eval($db.DP_GUA_GLY = 0.38 ) 
 CNSsolve>eval($db.DP_THY_GLY = 0.38 ) 
 CNSsolve>eval($db.DP_ADE_HIS = 0.40 ) 
 CNSsolve>eval($db.DP_CYT_HIS = 0.40 ) 
 CNSsolve>eval($db.DP_GUA_HIS = 0.40 ) 
 CNSsolve>eval($db.DP_THY_HIS = 0.40 ) 
 CNSsolve>eval($db.DP_ADE_ILE = 0.54 ) 
 CNSsolve>eval($db.DP_CYT_ILE = 0.54 ) 
 CNSsolve>eval($db.DP_GUA_ILE = 0.54 ) 
 CNSsolve>eval($db.DP_THY_ILE = 0.54 ) 
 CNSsolve>eval($db.DP_ADE_LEU = 0.38 ) 
 CNSsolve>eval($db.DP_CYT_LEU = 0.38 ) 
 CNSsolve>eval($db.DP_GUA_LEU = 0.38 ) 
 CNSsolve>eval($db.DP_THY_LEU = 0.38 ) 
 CNSsolve>eval($db.DP_ADE_LYS = 0.35 ) 
 CNSsolve>eval($db.DP_CYT_LYS = 0.35 ) 
 CNSsolve>eval($db.DP_GUA_LYS = 0.35 ) 
 CNSsolve>eval($db.DP_THY_LYS = 0.35 ) 
 CNSsolve>eval($db.DP_ADE_MET = 0.50 ) 
 CNSsolve>eval($db.DP_CYT_MET = 0.50 ) 
 CNSsolve>eval($db.DP_GUA_MET = 0.50 ) 
 CNSsolve>eval($db.DP_THY_MET = 0.50 ) 
 CNSsolve>eval($db.DP_ADE_PHE = 0.75 ) 
 CNSsolve>eval($db.DP_CYT_PHE = 0.75 ) 
 CNSsolve>eval($db.DP_GUA_PHE = 0.75 ) 
 CNSsolve>eval($db.DP_THY_PHE = 0.75 ) 
 CNSsolve>eval($db.DP_ADE_PRO = 1.00 ) 
 CNSsolve>eval($db.DP_CYT_PRO = 1.00 ) 
 CNSsolve>eval($db.DP_GUA_PRO = 1.00 ) 
 CNSsolve>eval($db.DP_THY_PRO = 1.00 ) 
 CNSsolve>eval($db.DP_ADE_SER = 0.38 ) 
 CNSsolve>eval($db.DP_CYT_SER = 0.38 ) 
 CNSsolve>eval($db.DP_GUA_SER = 0.38 ) 
 CNSsolve>eval($db.DP_THY_SER = 0.38 ) 
 CNSsolve>eval($db.DP_ADE_THR = 0.40 ) 
 CNSsolve>eval($db.DP_CYT_THR = 0.40 ) 
 CNSsolve>eval($db.DP_GUA_THR = 0.40 ) 
 CNSsolve>eval($db.DP_THY_THR = 0.40 ) 
 CNSsolve>eval($db.DP_ADE_TRP = 0.67 ) 
 CNSsolve>eval($db.DP_CYT_TRP = 0.67 ) 
 CNSsolve>eval($db.DP_GUA_TRP = 0.67 ) 
 CNSsolve>eval($db.DP_THY_TRP = 0.67 ) 
 CNSsolve>eval($db.DP_ADE_TYR = 0.43 ) 
 CNSsolve>eval($db.DP_CYT_TYR = 0.43 ) 
 CNSsolve>eval($db.DP_GUA_TYR = 0.43 ) 
 CNSsolve>eval($db.DP_THY_TYR = 0.43 ) 
 CNSsolve>eval($db.DP_ADE_VAL = 0.50 ) 
 CNSsolve>eval($db.DP_CYT_VAL = 0.50 ) 
 CNSsolve>eval($db.DP_GUA_VAL = 0.50 ) 
 CNSsolve>eval($db.DP_THY_VAL = 0.50 ) 
 CNSsolve>else 
 CNSsolve>  inline @RUN:protocols/db_kyte-doolittle.dat 
 ASSFIL: file db_kyte-doolittle.dat opened.
 CNSsolve>! db_kyte-doolittle.dat 
 CNSsolve>!    Kyte-Doolittle derived probabilities of finding a water molecule 
 CNSsolve>!    between two specific amino acids 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve>eval ($db.ALA_ALA = 0.1096) 
 CNSsolve>eval ($db.ALA_ARG = 0.3288) 
 CNSsolve>eval ($db.ALA_ASN = 0.3014) 
 CNSsolve>eval ($db.ALA_ASP = 0.3014) 
 CNSsolve>eval ($db.ALA_CYS = 0.0822) 
 CNSsolve>eval ($db.ALA_GLN = 0.3014) 
 CNSsolve>eval ($db.ALA_GLU = 0.3014) 
 CNSsolve>eval ($db.ALA_GLY = 0.1918) 
 CNSsolve>eval ($db.ALA_HIS = 0.2877) 
 CNSsolve>eval ($db.ALA_ILE = 0.0137) 
 CNSsolve>eval ($db.ALA_LEU = 0.0411) 
 CNSsolve>eval ($db.ALA_LYS = 0.3151) 
 CNSsolve>eval ($db.ALA_MET = 0.1096) 
 CNSsolve>eval ($db.ALA_PHE = 0.0822) 
 CNSsolve>eval ($db.ALA_PRO = 0.2329) 
 CNSsolve>eval ($db.ALA_SER = 0.2055) 
 CNSsolve>eval ($db.ALA_THR = 0.2055) 
 CNSsolve>eval ($db.ALA_TRP = 0.2055) 
 CNSsolve>eval ($db.ALA_TYR = 0.2192) 
 CNSsolve>eval ($db.ALA_VAL = 0.0274) 
 CNSsolve>eval ($db.ALA_NEP = 0.1918) 
 CNSsolve>eval ($db.ARG_ALA = 0.3288) 
 CNSsolve>eval ($db.ARG_ARG = 1.0001) 
 CNSsolve>eval ($db.ARG_ASN = 0.8905) 
 CNSsolve>eval ($db.ARG_ASP = 0.8905) 
 CNSsolve>eval ($db.ARG_CYS = 0.2603) 
 CNSsolve>eval ($db.ARG_GLN = 0.8905) 
 CNSsolve>eval ($db.ARG_GLU = 0.8905) 
 CNSsolve>eval ($db.ARG_GLY = 0.5617) 
 CNSsolve>eval ($db.ARG_HIS = 0.8631) 
 CNSsolve>eval ($db.ARG_ILE = 0.0548) 
 CNSsolve>eval ($db.ARG_LEU = 0.1233) 
 CNSsolve>eval ($db.ARG_LYS = 0.9316) 
 CNSsolve>eval ($db.ARG_MET = 0.3288) 
 CNSsolve>eval ($db.ARG_PHE = 0.2329) 
 CNSsolve>eval ($db.ARG_PRO = 0.685) 
 CNSsolve>eval ($db.ARG_SER = 0.6028) 
 CNSsolve>eval ($db.ARG_THR = 0.6028) 
 CNSsolve>eval ($db.ARG_TRP = 0.6165) 
 CNSsolve>eval ($db.ARG_TYR = 0.6576) 
 CNSsolve>eval ($db.ARG_VAL = 0.0822) 
 CNSsolve>eval ($db.ARG_NEP = 0.5754) 
 CNSsolve>eval ($db.ASN_ALA = 0.3014) 
 CNSsolve>eval ($db.ASN_ARG = 0.8905) 
 CNSsolve>eval ($db.ASN_ASN = 0.7946) 
 CNSsolve>eval ($db.ASN_ASP = 0.7946) 
 CNSsolve>eval ($db.ASN_CYS = 0.2329) 
 CNSsolve>eval ($db.ASN_GLN = 0.7946) 
 CNSsolve>eval ($db.ASN_GLU = 0.7946) 
 CNSsolve>eval ($db.ASN_GLY = 0.5069) 
 CNSsolve>eval ($db.ASN_HIS = 0.7672) 
 CNSsolve>eval ($db.ASN_ILE = 0.0411) 
 CNSsolve>eval ($db.ASN_LEU = 0.1096) 
 CNSsolve>eval ($db.ASN_LYS = 0.8357) 
 CNSsolve>eval ($db.ASN_MET = 0.2877) 
 CNSsolve>eval ($db.ASN_PHE = 0.2055) 
 CNSsolve>eval ($db.ASN_PRO = 0.6165) 
 CNSsolve>eval ($db.ASN_SER = 0.548) 
 CNSsolve>eval ($db.ASN_THR = 0.5343) 
 CNSsolve>eval ($db.ASN_TRP = 0.548) 
 CNSsolve>eval ($db.ASN_TYR = 0.5891) 
 CNSsolve>eval ($db.ASN_VAL = 0.0685) 
 CNSsolve>eval ($db.ASN_NEP = 0.5069) 
 CNSsolve>eval ($db.ASP_ALA = 0.3014) 
 CNSsolve>eval ($db.ASP_ARG = 0.8905) 
 CNSsolve>eval ($db.ASP_ASN = 0.7946) 
 CNSsolve>eval ($db.ASP_ASP = 0.7946) 
 CNSsolve>eval ($db.ASP_CYS = 0.2329) 
 CNSsolve>eval ($db.ASP_GLN = 0.7946) 
 CNSsolve>eval ($db.ASP_GLU = 0.7946) 
 CNSsolve>eval ($db.ASP_GLY = 0.5069) 
 CNSsolve>eval ($db.ASP_HIS = 0.7672) 
 CNSsolve>eval ($db.ASP_ILE = 0.0411) 
 CNSsolve>eval ($db.ASP_LEU = 0.1096) 
 CNSsolve>eval ($db.ASP_LYS = 0.8357) 
 CNSsolve>eval ($db.ASP_MET = 0.2877) 
 CNSsolve>eval ($db.ASP_PHE = 0.2055) 
 CNSsolve>eval ($db.ASP_PRO = 0.6165) 
 CNSsolve>eval ($db.ASP_SER = 0.548) 
 CNSsolve>eval ($db.ASP_THR = 0.5343) 
 CNSsolve>eval ($db.ASP_TRP = 0.548) 
 CNSsolve>eval ($db.ASP_TYR = 0.5891) 
 CNSsolve>eval ($db.ASP_VAL = 0.0685) 
 CNSsolve>eval ($db.ASP_NEP = 0.5069) 
 CNSsolve>eval ($db.CYS_ALA = 0.0822) 
 CNSsolve>eval ($db.CYS_ARG = 0.2603) 
 CNSsolve>eval ($db.CYS_ASN = 0.2329) 
 CNSsolve>eval ($db.CYS_ASP = 0.2329) 
 CNSsolve>eval ($db.CYS_CYS = 0.0685) 
 CNSsolve>eval ($db.CYS_GLN = 0.2329) 
 CNSsolve>eval ($db.CYS_GLU = 0.2329) 
 CNSsolve>eval ($db.CYS_GLY = 0.1507) 
 CNSsolve>eval ($db.CYS_HIS = 0.2192) 
 CNSsolve>eval ($db.CYS_ILE = 0.0137) 
 CNSsolve>eval ($db.CYS_LEU = 0.0274) 
 CNSsolve>eval ($db.CYS_LYS = 0.2466) 
 CNSsolve>eval ($db.CYS_MET = 0.0822) 
 CNSsolve>eval ($db.CYS_PHE = 0.0548) 
 CNSsolve>eval ($db.CYS_PRO = 0.1781) 
 CNSsolve>eval ($db.CYS_SER = 0.1644) 
 CNSsolve>eval ($db.CYS_THR = 0.1507) 
 CNSsolve>eval ($db.CYS_TRP = 0.1644) 
 CNSsolve>eval ($db.CYS_TYR = 0.1781) 
 CNSsolve>eval ($db.CYS_VAL = 0.0274) 
 CNSsolve>eval ($db.CYS_NEP = 0.1507) 
 CNSsolve>eval ($db.GLN_ALA = 0.3014) 
 CNSsolve>eval ($db.GLN_ARG = 0.8905) 
 CNSsolve>eval ($db.GLN_ASN = 0.7946) 
 CNSsolve>eval ($db.GLN_ASP = 0.7946) 
 CNSsolve>eval ($db.GLN_CYS = 0.2329) 
 CNSsolve>eval ($db.GLN_GLN = 0.7946) 
 CNSsolve>eval ($db.GLN_GLU = 0.7946) 
 CNSsolve>eval ($db.GLN_GLY = 0.5069) 
 CNSsolve>eval ($db.GLN_HIS = 0.7672) 
 CNSsolve>eval ($db.GLN_ILE = 0.0411) 
 CNSsolve>eval ($db.GLN_LEU = 0.1096) 
 CNSsolve>eval ($db.GLN_LYS = 0.8357) 
 CNSsolve>eval ($db.GLN_MET = 0.2877) 
 CNSsolve>eval ($db.GLN_PHE = 0.2055) 
 CNSsolve>eval ($db.GLN_PRO = 0.6165) 
 CNSsolve>eval ($db.GLN_SER = 0.548) 
 CNSsolve>eval ($db.GLN_THR = 0.5343) 
 CNSsolve>eval ($db.GLN_TRP = 0.548) 
 CNSsolve>eval ($db.GLN_TYR = 0.5891) 
 CNSsolve>eval ($db.GLN_VAL = 0.0685) 
 CNSsolve>eval ($db.GLN_NEP = 0.5069) 
 CNSsolve>eval ($db.GLU_ALA = 0.3014) 
 CNSsolve>eval ($db.GLU_ARG = 0.8905) 
 CNSsolve>eval ($db.GLU_ASN = 0.7946) 
 CNSsolve>eval ($db.GLU_ASP = 0.7946) 
 CNSsolve>eval ($db.GLU_CYS = 0.2329) 
 CNSsolve>eval ($db.GLU_GLN = 0.7946) 
 CNSsolve>eval ($db.GLU_GLU = 0.7946) 
 CNSsolve>eval ($db.GLU_GLY = 0.5069) 
 CNSsolve>eval ($db.GLU_HIS = 0.7672) 
 CNSsolve>eval ($db.GLU_ILE = 0.0411) 
 CNSsolve>eval ($db.GLU_LEU = 0.1096) 
 CNSsolve>eval ($db.GLU_LYS = 0.8357) 
 CNSsolve>eval ($db.GLU_MET = 0.2877) 
 CNSsolve>eval ($db.GLU_PHE = 0.2055) 
 CNSsolve>eval ($db.GLU_PRO = 0.6165) 
 CNSsolve>eval ($db.GLU_SER = 0.548) 
 CNSsolve>eval ($db.GLU_THR = 0.5343) 
 CNSsolve>eval ($db.GLU_TRP = 0.548) 
 CNSsolve>eval ($db.GLU_TYR = 0.5891) 
 CNSsolve>eval ($db.GLU_VAL = 0.0685) 
 CNSsolve>eval ($db.GLU_NEP = 0.5069) 
 CNSsolve>eval ($db.GLY_ALA = 0.1918) 
 CNSsolve>eval ($db.GLY_ARG = 0.5617) 
 CNSsolve>eval ($db.GLY_ASN = 0.5069) 
 CNSsolve>eval ($db.GLY_ASP = 0.5069) 
 CNSsolve>eval ($db.GLY_CYS = 0.1507) 
 CNSsolve>eval ($db.GLY_GLN = 0.5069) 
 CNSsolve>eval ($db.GLY_GLU = 0.5069) 
 CNSsolve>eval ($db.GLY_GLY = 0.3151) 
 CNSsolve>eval ($db.GLY_HIS = 0.4932) 
 CNSsolve>eval ($db.GLY_ILE = 0.0274) 
 CNSsolve>eval ($db.GLY_LEU = 0.0685) 
 CNSsolve>eval ($db.GLY_LYS = 0.5343) 
 CNSsolve>eval ($db.GLY_MET = 0.1781) 
 CNSsolve>eval ($db.GLY_PHE = 0.137) 
 CNSsolve>eval ($db.GLY_PRO = 0.3973) 
 CNSsolve>eval ($db.GLY_SER = 0.3425) 
 CNSsolve>eval ($db.GLY_THR = 0.3425) 
 CNSsolve>eval ($db.GLY_TRP = 0.3562) 
 CNSsolve>eval ($db.GLY_TYR = 0.3699) 
 CNSsolve>eval ($db.GLY_VAL = 0.0411) 
 CNSsolve>eval ($db.GLY_NEP = 0.3288) 
 CNSsolve>eval ($db.HIS_ALA = 0.2877) 
 CNSsolve>eval ($db.HIS_ARG = 0.8631) 
 CNSsolve>eval ($db.HIS_ASN = 0.7672) 
 CNSsolve>eval ($db.HIS_ASP = 0.7672) 
 CNSsolve>eval ($db.HIS_CYS = 0.2192) 
 CNSsolve>eval ($db.HIS_GLN = 0.7672) 
 CNSsolve>eval ($db.HIS_GLU = 0.7672) 
 CNSsolve>eval ($db.HIS_GLY = 0.4932) 
 CNSsolve>eval ($db.HIS_HIS = 0.7398) 
 CNSsolve>eval ($db.HIS_ILE = 0.0411) 
 CNSsolve>eval ($db.HIS_LEU = 0.1096) 
 CNSsolve>eval ($db.HIS_LYS = 0.8083) 
 CNSsolve>eval ($db.HIS_MET = 0.274) 
 CNSsolve>eval ($db.HIS_PHE = 0.2055) 
 CNSsolve>eval ($db.HIS_PRO = 0.6028) 
 CNSsolve>eval ($db.HIS_SER = 0.5206) 
 CNSsolve>eval ($db.HIS_THR = 0.5206) 
 CNSsolve>eval ($db.HIS_TRP = 0.5343) 
 CNSsolve>eval ($db.HIS_TYR = 0.5754) 
 CNSsolve>eval ($db.HIS_VAL = 0.0685) 
 CNSsolve>eval ($db.HIS_NEP = 0.4932) 
 CNSsolve>eval ($db.ILE_ALA = 0.0137) 
 CNSsolve>eval ($db.ILE_ARG = 0.0548) 
 CNSsolve>eval ($db.ILE_ASN = 0.0411) 
 CNSsolve>eval ($db.ILE_ASP = 0.0411) 
 CNSsolve>eval ($db.ILE_CYS = 0.0137) 
 CNSsolve>eval ($db.ILE_GLN = 0.0411) 
 CNSsolve>eval ($db.ILE_GLU = 0.0411) 
 CNSsolve>eval ($db.ILE_GLY = 0.0274) 
 CNSsolve>eval ($db.ILE_HIS = 0.0411) 
 CNSsolve>eval ($db.ILE_ILE = 0) 
 CNSsolve>eval ($db.ILE_LEU = 0) 
 CNSsolve>eval ($db.ILE_LYS = 0.0548) 
 CNSsolve>eval ($db.ILE_MET = 0.0137) 
 CNSsolve>eval ($db.ILE_PHE = 0.0137) 
 CNSsolve>eval ($db.ILE_PRO = 0.0411) 
 CNSsolve>eval ($db.ILE_SER = 0.0274) 
 CNSsolve>eval ($db.ILE_THR = 0.0274) 
 CNSsolve>eval ($db.ILE_TRP = 0.0274) 
 CNSsolve>eval ($db.ILE_TYR = 0.0411) 
 CNSsolve>eval ($db.ILE_VAL = 0) 
 CNSsolve>eval ($db.ILE_NEP = 0.0274) 
 CNSsolve>eval ($db.LEU_ALA = 0.0411) 
 CNSsolve>eval ($db.LEU_ARG = 0.1233) 
 CNSsolve>eval ($db.LEU_ASN = 0.1096) 
 CNSsolve>eval ($db.LEU_ASP = 0.1096) 
 CNSsolve>eval ($db.LEU_CYS = 0.0274) 
 CNSsolve>eval ($db.LEU_GLN = 0.1096) 
 CNSsolve>eval ($db.LEU_GLU = 0.1096) 
 CNSsolve>eval ($db.LEU_GLY = 0.0685) 
 CNSsolve>eval ($db.LEU_HIS = 0.1096) 
 CNSsolve>eval ($db.LEU_ILE = 0) 
 CNSsolve>eval ($db.LEU_LEU = 0.0137) 
 CNSsolve>eval ($db.LEU_LYS = 0.1233) 
 CNSsolve>eval ($db.LEU_MET = 0.0411) 
 CNSsolve>eval ($db.LEU_PHE = 0.0274) 
 CNSsolve>eval ($db.LEU_PRO = 0.0822) 
 CNSsolve>eval ($db.LEU_SER = 0.0822) 
 CNSsolve>eval ($db.LEU_THR = 0.0822) 
 CNSsolve>eval ($db.LEU_TRP = 0.0822) 
 CNSsolve>eval ($db.LEU_TYR = 0.0822) 
 CNSsolve>eval ($db.LEU_VAL = 0.0137) 
 CNSsolve>eval ($db.LEU_NEP = 0.0685) 
 CNSsolve>eval ($db.LYS_ALA = 0.3151) 
 CNSsolve>eval ($db.LYS_ARG = 0.9316) 
 CNSsolve>eval ($db.LYS_ASN = 0.8357) 
 CNSsolve>eval ($db.LYS_ASP = 0.8357) 
 CNSsolve>eval ($db.LYS_CYS = 0.2466) 
 CNSsolve>eval ($db.LYS_GLN = 0.8357) 
 CNSsolve>eval ($db.LYS_GLU = 0.8357) 
 CNSsolve>eval ($db.LYS_GLY = 0.5343) 
 CNSsolve>eval ($db.LYS_HIS = 0.8083) 
 CNSsolve>eval ($db.LYS_ILE = 0.0548) 
 CNSsolve>eval ($db.LYS_LEU = 0.1233) 
 CNSsolve>eval ($db.LYS_LYS = 0.8768) 
 CNSsolve>eval ($db.LYS_MET = 0.3014) 
 CNSsolve>eval ($db.LYS_PHE = 0.2192) 
 CNSsolve>eval ($db.LYS_PRO = 0.6439) 
 CNSsolve>eval ($db.LYS_SER = 0.5754) 
 CNSsolve>eval ($db.LYS_THR = 0.5617) 
 CNSsolve>eval ($db.LYS_TRP = 0.5754) 
 CNSsolve>eval ($db.LYS_TYR = 0.6165) 
 CNSsolve>eval ($db.LYS_VAL = 0.0822) 
 CNSsolve>eval ($db.LYS_NEP = 0.5343) 
 CNSsolve>eval ($db.MET_ALA = 0.1096) 
 CNSsolve>eval ($db.MET_ARG = 0.3288) 
 CNSsolve>eval ($db.MET_ASN = 0.2877) 
 CNSsolve>eval ($db.MET_ASP = 0.2877) 
 CNSsolve>eval ($db.MET_CYS = 0.0822) 
 CNSsolve>eval ($db.MET_GLN = 0.2877) 
 CNSsolve>eval ($db.MET_GLU = 0.2877) 
 CNSsolve>eval ($db.MET_GLY = 0.1781) 
 CNSsolve>eval ($db.MET_HIS = 0.274) 
 CNSsolve>eval ($db.MET_ILE = 0.0137) 
 CNSsolve>eval ($db.MET_LEU = 0.0411) 
 CNSsolve>eval ($db.MET_LYS = 0.3014) 
 CNSsolve>eval ($db.MET_MET = 0.1096) 
 CNSsolve>eval ($db.MET_PHE = 0.0685) 
 CNSsolve>eval ($db.MET_PRO = 0.2192) 
 CNSsolve>eval ($db.MET_SER = 0.1918) 
 CNSsolve>eval ($db.MET_THR = 0.1918) 
 CNSsolve>eval ($db.MET_TRP = 0.2055) 
 CNSsolve>eval ($db.MET_TYR = 0.2192) 
 CNSsolve>eval ($db.MET_VAL = 0.0274) 
 CNSsolve>eval ($db.MET_NEP = 0.1918) 
 CNSsolve>eval ($db.PHE_ALA = 0.0822) 
 CNSsolve>eval ($db.PHE_ARG = 0.2329) 
 CNSsolve>eval ($db.PHE_ASN = 0.2055) 
 CNSsolve>eval ($db.PHE_ASP = 0.2055) 
 CNSsolve>eval ($db.PHE_CYS = 0.0548) 
 CNSsolve>eval ($db.PHE_GLN = 0.2055) 
 CNSsolve>eval ($db.PHE_GLU = 0.2055) 
 CNSsolve>eval ($db.PHE_GLY = 0.137) 
 CNSsolve>eval ($db.PHE_HIS = 0.2055) 
 CNSsolve>eval ($db.PHE_ILE = 0.0137) 
 CNSsolve>eval ($db.PHE_LEU = 0.0274) 
 CNSsolve>eval ($db.PHE_LYS = 0.2192) 
 CNSsolve>eval ($db.PHE_MET = 0.0685) 
 CNSsolve>eval ($db.PHE_PHE = 0.0548) 
 CNSsolve>eval ($db.PHE_PRO = 0.1644) 
 CNSsolve>eval ($db.PHE_SER = 0.137) 
 CNSsolve>eval ($db.PHE_THR = 0.137) 
 CNSsolve>eval ($db.PHE_TRP = 0.137) 
 CNSsolve>eval ($db.PHE_TYR = 0.1507) 
 CNSsolve>eval ($db.PHE_VAL = 0.0137) 
 CNSsolve>eval ($db.PHE_NEP = 0.137) 
 CNSsolve>eval ($db.PRO_ALA = 0.2329) 
 CNSsolve>eval ($db.PRO_ARG = 0.685) 
 CNSsolve>eval ($db.PRO_ASN = 0.6165) 
 CNSsolve>eval ($db.PRO_ASP = 0.6165) 
 CNSsolve>eval ($db.PRO_CYS = 0.1781) 
 CNSsolve>eval ($db.PRO_GLN = 0.6165) 
 CNSsolve>eval ($db.PRO_GLU = 0.6165) 
 CNSsolve>eval ($db.PRO_GLY = 0.3973) 
 CNSsolve>eval ($db.PRO_HIS = 0.6028) 
 CNSsolve>eval ($db.PRO_ILE = 0.0411) 
 CNSsolve>eval ($db.PRO_LEU = 0.0822) 
 CNSsolve>eval ($db.PRO_LYS = 0.6439) 
 CNSsolve>eval ($db.PRO_MET = 0.2192) 
 CNSsolve>eval ($db.PRO_PHE = 0.1644) 
 CNSsolve>eval ($db.PRO_PRO = 0.4795) 
 CNSsolve>eval ($db.PRO_SER = 0.4247) 
 CNSsolve>eval ($db.PRO_THR = 0.411) 
 CNSsolve>eval ($db.PRO_TRP = 0.4247) 
 CNSsolve>eval ($db.PRO_TYR = 0.4521) 
 CNSsolve>eval ($db.PRO_VAL = 0.0548) 
 CNSsolve>eval ($db.PRO_NEP = 0.3973) 
 CNSsolve>eval ($db.SER_ALA = 0.2055) 
 CNSsolve>eval ($db.SER_ARG = 0.6028) 
 CNSsolve>eval ($db.SER_ASN = 0.548) 
 CNSsolve>eval ($db.SER_ASP = 0.548) 
 CNSsolve>eval ($db.SER_CYS = 0.1644) 
 CNSsolve>eval ($db.SER_GLN = 0.548) 
 CNSsolve>eval ($db.SER_GLU = 0.548) 
 CNSsolve>eval ($db.SER_GLY = 0.3425) 
 CNSsolve>eval ($db.SER_HIS = 0.5206) 
 CNSsolve>eval ($db.SER_ILE = 0.0274) 
 CNSsolve>eval ($db.SER_LEU = 0.0822) 
 CNSsolve>eval ($db.SER_LYS = 0.5754) 
 CNSsolve>eval ($db.SER_MET = 0.1918) 
 CNSsolve>eval ($db.SER_PHE = 0.137) 
 CNSsolve>eval ($db.SER_PRO = 0.4247) 
 CNSsolve>eval ($db.SER_SER = 0.3699) 
 CNSsolve>eval ($db.SER_THR = 0.3699) 
 CNSsolve>eval ($db.SER_TRP = 0.3836) 
 CNSsolve>eval ($db.SER_TYR = 0.3973) 
 CNSsolve>eval ($db.SER_VAL = 0.0548) 
 CNSsolve>eval ($db.SER_NEP = 0.3562) 
 CNSsolve>eval ($db.THR_ALA = 0.2055) 
 CNSsolve>eval ($db.THR_ARG = 0.6028) 
 CNSsolve>eval ($db.THR_ASN = 0.5343) 
 CNSsolve>eval ($db.THR_ASP = 0.5343) 
 CNSsolve>eval ($db.THR_CYS = 0.1507) 
 CNSsolve>eval ($db.THR_GLN = 0.5343) 
 CNSsolve>eval ($db.THR_GLU = 0.5343) 
 CNSsolve>eval ($db.THR_GLY = 0.3425) 
 CNSsolve>eval ($db.THR_HIS = 0.5206) 
 CNSsolve>eval ($db.THR_ILE = 0.0274) 
 CNSsolve>eval ($db.THR_LEU = 0.0822) 
 CNSsolve>eval ($db.THR_LYS = 0.5617) 
 CNSsolve>eval ($db.THR_MET = 0.1918) 
 CNSsolve>eval ($db.THR_PHE = 0.137) 
 CNSsolve>eval ($db.THR_PRO = 0.411) 
 CNSsolve>eval ($db.THR_SER = 0.3699) 
 CNSsolve>eval ($db.THR_THR = 0.3562) 
 CNSsolve>eval ($db.THR_TRP = 0.3699) 
 CNSsolve>eval ($db.THR_TYR = 0.3973) 
 CNSsolve>eval ($db.THR_VAL = 0.0548) 
 CNSsolve>eval ($db.THR_NEP = 0.3425) 
 CNSsolve>eval ($db.TRP_ALA = 0.2055) 
 CNSsolve>eval ($db.TRP_ARG = 0.6165) 
 CNSsolve>eval ($db.TRP_ASN = 0.548) 
 CNSsolve>eval ($db.TRP_ASP = 0.548) 
 CNSsolve>eval ($db.TRP_CYS = 0.1644) 
 CNSsolve>eval ($db.TRP_GLN = 0.548) 
 CNSsolve>eval ($db.TRP_GLU = 0.548) 
 CNSsolve>eval ($db.TRP_GLY = 0.3562) 
 CNSsolve>eval ($db.TRP_HIS = 0.5343) 
 CNSsolve>eval ($db.TRP_ILE = 0.0274) 
 CNSsolve>eval ($db.TRP_LEU = 0.0822) 
 CNSsolve>eval ($db.TRP_LYS = 0.5754) 
 CNSsolve>eval ($db.TRP_MET = 0.2055) 
 CNSsolve>eval ($db.TRP_PHE = 0.137) 
 CNSsolve>eval ($db.TRP_PRO = 0.4247) 
 CNSsolve>eval ($db.TRP_SER = 0.3836) 
 CNSsolve>eval ($db.TRP_THR = 0.3699) 
 CNSsolve>eval ($db.TRP_TRP = 0.3836) 
 CNSsolve>eval ($db.TRP_TYR = 0.411) 
 CNSsolve>eval ($db.TRP_VAL = 0.0548) 
 CNSsolve>eval ($db.TRP_NEP = 0.3562) 
 CNSsolve>eval ($db.TYR_ALA = 0.2192) 
 CNSsolve>eval ($db.TYR_ARG = 0.6576) 
 CNSsolve>eval ($db.TYR_ASN = 0.5891) 
 CNSsolve>eval ($db.TYR_ASP = 0.5891) 
 CNSsolve>eval ($db.TYR_CYS = 0.1781) 
 CNSsolve>eval ($db.TYR_GLN = 0.5891) 
 CNSsolve>eval ($db.TYR_GLU = 0.5891) 
 CNSsolve>eval ($db.TYR_GLY = 0.3699) 
 CNSsolve>eval ($db.TYR_HIS = 0.5754) 
 CNSsolve>eval ($db.TYR_ILE = 0.0411) 
 CNSsolve>eval ($db.TYR_LEU = 0.0822) 
 CNSsolve>eval ($db.TYR_LYS = 0.6165) 
 CNSsolve>eval ($db.TYR_MET = 0.2192) 
 CNSsolve>eval ($db.TYR_PHE = 0.1507) 
 CNSsolve>eval ($db.TYR_PRO = 0.4521) 
 CNSsolve>eval ($db.TYR_SER = 0.3973) 
 CNSsolve>eval ($db.TYR_THR = 0.3973) 
 CNSsolve>eval ($db.TYR_TRP = 0.411) 
 CNSsolve>eval ($db.TYR_TYR = 0.4384) 
 CNSsolve>eval ($db.TYR_VAL = 0.0548) 
 CNSsolve>eval ($db.TYR_NEP = 0.3836) 
 CNSsolve>eval ($db.VAL_ALA = 0.0274) 
 CNSsolve>eval ($db.VAL_ARG = 0.0822) 
 CNSsolve>eval ($db.VAL_ASN = 0.0685) 
 CNSsolve>eval ($db.VAL_ASP = 0.0685) 
 CNSsolve>eval ($db.VAL_CYS = 0.0274) 
 CNSsolve>eval ($db.VAL_GLN = 0.0685) 
 CNSsolve>eval ($db.VAL_GLU = 0.0685) 
 CNSsolve>eval ($db.VAL_GLY = 0.0411) 
 CNSsolve>eval ($db.VAL_HIS = 0.0685) 
 CNSsolve>eval ($db.VAL_ILE = 0) 
 CNSsolve>eval ($db.VAL_LEU = 0.0137) 
 CNSsolve>eval ($db.VAL_LYS = 0.0822) 
 CNSsolve>eval ($db.VAL_MET = 0.0274) 
 CNSsolve>eval ($db.VAL_PHE = 0.0137) 
 CNSsolve>eval ($db.VAL_PRO = 0.0548) 
 CNSsolve>eval ($db.VAL_SER = 0.0548) 
 CNSsolve>eval ($db.VAL_THR = 0.0548) 
 CNSsolve>eval ($db.VAL_TRP = 0.0548) 
 CNSsolve>eval ($db.VAL_TYR = 0.0548) 
 CNSsolve>eval ($db.VAL_VAL = 0.0137) 
 CNSsolve>eval ($db.VAL_NEP = 0.0411) 
 CNSsolve>eval ($db.NEP_ALA = 0.1918) 
 CNSsolve>eval ($db.NEP_ARG = 0.5754) 
 CNSsolve>eval ($db.NEP_ASN = 0.5069) 
 CNSsolve>eval ($db.NEP_ASP = 0.5069) 
 CNSsolve>eval ($db.NEP_CYS = 0.1507) 
 CNSsolve>eval ($db.NEP_GLN = 0.5069) 
 CNSsolve>eval ($db.NEP_GLU = 0.5069) 
 CNSsolve>eval ($db.NEP_GLY = 0.3288) 
 CNSsolve>eval ($db.NEP_HIS = 0.4932) 
 CNSsolve>eval ($db.NEP_ILE = 0.0274) 
 CNSsolve>eval ($db.NEP_LEU = 0.0685) 
 CNSsolve>eval ($db.NEP_LYS = 0.5343) 
 CNSsolve>eval ($db.NEP_MET = 0.1918) 
 CNSsolve>eval ($db.NEP_PHE = 0.137) 
 CNSsolve>eval ($db.NEP_PRO = 0.3973) 
 CNSsolve>eval ($db.NEP_SER = 0.3562) 
 CNSsolve>eval ($db.NEP_THR = 0.3425) 
 CNSsolve>eval ($db.NEP_TRP = 0.3562) 
 CNSsolve>eval ($db.NEP_TYR = 0.3836) 
 CNSsolve>eval ($db.NEP_VAL = 0.0411) 
 CNSsolve>eval ($db.NEP_NEP = 0.3288) 
 CNSsolve>eval ($db.ALA_ADE = 0.00 ) 
 CNSsolve>eval ($db.ALA_CYT = 0.00 ) 
 CNSsolve>eval ($db.ALA_GUA = 0.00 ) 
 CNSsolve>eval ($db.ALA_THY = 0.00 ) 
 CNSsolve>eval ($db.ARG_ADE = 0.14 ) 
 CNSsolve>eval ($db.ARG_CYT = 0.07 ) 
 CNSsolve>eval ($db.ARG_GUA = 0.14 ) 
 CNSsolve>eval ($db.ARG_THY = 0.08 ) 
 CNSsolve>eval ($db.ASN_ADE = 0.19 ) 
 CNSsolve>eval ($db.ASN_CYT = 0.09 ) 
 CNSsolve>eval ($db.ASN_GUA = 0.22 ) 
 CNSsolve>eval ($db.ASN_THY = 0.10 ) 
 CNSsolve>eval ($db.ASP_ADE = 0.44 ) 
 CNSsolve>eval ($db.ASP_CYT = 0.16 ) 
 CNSsolve>eval ($db.ASP_GUA = 0.10 ) 
 CNSsolve>eval ($db.ASP_THY = 0.05 ) 
 CNSsolve>eval ($db.CYS_ADE = 0.00 ) 
 CNSsolve>eval ($db.CYS_CYT = 0.00 ) 
 CNSsolve>eval ($db.CYS_GUA = 0.00 ) 
 CNSsolve>eval ($db.CYS_THY = 0.00 ) 
 CNSsolve>eval ($db.GLN_ADE = 0.15 ) 
 CNSsolve>eval ($db.GLN_CYT = 0.19 ) 
 CNSsolve>eval ($db.GLN_GUA = 0.15 ) 
 CNSsolve>eval ($db.GLN_THY = 0.13 ) 
 CNSsolve>eval ($db.GLU_ADE = 0.11 ) 
 CNSsolve>eval ($db.GLU_CYT = 0.15 ) 
 CNSsolve>eval ($db.GLU_GUA = 0.13 ) 
 CNSsolve>eval ($db.GLU_THY = 0.00 ) 
 CNSsolve>eval ($db.GLY_ADE = 0.00 ) 
 CNSsolve>eval ($db.GLY_CYT = 0.00 ) 
 CNSsolve>eval ($db.GLY_GUA = 0.00 ) 
 CNSsolve>eval ($db.GLY_THY = 0.00 ) 
 CNSsolve>eval ($db.HIS_ADE = 0.10 ) 
 CNSsolve>eval ($db.HIS_CYT = 0.14 ) 
 CNSsolve>eval ($db.HIS_GUA = 0.18 ) 
 CNSsolve>eval ($db.HIS_THY = 0.06 ) 
 CNSsolve>eval ($db.ILE_ADE = 0.00 ) 
 CNSsolve>eval ($db.ILE_CYT = 0.00 ) 
 CNSsolve>eval ($db.ILE_GUA = 0.00 ) 
 CNSsolve>eval ($db.ILE_THY = 0.00 ) 
 CNSsolve>eval ($db.LEU_ADE = 0.00 ) 
 CNSsolve>eval ($db.LEU_CYT = 0.00 ) 
 CNSsolve>eval ($db.LEU_GUA = 0.00 ) 
 CNSsolve>eval ($db.LEU_THY = 0.00 ) 
 CNSsolve>eval ($db.LYS_ADE = 0.31 ) 
 CNSsolve>eval ($db.LYS_CYT = 0.15 ) 
 CNSsolve>eval ($db.LYS_GUA = 0.29 ) 
 CNSsolve>eval ($db.LYS_THY = 0.18 ) 
 CNSsolve>eval ($db.MET_ADE = 0.00 ) 
 CNSsolve>eval ($db.MET_CYT = 0.00 ) 
 CNSsolve>eval ($db.MET_GUA = 0.00 ) 
 CNSsolve>eval ($db.MET_THY = 0.00 ) 
 CNSsolve>eval ($db.PHE_ADE = 0.00 ) 
 CNSsolve>eval ($db.PHE_CYT = 0.00 ) 
 CNSsolve>eval ($db.PHE_GUA = 0.00 ) 
 CNSsolve>eval ($db.PHE_THY = 0.00 ) 
 CNSsolve>eval ($db.PRO_ADE = 0.00 ) 
 CNSsolve>eval ($db.PRO_CYT = 0.00 ) 
 CNSsolve>eval ($db.PRO_GUA = 0.00 ) 
 CNSsolve>eval ($db.PRO_THY = 0.00 ) 
 CNSsolve>eval ($db.SER_ADE = 0.30 ) 
 CNSsolve>eval ($db.SER_CYT = 0.03 ) 
 CNSsolve>eval ($db.SER_GUA = 0.09 ) 
 CNSsolve>eval ($db.SER_THY = 0.03 ) 
 CNSsolve>eval ($db.THR_ADE = 0.16 ) 
 CNSsolve>eval ($db.THR_CYT = 0.16 ) 
 CNSsolve>eval ($db.THR_GUA = 0.03 ) 
 CNSsolve>eval ($db.THR_THY = 0.05 ) 
 CNSsolve>eval ($db.TRP_ADE = 0.00 ) 
 CNSsolve>eval ($db.TRP_CYT = 0.00 ) 
 CNSsolve>eval ($db.TRP_GUA = 0.00 ) 
 CNSsolve>eval ($db.TRP_THY = 0.00 ) 
 CNSsolve>eval ($db.TYR_ADE = 0.13 ) 
 CNSsolve>eval ($db.TYR_CYT = 0.10 ) 
 CNSsolve>eval ($db.TYR_GUA = 0.10 ) 
 CNSsolve>eval ($db.TYR_THY = 0.02 ) 
 CNSsolve>eval ($db.VAL_ADE = 0.00 ) 
 CNSsolve>eval ($db.VAL_CYT = 0.00 ) 
 CNSsolve>eval ($db.VAL_GUA = 0.00 ) 
 CNSsolve>eval ($db.VAL_THY = 0.00 ) 
 CNSsolve>eval ($db.ADE_ALA = 0.00 ) 
 CNSsolve>eval ($db.CYT_ALA = 0.00 ) 
 CNSsolve>eval ($db.GUA_ALA = 0.00 ) 
 CNSsolve>eval ($db.THY_ALA = 0.00 ) 
 CNSsolve>eval ($db.ADE_ARG = 0.14 ) 
 CNSsolve>eval ($db.CYT_ARG = 0.07 ) 
 CNSsolve>eval ($db.GUA_ARG = 0.14 ) 
 CNSsolve>eval ($db.THY_ARG = 0.08 ) 
 CNSsolve>eval ($db.ADE_ASN = 0.19 ) 
 CNSsolve>eval ($db.CYT_ASN = 0.09 ) 
 CNSsolve>eval ($db.GUA_ASN = 0.22 ) 
 CNSsolve>eval ($db.THY_ASN = 0.10 ) 
 CNSsolve>eval ($db.ADE_ASP = 0.44 ) 
 CNSsolve>eval ($db.CYT_ASP = 0.16 ) 
 CNSsolve>eval ($db.GUA_ASP = 0.10 ) 
 CNSsolve>eval ($db.THY_ASP = 0.05 ) 
 CNSsolve>eval ($db.ADE_CYS = 0.00 ) 
 CNSsolve>eval ($db.CYT_CYS = 0.00 ) 
 CNSsolve>eval ($db.GUA_CYS = 0.00 ) 
 CNSsolve>eval ($db.THY_CYS = 0.00 ) 
 CNSsolve>eval ($db.ADE_GLN = 0.15 ) 
 CNSsolve>eval ($db.CYT_GLN = 0.19 ) 
 CNSsolve>eval ($db.GUA_GLN = 0.15 ) 
 CNSsolve>eval ($db.THY_GLN = 0.13 ) 
 CNSsolve>eval ($db.ADE_GLU = 0.11 ) 
 CNSsolve>eval ($db.CYT_GLU = 0.15 ) 
 CNSsolve>eval ($db.GUA_GLU = 0.13 ) 
 CNSsolve>eval ($db.THY_GLU = 0.00 ) 
 CNSsolve>eval ($db.ADE_GLY = 0.00 ) 
 CNSsolve>eval ($db.CYT_GLY = 0.00 ) 
 CNSsolve>eval ($db.GUA_GLY = 0.00 ) 
 CNSsolve>eval ($db.THY_GLY = 0.00 ) 
 CNSsolve>eval ($db.ADE_HIS = 0.10 ) 
 CNSsolve>eval ($db.CYT_HIS = 0.14 ) 
 CNSsolve>eval ($db.GUA_HIS = 0.18 ) 
 CNSsolve>eval ($db.THY_HIS = 0.06 ) 
 CNSsolve>eval ($db.ADE_ILE = 0.00 ) 
 CNSsolve>eval ($db.CYT_ILE = 0.00 ) 
 CNSsolve>eval ($db.GUA_ILE = 0.00 ) 
 CNSsolve>eval ($db.THY_ILE = 0.00 ) 
 CNSsolve>eval ($db.ADE_LEU = 0.00 ) 
 CNSsolve>eval ($db.CYT_LEU = 0.00 ) 
 CNSsolve>eval ($db.GUA_LEU = 0.00 ) 
 CNSsolve>eval ($db.THY_LEU = 0.00 ) 
 CNSsolve>eval ($db.ADE_LYS = 0.31 ) 
 CNSsolve>eval ($db.CYT_LYS = 0.15 ) 
 CNSsolve>eval ($db.GUA_LYS = 0.29 ) 
 CNSsolve>eval ($db.THY_LYS = 0.18 ) 
 CNSsolve>eval ($db.ADE_MET = 0.00 ) 
 CNSsolve>eval ($db.CYT_MET = 0.00 ) 
 CNSsolve>eval ($db.GUA_MET = 0.00 ) 
 CNSsolve>eval ($db.THY_MET = 0.00 ) 
 CNSsolve>eval ($db.ADE_PHE = 0.00 ) 
 CNSsolve>eval ($db.CYT_PHE = 0.00 ) 
 CNSsolve>eval ($db.GUA_PHE = 0.00 ) 
 CNSsolve>eval ($db.THY_PHE = 0.00 ) 
 CNSsolve>eval ($db.ADE_PRO = 0.00 ) 
 CNSsolve>eval ($db.CYT_PRO = 0.00 ) 
 CNSsolve>eval ($db.GUA_PRO = 0.00 ) 
 CNSsolve>eval ($db.THY_PRO = 0.00 ) 
 CNSsolve>eval ($db.ADE_SER = 0.30 ) 
 CNSsolve>eval ($db.CYT_SER = 0.03 ) 
 CNSsolve>eval ($db.GUA_SER = 0.09 ) 
 CNSsolve>eval ($db.THY_SER = 0.03 ) 
 CNSsolve>eval ($db.ADE_THR = 0.16 ) 
 CNSsolve>eval ($db.CYT_THR = 0.16 ) 
 CNSsolve>eval ($db.GUA_THR = 0.03 ) 
 CNSsolve>eval ($db.THY_THR = 0.05 ) 
 CNSsolve>eval ($db.ADE_TRP = 0.00 ) 
 CNSsolve>eval ($db.CYT_TRP = 0.00 ) 
 CNSsolve>eval ($db.GUA_TRP = 0.00 ) 
 CNSsolve>eval ($db.THY_TRP = 0.00 ) 
 CNSsolve>eval ($db.ADE_TYR = 0.13 ) 
 CNSsolve>eval ($db.CYT_TYR = 0.10 ) 
 CNSsolve>eval ($db.GUA_TYR = 0.10 ) 
 CNSsolve>eval ($db.THY_TYR = 0.02 ) 
 CNSsolve>eval ($db.ADE_VAL = 0.00 ) 
 CNSsolve>eval ($db.CYT_VAL = 0.00 ) 
 CNSsolve>eval ($db.GUA_VAL = 0.00 ) 
 CNSsolve>eval ($db.THY_VAL = 0.00 ) 
 CNSsolve>eval ($db.DP_ALA_ADE = 0.51 ) 
 CNSsolve>eval ($db.DP_ALA_CYT = 0.51 ) 
 CNSsolve>eval ($db.DP_ALA_GUA = 0.51 ) 
 CNSsolve>eval ($db.DP_ALA_THY = 0.51 ) 
 CNSsolve>eval ($db.DP_ARG_ADE = 0.34 ) 
 CNSsolve>eval ($db.DP_ARG_CYT = 0.34 ) 
 CNSsolve>eval ($db.DP_ARG_GUA = 0.34 ) 
 CNSsolve>eval ($db.DP_ARG_THY = 0.34 ) 
 CNSsolve>eval ($db.DP_ASN_ADE = 0.52 ) 
 CNSsolve>eval ($db.DP_ASN_CYT = 0.52 ) 
 CNSsolve>eval ($db.DP_ASN_GUA = 0.52 ) 
 CNSsolve>eval ($db.DP_ASN_THY = 0.52 ) 
 CNSsolve>eval ($db.DP_ASP_ADE = 0.93 ) 
 CNSsolve>eval ($db.DP_ASP_CYT = 0.93 ) 
 CNSsolve>eval ($db.DP_ASP_GUA = 0.93 ) 
 CNSsolve>eval ($db.DP_ASP_THY = 0.93 ) 
 CNSsolve>eval ($db.DP_CYS_ADE = 0.43 ) 
 CNSsolve>eval ($db.DP_CYS_CYT = 0.43 ) 
 CNSsolve>eval ($db.DP_CYS_GUA = 0.43 ) 
 CNSsolve>eval ($db.DP_CYS_THY = 0.43 ) 
 CNSsolve>eval ($db.DP_GLN_ADE = 0.47 ) 
 CNSsolve>eval ($db.DP_GLN_CYT = 0.47 ) 
 CNSsolve>eval ($db.DP_GLN_GUA = 0.47 ) 
 CNSsolve>eval ($db.DP_GLN_THY = 0.47 ) 
 CNSsolve>eval ($db.DP_GLU_ADE = 0.83 ) 
 CNSsolve>eval ($db.DP_GLU_CYT = 0.83 ) 
 CNSsolve>eval ($db.DP_GLU_GUA = 0.83 ) 
 CNSsolve>eval ($db.DP_GLU_THY = 0.83 ) 
 CNSsolve>eval ($db.DP_GLY_ADE = 0.38 ) 
 CNSsolve>eval ($db.DP_GLY_CYT = 0.38 ) 
 CNSsolve>eval ($db.DP_GLY_GUA = 0.38 ) 
 CNSsolve>eval ($db.DP_GLY_THY = 0.38 ) 
 CNSsolve>eval ($db.DP_HIS_ADE = 0.40 ) 
 CNSsolve>eval ($db.DP_HIS_CYT = 0.40 ) 
 CNSsolve>eval ($db.DP_HIS_GUA = 0.40 ) 
 CNSsolve>eval ($db.DP_HIS_THY = 0.40 ) 
 CNSsolve>eval ($db.DP_ILE_ADE = 0.54 ) 
 CNSsolve>eval ($db.DP_ILE_CYT = 0.54 ) 
 CNSsolve>eval ($db.DP_ILE_GUA = 0.54 ) 
 CNSsolve>eval ($db.DP_ILE_THY = 0.54 ) 
 CNSsolve>eval ($db.DP_LEU_ADE = 0.38 ) 
 CNSsolve>eval ($db.DP_LEU_CYT = 0.38 ) 
 CNSsolve>eval ($db.DP_LEU_GUA = 0.38 ) 
 CNSsolve>eval ($db.DP_LEU_THY = 0.38 ) 
 CNSsolve>eval ($db.DP_LYS_ADE = 0.35 ) 
 CNSsolve>eval ($db.DP_LYS_CYT = 0.35 ) 
 CNSsolve>eval ($db.DP_LYS_GUA = 0.35 ) 
 CNSsolve>eval ($db.DP_LYS_THY = 0.35 ) 
 CNSsolve>eval ($db.DP_MET_ADE = 0.50 ) 
 CNSsolve>eval ($db.DP_MET_CYT = 0.50 ) 
 CNSsolve>eval ($db.DP_MET_GUA = 0.50 ) 
 CNSsolve>eval ($db.DP_MET_THY = 0.50 ) 
 CNSsolve>eval ($db.DP_PHE_ADE = 0.75 ) 
 CNSsolve>eval ($db.DP_PHE_CYT = 0.75 ) 
 CNSsolve>eval ($db.DP_PHE_GUA = 0.75 ) 
 CNSsolve>eval ($db.DP_PHE_THY = 0.75 ) 
 CNSsolve>eval ($db.DP_PRO_ADE = 1.00 ) 
 CNSsolve>eval ($db.DP_PRO_CYT = 1.00 ) 
 CNSsolve>eval ($db.DP_PRO_GUA = 1.00 ) 
 CNSsolve>eval ($db.DP_PRO_THY = 1.00 ) 
 CNSsolve>eval ($db.DP_SER_ADE = 0.38 ) 
 CNSsolve>eval ($db.DP_SER_CYT = 0.38 ) 
 CNSsolve>eval ($db.DP_SER_GUA = 0.38 ) 
 CNSsolve>eval ($db.DP_SER_THY = 0.38 ) 
 CNSsolve>eval ($db.DP_THR_ADE = 0.40 ) 
 CNSsolve>eval ($db.DP_THR_CYT = 0.40 ) 
 CNSsolve>eval ($db.DP_THR_GUA = 0.40 ) 
 CNSsolve>eval ($db.DP_THR_THY = 0.40 ) 
 CNSsolve>eval ($db.DP_TRP_ADE = 0.67 ) 
 CNSsolve>eval ($db.DP_TRP_CYT = 0.67 ) 
 CNSsolve>eval ($db.DP_TRP_GUA = 0.67 ) 
 CNSsolve>eval ($db.DP_TRP_THY = 0.67 ) 
 CNSsolve>eval ($db.DP_TYR_ADE = 0.43 ) 
 CNSsolve>eval ($db.DP_TYR_CYT = 0.43 ) 
 CNSsolve>eval ($db.DP_TYR_GUA = 0.43 ) 
 CNSsolve>eval ($db.DP_TYR_THY = 0.43 ) 
 CNSsolve>eval ($db.DP_VAL_ADE = 0.50 ) 
 CNSsolve>eval ($db.DP_VAL_CYT = 0.50 ) 
 CNSsolve>eval ($db.DP_VAL_GUA = 0.50 ) 
 CNSsolve>eval ($db.DP_VAL_THY = 0.50 ) 
 CNSsolve>eval ($db.DP_ADE_ALA = 0.51 ) 
 CNSsolve>eval ($db.DP_CYT_ALA = 0.51 ) 
 CNSsolve>eval ($db.DP_GUA_ALA = 0.51 ) 
 CNSsolve>eval ($db.DP_THY_ALA = 0.51 ) 
 CNSsolve>eval ($db.DP_ADE_ARG = 0.34 ) 
 CNSsolve>eval ($db.DP_CYT_ARG = 0.34 ) 
 CNSsolve>eval ($db.DP_GUA_ARG = 0.34 ) 
 CNSsolve>eval ($db.DP_THY_ARG = 0.34 ) 
 CNSsolve>eval ($db.DP_ADE_ASN = 0.52 ) 
 CNSsolve>eval ($db.DP_CYT_ASN = 0.52 ) 
 CNSsolve>eval ($db.DP_GUA_ASN = 0.52 ) 
 CNSsolve>eval ($db.DP_THY_ASN = 0.52 ) 
 CNSsolve>eval ($db.DP_ADE_ASP = 0.93 ) 
 CNSsolve>eval ($db.DP_CYT_ASP = 0.93 ) 
 CNSsolve>eval ($db.DP_GUA_ASP = 0.93 ) 
 CNSsolve>eval ($db.DP_THY_ASP = 0.93 ) 
 CNSsolve>eval ($db.DP_ADE_CYS = 0.43 ) 
 CNSsolve>eval ($db.DP_CYT_CYS = 0.43 ) 
 CNSsolve>eval ($db.DP_GUA_CYS = 0.43 ) 
 CNSsolve>eval ($db.DP_THY_CYS = 0.43 ) 
 CNSsolve>eval ($db.DP_ADE_GLN = 0.47 ) 
 CNSsolve>eval ($db.DP_CYT_GLN = 0.47 ) 
 CNSsolve>eval ($db.DP_GUA_GLN = 0.47 ) 
 CNSsolve>eval ($db.DP_THY_GLN = 0.47 ) 
 CNSsolve>eval ($db.DP_ADE_GLU = 0.83 ) 
 CNSsolve>eval ($db.DP_CYT_GLU = 0.83 ) 
 CNSsolve>eval ($db.DP_GUA_GLU = 0.83 ) 
 CNSsolve>eval ($db.DP_THY_GLU = 0.83 ) 
 CNSsolve>eval ($db.DP_ADE_GLY = 0.38 ) 
 CNSsolve>eval ($db.DP_CYT_GLY = 0.38 ) 
 CNSsolve>eval ($db.DP_GUA_GLY = 0.38 ) 
 CNSsolve>eval ($db.DP_THY_GLY = 0.38 ) 
 CNSsolve>eval ($db.DP_ADE_HIS = 0.40 ) 
 CNSsolve>eval ($db.DP_CYT_HIS = 0.40 ) 
 CNSsolve>eval ($db.DP_GUA_HIS = 0.40 ) 
 CNSsolve>eval ($db.DP_THY_HIS = 0.40 ) 
 CNSsolve>eval ($db.DP_ADE_ILE = 0.54 ) 
 CNSsolve>eval ($db.DP_CYT_ILE = 0.54 ) 
 CNSsolve>eval ($db.DP_GUA_ILE = 0.54 ) 
 CNSsolve>eval ($db.DP_THY_ILE = 0.54 ) 
 CNSsolve>eval ($db.DP_ADE_LEU = 0.38 ) 
 CNSsolve>eval ($db.DP_CYT_LEU = 0.38 ) 
 CNSsolve>eval ($db.DP_GUA_LEU = 0.38 ) 
 CNSsolve>eval ($db.DP_THY_LEU = 0.38 ) 
 CNSsolve>eval ($db.DP_ADE_LYS = 0.35 ) 
 CNSsolve>eval ($db.DP_CYT_LYS = 0.35 ) 
 CNSsolve>eval ($db.DP_GUA_LYS = 0.35 ) 
 CNSsolve>eval ($db.DP_THY_LYS = 0.35 ) 
 CNSsolve>eval ($db.DP_ADE_MET = 0.50 ) 
 CNSsolve>eval ($db.DP_CYT_MET = 0.50 ) 
 CNSsolve>eval ($db.DP_GUA_MET = 0.50 ) 
 CNSsolve>eval ($db.DP_THY_MET = 0.50 ) 
 CNSsolve>eval ($db.DP_ADE_PHE = 0.75 ) 
 CNSsolve>eval ($db.DP_CYT_PHE = 0.75 ) 
 CNSsolve>eval ($db.DP_GUA_PHE = 0.75 ) 
 CNSsolve>eval ($db.DP_THY_PHE = 0.75 ) 
 CNSsolve>eval ($db.DP_ADE_PRO = 1.00 ) 
 CNSsolve>eval ($db.DP_CYT_PRO = 1.00 ) 
 CNSsolve>eval ($db.DP_GUA_PRO = 1.00 ) 
 CNSsolve>eval ($db.DP_THY_PRO = 1.00 ) 
 CNSsolve>eval ($db.DP_ADE_SER = 0.38 ) 
 CNSsolve>eval ($db.DP_CYT_SER = 0.38 ) 
 CNSsolve>eval ($db.DP_GUA_SER = 0.38 ) 
 CNSsolve>eval ($db.DP_THY_SER = 0.38 ) 
 CNSsolve>eval ($db.DP_ADE_THR = 0.40 ) 
 CNSsolve>eval ($db.DP_CYT_THR = 0.40 ) 
 CNSsolve>eval ($db.DP_GUA_THR = 0.40 ) 
 CNSsolve>eval ($db.DP_THY_THR = 0.40 ) 
 CNSsolve>eval ($db.DP_ADE_TRP = 0.67 ) 
 CNSsolve>eval ($db.DP_CYT_TRP = 0.67 ) 
 CNSsolve>eval ($db.DP_GUA_TRP = 0.67 ) 
 CNSsolve>eval ($db.DP_THY_TRP = 0.67 ) 
 CNSsolve>eval ($db.DP_ADE_TYR = 0.43 ) 
 CNSsolve>eval ($db.DP_CYT_TYR = 0.43 ) 
 CNSsolve>eval ($db.DP_GUA_TYR = 0.43 ) 
 CNSsolve>eval ($db.DP_THY_TYR = 0.43 ) 
 CNSsolve>eval ($db.DP_ADE_VAL = 0.50 ) 
 CNSsolve>eval ($db.DP_CYT_VAL = 0.50 ) 
 CNSsolve>eval ($db.DP_GUA_VAL = 0.50 ) 
 CNSsolve>eval ($db.DP_THY_VAL = 0.50 ) 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>! First pass, all interactions except those with DNA/RNA Phosphate groups 
 CNSsolve>evaluate ($done = 0) 
 CNSsolve>evaluate ($counttrial = 0) 
 CNSsolve>evaluate ($maxcounttrial = 1000) 
 CNSsolve>while ($done = 0)  loop trial 
 CNSsolve>  eval($counttrial = $counttrial+1) 
 CNSsolve>  if ($counttrial > $maxcounttrial) then 
 CNSsolve>   eval($done = 1) 
 CNSsolve>  end if 
 CNSsolve>  evaluate ($iselres1 = 0) 
 CNSsolve>  evaluate ($iselres1 = int(ran() * $rmax) + 1) 
 CNSsolve> 
 CNSsolve>  eval($founda=0) 
 CNSsolve>  eval($foundb=0) 
 CNSsolve>  eval($closesta=1000) 
 CNSsolve>  eval($closestb=1000) 
 CNSsolve> 
 CNSsolve>  !find first closest residue of all chains 
 CNSsolve>  eval($nchain1 = 0) 
 CNSsolve>  eval($closechain = 0) 
 CNSsolve>  while ($nchain1 < $data.ncomponents) loop nloop1 
 CNSsolve>    eval($nchain1 = $nchain1 + 1) 
 CNSsolve>    for $atom_ida in id (segid $Toppar.prot_segid_$nchain1 and (not (name P or name O*P* or name "O3'" or name "O5'")) and (attr store4 = $iselres1) around $testcutoff) loop seg1loop 
 CNSsolve>      pick bond (attr store4 = $iselres1) (id $atom_ida) geometry 
 CNSsolve>      eval ($dist=$result) 
 CNSsolve>      if ($dist<$closesta) then 
 CNSsolve>        eval($founda=$founda+1) 
 CNSsolve>        eval($closesta=$dist) 
 CNSsolve>        show element (resn) (id $atom_ida) 
 CNSsolve>        eval($restypea=$result) 
 CNSsolve>        eval($closechain=$nchain1) 
 CNSsolve>      end if 
 CNSsolve>    end loop seg1loop 
 CNSsolve>  end loop nloop1 
 CNSsolve> 
 CNSsolve>  ! do not consider if close to a phosphate group 
 CNSsolve>  eval($nchain1 = 0) 
 CNSsolve>  while ($nchain1 < $data.ncomponents) loop nloop1 
 CNSsolve>    eval($nchain1 = $nchain1 + 1) 
 CNSsolve>    for $atom_ida in id (segid $Toppar.prot_segid_$nchain1 and (name P or name O*P* or name "O3'" or name "O5'") and (attr store4 = $iselres1) around $testcutoff) loop seg1loop 
 CNSsolve>      eval($founda=0) 
 CNSsolve>    end loop seg1loop 
 CNSsolve>  end loop nloop1 
 CNSsolve> 
 CNSsolve>  eval($nchain1 = 0) 
 CNSsolve>  !find second closest residue from all other chains than the closest residue selected above 
 CNSsolve>  while ($nchain1 < $data.ncomponents) loop nloop2 
 CNSsolve>    eval($nchain1 = $nchain1 + 1) 
 CNSsolve>    if ($nchain1 ne $closechain) then 
 CNSsolve>      for $atom_idb in id (segid $Toppar.prot_segid_$nchain1 and (not (name P or name O*P* or name "O3'" or name "O5'")) and (attr store4 = $iselres1) around $testcutoff) loop seg2loop 
 CNSsolve>        pick bond (attr store4 = $iselres1) (id $atom_idb) geometry 
 CNSsolve>        eval ($dist=$result) 
 CNSsolve>        if ($dist<$closestb) then 
 CNSsolve>          eval($foundb=$foundb+1) 
 CNSsolve>          eval($closestb=$dist) 
 CNSsolve>          show element (resn) (id $atom_idb) 
 CNSsolve>          eval($restypeb=$result) 
 CNSsolve>        end if 
 CNSsolve>      end loop seg2loop 
 CNSsolve>    end if 
 CNSsolve>  end loop nloop2 
 CNSsolve> 
 CNSsolve>  if ($founda > 0) then 
 CNSsolve>   if($foundb > 0) then 
 CNSsolve>    display SOLVATED-DOCKING: $iselres1 $closesta $restypea $closestb $restypeb $db.$restypea_$restypeb 
 CNSsolve>    eval ($r = random(1.0)) 
 CNSsolve>!    display SOLVATED-DOCKING: info: r-value $r 
 CNSsolve>    eval ($r = $r*$rmultfact) 
 CNSsolve>    if ($r > $db.$restypea_$restypeb) then 
 CNSsolve>!     display SOLVATED-DOCKING: $r bigger than $db.$restypea_$restypeb for $iselres1 with $restypea - $restypeb 
 CNSsolve>     !so this one is 'deleted' 
 CNSsolve>     do (store5=1) (attr store4 = $iselres1) 
 CNSsolve>    else 
 CNSsolve>!     display SOLVATED-DOCKING: $r smaller than $db.$restypea_$restypeb for $iselres1 with $restypea - $restypeb 
 CNSsolve>    end if 
 CNSsolve>   else 
 CNSsolve>!    display SOLVATED-DOCKING: nothing found for $iselres1 
 CNSsolve>    do (store5=1) (attr store4 = $iselres1) 
 CNSsolve>   end if 
 CNSsolve>  else 
 CNSsolve>!   display SOLVATED-DOCKING: nothing found for $iselres1 
 CNSsolve>   do (store5=1) (attr store4 = $iselres1) 
 CNSsolve>  end if 
 CNSsolve> 
 CNSsolve>  show sum(1) ((resn WAT or resn HOH) and name OH2 and (attr store5 ne 1)) 
 CNSsolve>  if ($watercount > 0) then 
 CNSsolve>    eval($fractionleft = $result/$watercount) 
 CNSsolve>  else 
 CNSsolve>   eval($fractionleft = 0.0) 
 CNSsolve>  end if 
 CNSsolve>  display SOLVATED-DOCKING: FRACTION LEFT $fractionleft 
 CNSsolve>  if ($fractionleft < $data.water_tokeep) then 
 CNSsolve>    evaluate ($done = 1) 
 CNSsolve>  end if 
 CNSsolve>end loop trial 
 CNSsolve> 
 CNSsolve> 
 CNSsolve>! Second pass, all interactions with DNA/RNA Phosphate groups 
 CNSsolve>evaluate ($done = 0) 
 CNSsolve>evaluate ($counttrial = 0) 
 CNSsolve>evaluate ($maxcounttrial = 1000) 
 CNSsolve>while ($done = 0)  loop ptrial 
 CNSsolve>  eval($counttrial = $counttrial+1) 
 CNSsolve>  if ($counttrial > $maxcounttrial) then 
 CNSsolve>   eval($done = 1) 
 CNSsolve>  end if 
 CNSsolve>  evaluate ($iselres1 = 0) 
 CNSsolve>  evaluate ($iselres1 = int(ran() * $rmax) + 1) 
 CNSsolve> 
 CNSsolve>  eval($founda=0) 
 CNSsolve>  eval($foundb=0) 
 CNSsolve>  eval($closesta=1000) 
 CNSsolve>  eval($closestb=1000) 
 CNSsolve> 
 CNSsolve>  !find first closest residue of all chains 
 CNSsolve>  eval($nchain1 = 0) 
 CNSsolve>  eval($closechain = 0) 
 CNSsolve>  while ($nchain1 < $data.ncomponents) loop nloop1 
 CNSsolve>    eval($nchain1 = $nchain1 + 1) 
 CNSsolve>    for $atom_ida in id (segid $Toppar.prot_segid_$nchain1 and (name P or name O*P* or name "O3'" or name "O5'") and (attr store4 = $iselres1) around $testcutoff) loop seg1loop 
 CNSsolve>      pick bond (attr store4 = $iselres1) (id $atom_ida) geometry 
 CNSsolve>      eval ($dist=$result) 
 CNSsolve>      if ($dist<$closesta) then 
 CNSsolve>        eval($founda=$founda+1) 
 CNSsolve>        eval($closesta=$dist) 
 CNSsolve>        show element (resn) (id $atom_ida) 
 CNSsolve>        eval($restypea=$result) 
 CNSsolve>        eval($closechain=$nchain1) 
 CNSsolve>      end if 
 CNSsolve>    end loop seg1loop 
 CNSsolve>  end loop nloop1 
 CNSsolve> 
 CNSsolve>  eval($nchain1 = 0) 
 CNSsolve>  !find second closest residue from all other chains than the closest residue selected above 
 CNSsolve>  while ($nchain1 < $data.ncomponents) loop nloop2 
 CNSsolve>    eval($nchain1 = $nchain1 + 1) 
 CNSsolve>    if ($nchain1 ne $closechain) then 
 CNSsolve>      for $atom_idb in id (segid $Toppar.prot_segid_$nchain1 and (attr store4 = $iselres1) around $testcutoff) loop seg2loop 
 CNSsolve>        pick bond (attr store4 = $iselres1) (id $atom_idb) geometry 
 CNSsolve>        eval ($dist=$result) 
 CNSsolve>        if ($dist<$closestb) then 
 CNSsolve>          eval($foundb=$foundb+1) 
 CNSsolve>          eval($closestb=$dist) 
 CNSsolve>          show element (resn) (id $atom_idb) 
 CNSsolve>          eval($restypeb=$result) 
 CNSsolve>        end if 
 CNSsolve>      end loop seg2loop 
 CNSsolve>    end if 
 CNSsolve>  end loop nloop2 
 CNSsolve> 
 CNSsolve>  if ($founda > 0) then 
 CNSsolve>   if($foundb > 0) then 
 CNSsolve>    display SOLVATED-DOCKING DNA PHOSPHATE: $iselres1 $closesta $restypea $closestb $restypeb $db.$restypea_$restypeb 
 CNSsolve>    eval ($r = random(1.0)) 
 CNSsolve>!    display SOLVATED-DOCKING: info: r-value $r 
 CNSsolve>    eval ($r = $r*$rmultfact) 
 CNSsolve>    if ($r > $db.DP_$restypea_$restypeb) then 
 CNSsolve>!     display SOLVATED-DOCKING: $r bigger than $db.DP_$restypea_$restypeb for $iselres1 with $restypea - $restypeb 
 CNSsolve>     !so this one is 'deleted' 
 CNSsolve>     do (store5=1) (attr store4 = $iselres1) 
 CNSsolve>    else 
 CNSsolve>!     display SOLVATED-DOCKING: $r smaller than $db.DP_$restypea_$restypeb for $iselres1 with $restypea - $restypeb 
 CNSsolve>    end if 
 CNSsolve>   else 
 CNSsolve>!    display SOLVATED-DOCKING: nothing found for $iselres1 
 CNSsolve>    do (store5=1) (attr store4 = $iselres1) 
 CNSsolve>   end if 
 CNSsolve>  else 
 CNSsolve>!   display SOLVATED-DOCKING: nothing found for $iselres1 
 CNSsolve>   do (store5=1) (attr store4 = $iselres1) 
 CNSsolve>  end if 
 CNSsolve> 
 CNSsolve>  show sum(1) ((resn WAT or resn HOH) and name OH2 and (attr store5 ne 1)) 
 CNSsolve>  if ($dnapwatercount > 0) then 
 CNSsolve>    eval($fractionleft = $result/$dnapwatercount) 
 CNSsolve>  else 
 CNSsolve>   eval($fractionleft = 0.0) 
 CNSsolve>  end if 
 CNSsolve>  display SOLVATED-DOCKING: FRACTION LEFT AROUND DNA PHOSPHATE $fractionleft 
 CNSsolve>  if ($fractionleft < $data.dnap_water_tokeep) then 
 CNSsolve>    evaluate ($done = 1) 
 CNSsolve>  end if 
 CNSsolve>end loop ptrial 
 CNSsolve> 
 CNSsolve> 
 CNSsolve> 
 CNSsolve>show sum(1) ((resn WAT or resn HOH) and name OH2 and (attr store5 ne 1)) 
 CNSsolve>if ($watercount > 0) then 
 CNSsolve>  eval($fractionleft = $result/$watercount) 
 CNSsolve>else 
 CNSsolve>  eval($fractionleft = 0.0) 
 CNSsolve>end if 
 CNSsolve>display SOLVATED-DOCKING: FINAL FRACTION LEFT BEFORE ENERGY FILTER $fractionleft ($result WATERS) 
 CNSsolve> 
 CNSsolve>for $wat_id in id ((resn WAT or resn HOH) and name OH2 and (attr store5 ne 1)) loop dbloop 
 CNSsolve> igroup interaction (not all) (not all) end 
 CNSsolve> igroup interaction (all) (byres(id $wat_id)) end 
 CNSsolve> energy end 
 CNSsolve> eval($waterenergy=$vdw + $elec) 
 CNSsolve> if ($waterenergy>$enercutoff) then 
 CNSsolve> !energy too high --> 'deleted' 
 CNSsolve>  do (store5=1) (id $wat_id) 
 CNSsolve>!  display SOLVATED-DOCKING: energy of id $wat_id is $waterenergy which is higher than cutoff $enercutoff 
 CNSsolve> else 
 CNSsolve>!  display SOLVATED-DOCKING: energy of id $wat_id is $waterenergy which is lower than cutoff $enercutoff 
 CNSsolve> end if 
 CNSsolve>end loop dbloop 
 CNSsolve> 
 CNSsolve>show sum(1) ((resn WAT or resn HOH) and name OH2 and (attr store5 ne 1)) 
 CNSsolve>if ($watercount > 0) then 
 CNSsolve>  eval($fractionleft = $result/$watercount) 
 CNSsolve>else 
 CNSsolve>  eval($fractionleft = 0.0) 
 CNSsolve>end if 
 CNSsolve>display SOLVATED-DOCKING: FINAL FRACTION LEFT AFTER ENERGY FILTER $fractionleft ($result WATERS) 
 CNSsolve> 
 CNSsolve> 
 CNSsolve>do (store5 = 1) (byres(attr store5 =1 )) 
 CNSsolve> 
 CNSsolve>!"removing" of water: interaction weight 0 
 CNSsolve>igroup interaction (not all) (not all) end 
 CNSsolve> 
 CNSsolve>igroup 
 CNSsolve>  eval($nchain1 = 0) 
 CNSsolve> 
 CNSsolve>while ($nchain1 < $data.ncomponents) loop nloop1 
 CNSsolve>    eval($nchain1 = $nchain1 + 1) 
 CNSsolve>    eval($nchain2 = $nchain1 ) 
 CNSsolve>    while ($nchain2 < $data.ncomponents) loop nloop2 
 CNSsolve>      eval($nchain2 = $nchain2 + 1) 
 CNSsolve>      interaction (segid $Toppar.prot_segid_$nchain1) 
 CNSsolve>                  (segid $Toppar.prot_segid_$nchain2) weight * 1.0 vdw $kinter elec $kinter end 
 CNSsolve>    end loop nloop2 
 CNSsolve>    interaction ((resn WAT or resn HOH or resn TIP*) and (attr store5 ne 1)) (segid $Toppar.prot_segid_$nchain1) weight * 1.0 end 
 CNSsolve>end loop nloop1 
 CNSsolve> 
 CNSsolve>  interaction ((resn WAT or resn HOH or resn TIP*) and (attr store5 ne 1)) 
 CNSsolve>	           ((resn WAT or resn HOH or resn TIP*) and (attr store5 ne 1)) weight * 1.0 end 
 CNSsolve>  interaction (attr store5 = 1) (all) weight * 0.0 end 
 CNSsolve>end 
 CNSsolve> 
 CNSsolve>         end if 
 CNSsolve>         inline @RUN:protocols/waterdock_mini.cns 
 ASSFIL: file waterdock_mini.cns opened.
 CNSsolve>! waterdock_mini.cns 
 CNSsolve>!    Minimize water molecules in solvated docking 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve>  minimize rigid 
 CNSsolve>   eval ($nchain1 = 0) 
 CNSsolve>   while ($nchain1 < $data.ncomponents) loop nloop1 
 CNSsolve>            eval($nchain1 = $nchain1 + 1) 
 CNSsolve>            group (segid $Toppar.prot_segid_$nchain1 and not (resn WAT or resn HOH or resn TIP*)) 
 CNSsolve>            translation=true 
 CNSsolve>   end loop nloop1 
 CNSsolve>   for $id in id ((resn WAT or resn HOH or resn TIP*) and name OH2 and (attr store5 ne 1)) loop miniwater 
 CNSsolve>    group (byres(id $id)) 
 CNSsolve>   end loop miniwater 
 CNSsolve>   translation=$data.transwater 
 CNSsolve>   nstep 100 
 CNSsolve>   nprint 10 
 CNSsolve>  end 
 CNSsolve>  energy end 
 CNSsolve> 
 CNSsolve>  !store5 is what is to be removed 
 CNSsolve>  !store4 is used to determine what is at interface 
 CNSsolve>  eval ($surfcutoff = $data.water_surfcutoff) 
 CNSsolve>  do (store4 = 0) (all) 
 CNSsolve> 
 CNSsolve>  eval($nchain1 = 0) 
 CNSsolve>  while ($nchain1 < $data.ncomponents) loop nloop1 
 CNSsolve>    eval($nchain1 = $nchain1 + 1) 
 CNSsolve>    do (store4 = store4 + 1) (name oh2 and ((segid $Toppar.prot_segid_$nchain1) around $surfcutoff)) 
 CNSsolve>  end loop nloop1 
 CNSsolve> 
 CNSsolve>  !an interfacial water should have at least store4=2 
 CNSsolve>  do (store4 = 0) (attribute store4 < 2) 
 CNSsolve>  do (store4 = 1) (attribute store4 > 0) 
 CNSsolve>  do (store5 = 1) ((attr store5 = 1) or (name oh2 and (not resn TIP*) and (attr store4 ne 1))) 
 CNSsolve>  do (store5 = 1) (byres (attr store5 = 1)) 
 CNSsolve>  do (store5 = 0) (resn TIP*) 
 CNSsolve> 
 CNSsolve>  !"removing" of water: interaction weight 0 
 CNSsolve>  igroup interaction (not all) (not all) end 
 CNSsolve> 
 CNSsolve>  igroup 
 CNSsolve>   eval($nchain1 = 0) 
 CNSsolve> 
 CNSsolve>   while ($nchain1 < $data.ncomponents) loop nloop1 
 CNSsolve>    eval($nchain1 = $nchain1 + 1) 
 CNSsolve>    eval($nchain2 = $nchain1 ) 
 CNSsolve>    while ($nchain2 < $data.ncomponents) loop nloop2 
 CNSsolve>      eval($nchain2 = $nchain2 + 1) 
 CNSsolve>      interaction (segid $Toppar.prot_segid_$nchain1) 
 CNSsolve>                  (segid $Toppar.prot_segid_$nchain2) weight * 1.0 vdw $kinter elec $kinter end 
 CNSsolve>    end loop nloop2 
 CNSsolve>    interaction ((resn WAT or resn HOH or resn TIP*) and (attr store5 ne 1)) (segid $Toppar.prot_segid_$nchain1) weight * 1.0 end 
 CNSsolve>   end loop nloop1 
 CNSsolve> 
 CNSsolve>   interaction ((resn WAT or resn HOH or resn TIP*) and (attr store5 ne 1)) 
 CNSsolve>	           ((resn WAT or resn HOH or resn TIP*) and (attr store5 ne 1)) weight * 1.0 end 
 CNSsolve>   interaction (attr store5 = 1) (all) weight * 0.0 end 
 CNSsolve>  end 
 CNSsolve> 
 CNSsolve>  if ($data.solvate_method eq "restraints") then 
 CNSsolve>   noe reset end 
 CNSsolve>   !read again the NOE data 
 CNSsolve>   @RUN:protocols/read_noes.cns(Iteration=$Iteration; Data=$Data; count=$count) 
 ASSFIL: file read_noes.cns opened.
 CNSsolve>! read_noes.cns 
 CNSsolve>!    Read distance restraints 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * Originally adapted from Aria 1.2 from Nilges and Linge, EMBL.       * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve> 
 CNSsolve>module(Iteration; Data; count;) 
 CNSsolve> 
 CNSsolve>!NOEs, hbonds 
 CNSsolve>noe 
 CNSsolve>  reset 
 CNSsolve>  nrestraints = 4000000     ! allocate space for NOEs 
 CNSsolve>  ceiling 1000 
 CNSsolve>end 
 CNSsolve> 
 CNSsolve>display reading NEWIT:unambig.tbl in iteration &iteration with option &data.unamb_firstit 
 CNSsolve> 
 CNSsolve> 
 CNSsolve>if (&data.amb_firstit le &iteration)   then 
 CNSsolve>     evaluate ($filenam0 = "NEWIT:ambig.tbl_" + encode($count)) 
 CNSsolve>     fileexist $filenam0 end 
 CNSsolve>     if ($result eq false) then 
 CNSsolve>       evaluate ($filenam0 = "NEWIT:ambig.tbl") 
 CNSsolve>     end if 
 CNSsolve>     noe class ambi @@$filenam0 end 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if (&data.unamb_firstit le &iteration) then 
 CNSsolve>     noe class dist @@NEWIT:unambig.tbl end 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if (&data.hbond_firstit le &iteration) then 
 CNSsolve>   if (&data.hbonds_on eq true) then 
 CNSsolve>      noe @@RUN:data/hbonds/hbonds.tbl end 
 CNSsolve>   end if 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>noe 
 CNSsolve>  averaging  * sum 
 CNSsolve>  potential  * soft 
 CNSsolve>  scale      * 1.0 
 CNSsolve>  sqconstant * 1.0 
 CNSsolve>  sqexponent * 2 
 CNSsolve>  soexponent * 1 
 CNSsolve>  rswitch    * 1.0 
 CNSsolve>  sqoffset   * 0.0 
 CNSsolve>  asymptote  * 2.0 
 CNSsolve>  msoexponent * 1 
 CNSsolve>  masymptote  * -0.1 
 CNSsolve>  mrswitch    * 1.0 
 CNSsolve>  avexpo hbond 20 
 CNSsolve>end 
 CNSsolve> 
 CNSsolve>if (&data.waterdock eq true) then 
 CNSsolve> if (&iteration eq 0) then 
 CNSsolve>  if (&data.solvate_method eq "restraints") then 
 CNSsolve>   evaluate ($nchain=0) 
 CNSsolve>   while ($nchain < &data.ncomponents) loop nloop1 
 CNSsolve>    evaluate ($nchain = $nchain + 1) 
 CNSsolve>    evaluate ($watersegname_$nchain="WAT" + encode($nchain)) 
 CNSsolve>    noe class amwa end 
 CNSsolve>    for $atom_id in id ((resn WAT or resn HOH or resn TIP*) and name OH2 and segid $watersegname_$nchain and not store5) loop waterrestraint 
 CNSsolve>   noe 
 CNSsolve>    assi (segid $toppar.prot_segid_$nchain and (resn arg or resn glu or resn lys or resn asp or resn tyr) and ((id $atom_id) around &data.water_restraint_cutoff)) 
 CNSsolve>        (id $atom_id) &data.water_restraint_cutoff &data.water_restraint_cutoff 0.0 
 CNSsolve>   end 
 CNSsolve>  end loop waterrestraint 
 CNSsolve>   end loop nloop1 
 CNSsolve>  end if 
 CNSsolve> end if 
 CNSsolve>end if 
 CNSsolve>  end if 
 CNSsolve>        end if 
 CNSsolve> 
 CNSsolve>        fix sele=(name OO and not resn XAN) end 
 CNSsolve>        minimize rigid 
 CNSsolve>          eval ($nchain1 = 0) 
 CNSsolve>          while ($nchain1 < $data.ncomponents) loop nloop1 
 CNSsolve>            eval($nchain1 = $nchain1 + 1) 
 CNSsolve>            group (segid $Toppar.prot_segid_$nchain1 and not (resn WAT or resn HOH or resn TIP*)) 
 CNSsolve>            translation=true 
 CNSsolve>          end loop nloop1 
 CNSsolve>          for $id in id ((resn WAT or resn HOH or resn TIP*) and name OH2 and (attr store5 ne 1)) loop miniwater 
 CNSsolve>            group (byres(id $id)) 
 CNSsolve>          end loop miniwater 
 CNSsolve>          translation=true 
 CNSsolve>          nstep $ministeps 
 CNSsolve>          nprint 10 
 CNSsolve>        end 
 CNSsolve>        energy end 
 CNSsolve> 
 CNSsolve>        if ($data.waterdock eq true) then 
 CNSsolve>          inline @RUN:protocols/waterdock_mini.cns 
 ASSFIL: file waterdock_mini.cns opened.
 CNSsolve>! waterdock_mini.cns 
 CNSsolve>!    Minimize water molecules in solvated docking 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve>  minimize rigid 
 CNSsolve>   eval ($nchain1 = 0) 
 CNSsolve>   while ($nchain1 < $data.ncomponents) loop nloop1 
 CNSsolve>            eval($nchain1 = $nchain1 + 1) 
 CNSsolve>            group (segid $Toppar.prot_segid_$nchain1 and not (resn WAT or resn HOH or resn TIP*)) 
 CNSsolve>            translation=true 
 CNSsolve>   end loop nloop1 
 CNSsolve>   for $id in id ((resn WAT or resn HOH or resn TIP*) and name OH2 and (attr store5 ne 1)) loop miniwater 
 CNSsolve>    group (byres(id $id)) 
 CNSsolve>   end loop miniwater 
 CNSsolve>   translation=$data.transwater 
 CNSsolve>   nstep 100 
 CNSsolve>   nprint 10 
 CNSsolve>  end 
 CNSsolve>  energy end 
 CNSsolve> 
 CNSsolve>  !store5 is what is to be removed 
 CNSsolve>  !store4 is used to determine what is at interface 
 CNSsolve>  eval ($surfcutoff = $data.water_surfcutoff) 
 CNSsolve>  do (store4 = 0) (all) 
 CNSsolve> 
 CNSsolve>  eval($nchain1 = 0) 
 CNSsolve>  while ($nchain1 < $data.ncomponents) loop nloop1 
 CNSsolve>    eval($nchain1 = $nchain1 + 1) 
 CNSsolve>    do (store4 = store4 + 1) (name oh2 and ((segid $Toppar.prot_segid_$nchain1) around $surfcutoff)) 
 CNSsolve>  end loop nloop1 
 CNSsolve> 
 CNSsolve>  !an interfacial water should have at least store4=2 
 CNSsolve>  do (store4 = 0) (attribute store4 < 2) 
 CNSsolve>  do (store4 = 1) (attribute store4 > 0) 
 CNSsolve>  do (store5 = 1) ((attr store5 = 1) or (name oh2 and (not resn TIP*) and (attr store4 ne 1))) 
 CNSsolve>  do (store5 = 1) (byres (attr store5 = 1)) 
 CNSsolve>  do (store5 = 0) (resn TIP*) 
 CNSsolve> 
 CNSsolve>  !"removing" of water: interaction weight 0 
 CNSsolve>  igroup interaction (not all) (not all) end 
 CNSsolve> 
 CNSsolve>  igroup 
 CNSsolve>   eval($nchain1 = 0) 
 CNSsolve> 
 CNSsolve>   while ($nchain1 < $data.ncomponents) loop nloop1 
 CNSsolve>    eval($nchain1 = $nchain1 + 1) 
 CNSsolve>    eval($nchain2 = $nchain1 ) 
 CNSsolve>    while ($nchain2 < $data.ncomponents) loop nloop2 
 CNSsolve>      eval($nchain2 = $nchain2 + 1) 
 CNSsolve>      interaction (segid $Toppar.prot_segid_$nchain1) 
 CNSsolve>                  (segid $Toppar.prot_segid_$nchain2) weight * 1.0 vdw $kinter elec $kinter end 
 CNSsolve>    end loop nloop2 
 CNSsolve>    interaction ((resn WAT or resn HOH or resn TIP*) and (attr store5 ne 1)) (segid $Toppar.prot_segid_$nchain1) weight * 1.0 end 
 CNSsolve>   end loop nloop1 
 CNSsolve> 
 CNSsolve>   interaction ((resn WAT or resn HOH or resn TIP*) and (attr store5 ne 1)) 
 CNSsolve>	           ((resn WAT or resn HOH or resn TIP*) and (attr store5 ne 1)) weight * 1.0 end 
 CNSsolve>   interaction (attr store5 = 1) (all) weight * 0.0 end 
 CNSsolve>  end 
 CNSsolve> 
 CNSsolve>  if ($data.solvate_method eq "restraints") then 
 CNSsolve>   noe reset end 
 CNSsolve>   !read again the NOE data 
 CNSsolve>   @RUN:protocols/read_noes.cns(Iteration=$Iteration; Data=$Data; count=$count) 
 ASSFIL: file read_noes.cns opened.
 CNSsolve>! read_noes.cns 
 CNSsolve>!    Read distance restraints 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * Originally adapted from Aria 1.2 from Nilges and Linge, EMBL.       * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve> 
 CNSsolve>module(Iteration; Data; count;) 
 CNSsolve> 
 CNSsolve>!NOEs, hbonds 
 CNSsolve>noe 
 CNSsolve>  reset 
 CNSsolve>  nrestraints = 4000000     ! allocate space for NOEs 
 CNSsolve>  ceiling 1000 
 CNSsolve>end 
 CNSsolve> 
 CNSsolve>display reading NEWIT:unambig.tbl in iteration &iteration with option &data.unamb_firstit 
 CNSsolve> 
 CNSsolve> 
 CNSsolve>if (&data.amb_firstit le &iteration)   then 
 CNSsolve>     evaluate ($filenam0 = "NEWIT:ambig.tbl_" + encode($count)) 
 CNSsolve>     fileexist $filenam0 end 
 CNSsolve>     if ($result eq false) then 
 CNSsolve>       evaluate ($filenam0 = "NEWIT:ambig.tbl") 
 CNSsolve>     end if 
 CNSsolve>     noe class ambi @@$filenam0 end 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if (&data.unamb_firstit le &iteration) then 
 CNSsolve>     noe class dist @@NEWIT:unambig.tbl end 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if (&data.hbond_firstit le &iteration) then 
 CNSsolve>   if (&data.hbonds_on eq true) then 
 CNSsolve>      noe @@RUN:data/hbonds/hbonds.tbl end 
 CNSsolve>   end if 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>noe 
 CNSsolve>  averaging  * sum 
 CNSsolve>  potential  * soft 
 CNSsolve>  scale      * 1.0 
 CNSsolve>  sqconstant * 1.0 
 CNSsolve>  sqexponent * 2 
 CNSsolve>  soexponent * 1 
 CNSsolve>  rswitch    * 1.0 
 CNSsolve>  sqoffset   * 0.0 
 CNSsolve>  asymptote  * 2.0 
 CNSsolve>  msoexponent * 1 
 CNSsolve>  masymptote  * -0.1 
 CNSsolve>  mrswitch    * 1.0 
 CNSsolve>  avexpo hbond 20 
 CNSsolve>end 
 CNSsolve> 
 CNSsolve>if (&data.waterdock eq true) then 
 CNSsolve> if (&iteration eq 0) then 
 CNSsolve>  if (&data.solvate_method eq "restraints") then 
 CNSsolve>   evaluate ($nchain=0) 
 CNSsolve>   while ($nchain < &data.ncomponents) loop nloop1 
 CNSsolve>    evaluate ($nchain = $nchain + 1) 
 CNSsolve>    evaluate ($watersegname_$nchain="WAT" + encode($nchain)) 
 CNSsolve>    noe class amwa end 
 CNSsolve>    for $atom_id in id ((resn WAT or resn HOH or resn TIP*) and name OH2 and segid $watersegname_$nchain and not store5) loop waterrestraint 
 CNSsolve>   noe 
 CNSsolve>    assi (segid $toppar.prot_segid_$nchain and (resn arg or resn glu or resn lys or resn asp or resn tyr) and ((id $atom_id) around &data.water_restraint_cutoff)) 
 CNSsolve>        (id $atom_id) &data.water_restraint_cutoff &data.water_restraint_cutoff 0.0 
 CNSsolve>   end 
 CNSsolve>  end loop waterrestraint 
 CNSsolve>   end loop nloop1 
 CNSsolve>  end if 
 CNSsolve> end if 
 CNSsolve>end if 
 CNSsolve>  end if 
 CNSsolve>        end if 
 CNSsolve> 
 CNSsolve>        fix sele=(not all) end 
 CNSsolve> 
 CNSsolve>        if ($anisotropy eq true) then 
 CNSsolve>          fix sele=(not all) end 
 CNSsolve>          fix sele=(name OO and not resn XAN) end 
 CNSsolve>          minimize rigid 
 CNSsolve>            for $id in id ((resn ANI or resn DAN or resn XAN) and name OO) loop miniani 
 CNSsolve>              group (byres(id $id)) 
 CNSsolve>              translation=false 
 CNSsolve>            end loop miniani 
 CNSsolve>            translation=false 
 CNSsolve>            nstep 100 
 CNSsolve>            drop 10.0 
 CNSsolve>            nprint 10 
 CNSsolve>          end 
 CNSsolve>          minimize rigid 
 CNSsolve>            eval ($nchain1 = 0) 
 CNSsolve>            while ($nchain1 < $data.ncomponents) loop nloop1 
 CNSsolve>              eval($nchain1 = $nchain1 + 1) 
 CNSsolve>              group (segid $Toppar.prot_segid_$nchain1 or segid $watersegname_$nchain1) 
 CNSsolve>              translation=true 
 CNSsolve>            end loop nloop1 
 CNSsolve>            for $id in id ((resn ANI or resn DAN or resn XAN) and name OO) loop miniani 
 CNSsolve>              group (byres(id $id)) 
 CNSsolve>              translation=false 
 CNSsolve>            end loop miniani 
 CNSsolve>            translation=true 
 CNSsolve>            nstep $ministeps 
 CNSsolve>            nprint 10 
 CNSsolve>          end 
 CNSsolve>        end if 
 CNSsolve> 
 CNSsolve>        fix sele=(not all) end 
 CNSsolve> 
 CNSsolve>      end if 
 CNSsolve> 
 CNSsolve>      inline @RUN:protocols/bestener.cns 
 ASSFIL: file bestener.cns opened.
 CNSsolve>! bestener.cns 
 CNSsolve>!   Store best score model from rigid-body dokcing (it0) 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve>    eval ($kinter = 1.0) 
 CNSsolve>    @RUN:protocols/scale_inter_mini.cns 
 ASSFIL: file scale_inter_mini.cns opened.
 CNSsolve>! scale_inter_mini.cns 
 CNSsolve>!    Scaling of intermolecular interations 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve>igroup interaction (not all) (not all) end 
 CNSsolve> 
 CNSsolve>igroup 
 CNSsolve> 
 CNSsolve>  eval($nchain1 = 0) 
 CNSsolve> 
 CNSsolve>  while ($nchain1 < $data.ncomponents) loop nloop1 
 CNSsolve>    eval($nchain1 = $nchain1 + 1) 
 CNSsolve>    eval($nchain2 = $nchain1 ) 
 CNSsolve>    while ($nchain2 < $data.ncomponents) loop nloop2 
 CNSsolve>      eval($nchain2 = $nchain2 + 1) 
 CNSsolve>      eval($scalfac = $kinter * $Toppar.int_$nchain1_$nchain2) 
 CNSsolve>      interaction (segid $Toppar.prot_segid_$nchain1 and not (resn ANI or resn DAN or resn XAN)) 
 CNSsolve>                  (segid $Toppar.prot_segid_$nchain2 and not (resn ANI or resn DAN or resn XAN)) weight * 1.0 vdw $scalfac elec $scalfac end 
 CNSsolve>    end loop nloop2 
 CNSsolve> 
 CNSsolve>  end loop nloop1 
 CNSsolve> 
 CNSsolve>  interaction (resn ANI) (resn ANI) weight * 1.0 vdw 0.0 elec 0.0 end 
 CNSsolve>  interaction (resn DAN) (resn DAN) weight * 1.0 vdw 0.0 elec 0.0 end 
 CNSsolve>  interaction (resn XAN) (resn XAN) weight * 1.0 vdw 0.0 elec 0.0 end 
 CNSsolve> 
 CNSsolve>end 
 CNSsolve> 
 CNSsolve>    evaluate ($unamb_scale = $Data.unamb_cool3) 
 CNSsolve>    evaluate ($ambig_scale = $Data.amb_cool3) 
 CNSsolve>    evaluate ($hbond_scale = $Data.hbond_cool3) 
 CNSsolve> 
 CNSsolve>    noe 
 CNSsolve>      scale dist $unamb_scale 
 CNSsolve>      scale ambi $ambig_scale 
 CNSsolve>      scale hbon $hbond_scale 
 CNSsolve>      scale symm 0.0 
 CNSsolve>    end 
 CNSsolve> 
 CNSsolve>    if ($Data.flags.vean eq true) then 
 CNSsolve>      vean class vea1 force $Data.fin_bor_cool3_1 $Data.fin_cen_cool3_1 end 
 CNSsolve>      vean class vea2 force $Data.fin_bor_cool3_2 $Data.fin_cen_cool3_2 end 
 CNSsolve>      vean class vea3 force $Data.fin_bor_cool3_3 $Data.fin_cen_cool3_3 end 
 CNSsolve>      vean class vea4 force $Data.fin_bor_cool3_4 $Data.fin_cen_cool3_4 end 
 CNSsolve>      vean class vea5 force $Data.fin_bor_cool3_5 $Data.fin_cen_cool3_5 end 
 CNSsolve>    end if 
 CNSsolve> 
 CNSsolve>    if ($Data.flags.sani eq true) then 
 CNSsolve>      sani class rdc1 force $Data.rdc1_hot end 
 CNSsolve>      sani class rdc2 force $Data.rdc2_hot end 
 CNSsolve>      sani class rdc3 force $Data.rdc3_hot end 
 CNSsolve>      sani class rdc4 force $Data.rdc4_hot end 
 CNSsolve>      sani class rdc5 force $Data.rdc5_hot end 
 CNSsolve>    end if 
 CNSsolve> 
 CNSsolve>    if ($Data.flags.xrdc eq true) then 
 CNSsolve>      xrdc class rdc1 force $Data.rdc1_hot end 
 CNSsolve>      xrdc class rdc2 force $Data.rdc2_hot end 
 CNSsolve>      xrdc class rdc3 force $Data.rdc3_hot end 
 CNSsolve>      xrdc class rdc4 force $Data.rdc4_hot end 
 CNSsolve>      xrdc class rdc5 force $Data.rdc5_hot end 
 CNSsolve>    end if 
 CNSsolve> 
 CNSsolve>    if ($Data.flags.xpcs eq true) then 
 CNSsolve>      xpcs class pcs1 force $Data.pcs1_hot end 
 CNSsolve>      xpcs class pcs2 force $Data.pcs2_hot end 
 CNSsolve>      xpcs class pcs3 force $Data.pcs3_hot end 
 CNSsolve>      xpcs class pcs4 force $Data.pcs4_hot end 
 CNSsolve>      xpcs class pcs5 force $Data.pcs5_hot end 
 CNSsolve>      xpcs class pcs6 force $Data.pcs6_hot end 
 CNSsolve>      xpcs class pcs7 force $Data.pcs7_hot end 
 CNSsolve>      xpcs class pcs8 force $Data.pcs8_hot end 
 CNSsolve>      xpcs class pcs9 force $Data.pcs9_hot end 
 CNSsolve>      xpcs class pcsA force $Data.pcsA_hot end 
 CNSsolve>    end if 
 CNSsolve> 
 CNSsolve>    if ($Data.flags.dani eq true) then 
 CNSsolve>      dani class dan1 force $Data.dan1_hot end 
 CNSsolve>      dani class dan2 force $Data.dan2_hot end 
 CNSsolve>      dani class dan3 force $Data.dan3_hot end 
 CNSsolve>      dani class dan4 force $Data.dan4_hot end 
 CNSsolve>      dani class dan5 force $Data.dan5_hot end 
 CNSsolve>    end if 
 CNSsolve> 
 CNSsolve>    evaluate ($ener = 0) 
 CNSsolve>    evaluate ($vdw  = 0) 
 CNSsolve>    evaluate ($elec = 0) 
 CNSsolve>    evaluate ($noe  = 0) 
 CNSsolve>    evaluate ($coll = 0) 
 CNSsolve>    evaluate ($eair = 0) 
 CNSsolve>    evaluate ($cdih = 0) 
 CNSsolve>    evaluate ($vean = 0) 
 CNSsolve>    evaluate ($sani = 0) 
 CNSsolve>    evaluate ($xrdc = 0) 
 CNSsolve>    evaluate ($xpcs = 0) 
 CNSsolve>    evaluate ($dani = 0) 
 CNSsolve>    evaluate ($esym = 0) 
 CNSsolve>    evaluate ($bsa  = 0) 
 CNSsolve>    evaluate ($desolv = 0.0) 
 CNSsolve> 
 CNSsolve>    energy end 
 CNSsolve>    evaluate ($eair = $noe) 
 CNSsolve> 
 CNSsolve>    if ($Data.flags.sym eq true) then 
 CNSsolve>      noe 
 CNSsolve>        scale * 0.0 
 CNSsolve>        scale symm $Data.ksym 
 CNSsolve>      end 
 CNSsolve>      energy end 
 CNSsolve>      evaluate ($esym = $noe) 
 CNSsolve>    end if 
 CNSsolve> 
 CNSsolve>    if ($SaProtocol.rigidtrans eq true) then 
 CNSsolve>      inline @RUN:protocols/bsa.cns 
 ASSFIL: file bsa.cns opened.
 CNSsolve>! bsa.cns 
 CNSsolve>!   Calculate buried surface area of the complex 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve>{====>} {* buried surface area *} 
 CNSsolve>evaluate ($nchain1 = 0) 
 CNSsolve>evaluate ($saafree = 0) 
 CNSsolve>while ($nchain1 < $data.ncomponents) loop nloop1 
 CNSsolve>  evaluate ($nchain1 = $nchain1 + 1) 
 CNSsolve>  {====>} {* buried surface area *} 
 CNSsolve>  do (rmsd = 0) (all) 
 CNSsolve>  surface mode=access accu=0.075 rh2o=1.4 sele=(segid $Toppar.prot_segid_$nchain1) end 
 CNSsolve>  show sum (rmsd) (segid $Toppar.prot_segid_$nchain1 and not ((resn WAT or resn HOH or resn TIP*) or resn DMS)) 
 CNSsolve>  evaluate ($saafree = $saafree + $result) 
 CNSsolve>end loop nloop1 
 CNSsolve> 
 CNSsolve>{====>} {* define ASA-based solvation parameters *} 
 CNSsolve>inline @RUN:protocols/def_solv_param.cns 
 ASSFIL: file def_solv_param.cns opened.
 CNSsolve>! def_solv_param.cns 
 CNSsolve>!    Define atomic solvation parameters taken from Fernandez-Recio et al. JMB 335:843 (2004) 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve>evaluate ($arofac = 6.26) 
 CNSsolve>evaluate ($alifac = 1.27) 
 CNSsolve>evaluate ($polfac = 2.30) 
 CNSsolve>do (store1 =  0.0000) (all) 
 CNSsolve>do (store1 =  0.0151 * $alifac) (name C*) 
 CNSsolve>do (store1 =  0.0176 * $arofac) ((name CG* or name CD* or name CE* or name CH* or name CZ*) and (resn PHE or resn TYR or resn HIS or resn TRP)) 
 CNSsolve>do (store1 = -0.0170 * $polfac) (name N*) 
 CNSsolve>do (store1 = -0.0548 * $polfac) (name NT* or (name NZ* and resn LYS)) 
 CNSsolve>do (store1 = -0.0273 * $polfac) (name NH* and resn ARG) 
 CNSsolve>do (store1 = -0.0136 * $polfac) (name O*) 
 CNSsolve>do (store1 = -0.0185 * $polfac) (name OG* or name OH) 
 CNSsolve>do (store1 = -0.0299 * $polfac) ((name OD* and resn ASP) or (name OE* and resn GLU)) 
 CNSsolve>do (store1 =  0.0112 * $polfac) (name S*) 
 CNSsolve>do (store1 =  0.0022 * $polfac) ((name S* and attr charge = -0.3) or (name SD and resn MET)) 
 CNSsolve> 
 CNSsolve>do (rmsd = 0) (all) 
 CNSsolve>do (store2 = 0) (all) 
 CNSsolve>surface mode=access accu=0.075 rh2o=1.4 sele=(all) end 
 CNSsolve>show sum (rmsd) (all and not ((resn WAT or resn HOH or resn TIP*) or resn DMS)) 
 CNSsolve>evaluate ($satot = $result) 
 CNSsolve>evaluate ($saburied = $saafree - $satot) 
 CNSsolve>evaluate ($bsa = $saburied) 
 CNSsolve>! minimum BSA value set to 15 (one H atom would have SASA of 12.56 A**2) 
 CNSsolve>if ($bsa < 15) then 
 CNSsolve>  evaluate ($bsa = -999999) 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>do (store2 = rmsd * store1) (not ((resn WAT or resn HOH or resn TIP*) or resn DMS)) 
 CNSsolve>show sum (store2) (not ((resn WAT or resn HOH or resn TIP*) or resn DMS)) 
 CNSsolve>evaluate ($esolcplx = $result) 
 CNSsolve>evaluate ($desolv = $esolcplx - $esolfree) 
 CNSsolve> 
 CNSsolve>if ($data.ncomponents eq 1) then 
 CNSsolve>  evaluate ($bsa = 0) 
 CNSsolve>  evaluate ($desolv = 0) 
 CNSsolve>end if 
 CNSsolve>    end if 
 CNSsolve> 
 CNSsolve>    evaluate ($etot = $iterations.w_vdw  * $vdw) 
 CNSsolve>    evaluate ($etot = $etot + $iterations.w_elec * $elec) 
 CNSsolve>    evaluate ($etot = $etot + $iterations.w_dist * $eair) 
 CNSsolve>    evaluate ($etot = $etot + $iterations.w_rg *   $coll) 
 CNSsolve>    evaluate ($etot = $etot + $iterations.w_cdih * $cdih) 
 CNSsolve>    evaluate ($etot = $etot + $iterations.w_sani * $sani) 
 CNSsolve>    evaluate ($etot = $etot + $iterations.w_xrdc * $xrdc) 
 CNSsolve>    evaluate ($etot = $etot + $iterations.w_xpcs * $xpcs) 
 CNSsolve>    evaluate ($etot = $etot + $iterations.w_dani * $dani) 
 CNSsolve>    evaluate ($etot = $etot + $iterations.w_vean * $vean) 
 CNSsolve>    evaluate ($etot = $etot + $iterations.w_sym  * $esym) 
 CNSsolve>    evaluate ($etot = $etot + $iterations.w_bsa  * $bsa) 
 CNSsolve>    evaluate ($etot = $etot + $iterations.w_desolv * $desolv) 
 CNSsolve> 
 CNSsolve>    if ($nfirst = 1) then 
 CNSsolve>      evaluate ($bestener = $etot) 
 CNSsolve>      evaluate ($bestair = $eair) 
 CNSsolve>      evaluate ($ncvbest = $npart) 
 CNSsolve>      do (refx = x) (all) 
 CNSsolve>      do (refy = y) (all) 
 CNSsolve>      do (refz = z) (all) 
 CNSsolve>      evaluate ($nfirst = 0) 
 CNSsolve>      if ($data.waterdock eq true) then 
 CNSsolve>       ident (store3) (not all) 
 CNSsolve>       ident (store3) (store5) 
 CNSsolve>      else 
 CNSsolve>       ident (store3) (not all) 
 CNSsolve>      end if 
 CNSsolve>    else 
 CNSsolve>      if ($etot < $bestener) then 
 CNSsolve>        evaluate ($bestener = $etot) 
 CNSsolve>        evaluate ($bestair = $eair) 
 CNSsolve>        evaluate ($ncvbest = $npart) 
 CNSsolve>        do (refx = x) (all) 
 CNSsolve>        do (refy = y) (all) 
 CNSsolve>        do (refz = z) (all) 
 CNSsolve>        if ($data.waterdock eq true) then 
 CNSsolve>         ident (store3) (not all) 
 CNSsolve>         ident (store3) (store5) 
 CNSsolve>        end if 
 CNSsolve>      end if 
 CNSsolve>    end if 
 CNSsolve> 
 CNSsolve>    evaluate ($kinter = $SaProtocol.inter_rigid) 
 CNSsolve>    @RUN:protocols/scale_inter_mini.cns 
 ASSFIL: file scale_inter_mini.cns opened.
 CNSsolve>! scale_inter_mini.cns 
 CNSsolve>!    Scaling of intermolecular interations 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve>igroup interaction (not all) (not all) end 
 CNSsolve> 
 CNSsolve>igroup 
 CNSsolve> 
 CNSsolve>  eval($nchain1 = 0) 
 CNSsolve> 
 CNSsolve>  while ($nchain1 < $data.ncomponents) loop nloop1 
 CNSsolve>    eval($nchain1 = $nchain1 + 1) 
 CNSsolve>    eval($nchain2 = $nchain1 ) 
 CNSsolve>    while ($nchain2 < $data.ncomponents) loop nloop2 
 CNSsolve>      eval($nchain2 = $nchain2 + 1) 
 CNSsolve>      eval($scalfac = $kinter * $Toppar.int_$nchain1_$nchain2) 
 CNSsolve>      interaction (segid $Toppar.prot_segid_$nchain1 and not (resn ANI or resn DAN or resn XAN)) 
 CNSsolve>                  (segid $Toppar.prot_segid_$nchain2 and not (resn ANI or resn DAN or resn XAN)) weight * 1.0 vdw $scalfac elec $scalfac end 
 CNSsolve>    end loop nloop2 
 CNSsolve> 
 CNSsolve>  end loop nloop1 
 CNSsolve> 
 CNSsolve>  interaction (resn ANI) (resn ANI) weight * 1.0 vdw 0.0 elec 0.0 end 
 CNSsolve>  interaction (resn DAN) (resn DAN) weight * 1.0 vdw 0.0 elec 0.0 end 
 CNSsolve>  interaction (resn XAN) (resn XAN) weight * 1.0 vdw 0.0 elec 0.0 end 
 CNSsolve> 
 CNSsolve>end 
 CNSsolve> 
 CNSsolve>    evaluate ($unamb_scale = $unamb_scale_store) 
 CNSsolve>    evaluate ($ambig_scale = $ambig_scale_store) 
 CNSsolve>    evaluate ($hbond_scale = $hbond_scale_store) 
 CNSsolve>    evaluate ($symm_scale = $symm_scale_store) 
 CNSsolve> 
 CNSsolve>    noe 
 CNSsolve>      scale dist $unamb_scale 
 CNSsolve>      scale ambi $ambig_scale 
 CNSsolve>      scale hbon $hbond_scale 
 CNSsolve>      scale symm $symm_scale 
 CNSsolve>    end 
 CNSsolve> 
 CNSsolve>      if ($iterations.rotate180 eq true) then 
 CNSsolve> 
 CNSsolve>        eval($nchain1 = 0) 
 CNSsolve>        while ($nchain1 < $data.ncomponents) loop nloop4 
 CNSsolve>          eval($nchain1 = $nchain1 + 1) 
 CNSsolve>          eval($nchain2 = $nchain1 ) 
 CNSsolve>          while ($nchain2 < $data.ncomponents) loop nloop3 
 CNSsolve>            eval($nchain2 = $nchain2 + 1) 
 CNSsolve>            @RUN:protocols/rotation180.cns 
 ASSFIL: file rotation180.cns opened.
 CNSsolve>! rotation180.cns 
 CNSsolve>!    Perform a 180 degree rotation around a vector perpendicular to 
 CNSsolve>!    the interface of the complex 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve> 
 CNSsolve>	eval($distcu = 5.0) 
 CNSsolve>        eval($rotate180 = 180.0) 
 CNSsolve>	eval($xa = 0.0) 
 CNSsolve>	eval($ya = 0.0) 
 CNSsolve>	eval($za = 0.0) 
 CNSsolve>	eval($xb = 0.0) 
 CNSsolve>	eval($zb = 0.0) 
 CNSsolve>	eval($zb = 0.0) 
 CNSsolve> 
 CNSsolve>        show aver (x) (segid $Toppar.prot_segid_$nchain1 and ((segid $Toppar.prot_segid_$nchain2) around $distcu)) 
 CNSsolve>        evaluate ($xa = $result) 
 CNSsolve>        show aver (y) (segid $Toppar.prot_segid_$nchain1 and ((segid $Toppar.prot_segid_$nchain2) around $distcu)) 
 CNSsolve>        evaluate ($ya = $result) 
 CNSsolve>        show aver (z) (segid $Toppar.prot_segid_$nchain1 and ((segid $Toppar.prot_segid_$nchain2) around $distcu)) 
 CNSsolve>        evaluate ($za = $result) 
 CNSsolve>        show aver (x) (segid $Toppar.prot_segid_$nchain2 and ((segid $Toppar.prot_segid_$nchain1) around $distcu)) 
 CNSsolve>        evaluate ($xb = $result) 
 CNSsolve>        show aver (y) (segid $Toppar.prot_segid_$nchain2 and ((segid $Toppar.prot_segid_$nchain1) around $distcu)) 
 CNSsolve>        evaluate ($yb = $result) 
 CNSsolve>        show aver (z) (segid $Toppar.prot_segid_$nchain2 and ((segid $Toppar.prot_segid_$nchain1) around $distcu)) 
 CNSsolve>        evaluate ($zb = $result) 
 CNSsolve>        eval($xdiff=$xa-$xb) 
 CNSsolve>        eval($ydiff=$ya-$yb) 
 CNSsolve>        eval($zdiff=$za-$zb) 
 CNSsolve>	eval($rnorm=$xdiff**2+$ydiff**2+$zdiff**2) 
 CNSsolve> 
 CNSsolve>	if ($rnorm > 0.0) then 
 CNSsolve> 
 CNSsolve>          coor 
 CNSsolve>            rotate sele= (segid $Toppar.prot_segid_$nchain2 or segid $watersegname_$nchain2) 
 CNSsolve>            center=($xa $ya $za) 
 CNSsolve>            axis ($xdiff $ydiff $zdiff) 
 CNSsolve>            $rotate180 
 CNSsolve>          end 
 CNSsolve> 
 CNSsolve>   	  fix sele=(name OO) end 
 CNSsolve>	 
 CNSsolve>          minimize rigid 
 CNSsolve>            eval ($nch1 = 0) 
 CNSsolve>            while ($nch1 < $data.ncomponents) loop nloop1 
 CNSsolve>	      eval($nch1 = $nch1 + 1) 
 CNSsolve>              group (segid $Toppar.prot_segid_$nch1 or segid $watersegname_$nch1) 
 CNSsolve>              translation=true 
 CNSsolve>            end loop nloop1 
 CNSsolve>            translation=true 
 CNSsolve>            nstep 250 
 CNSsolve>            nprint 10 
 CNSsolve>          end 
 CNSsolve> 
 CNSsolve>          minimize rigid 
 CNSsolve>            eval ($nch1 = 0) 
 CNSsolve>            while ($nch1 < $data.ncomponents) loop nloop1 
 CNSsolve>	      eval($nch1 = $nch1 + 1) 
 CNSsolve>              group (segid $Toppar.prot_segid_$nch1 or segid $watersegname_$nch1) 
 CNSsolve>              translation=true 
 CNSsolve>            end loop nloop1 
 CNSsolve>            translation=true 
 CNSsolve>            nstep 250 
 CNSsolve>            nprint 10 
 CNSsolve>          end 
 CNSsolve> 
 CNSsolve>          energy end 
 CNSsolve> 
 CNSsolve>          if ($anisotropy eq true) then 
 CNSsolve>            fix sele=(not all) end 
 CNSsolve>   	    fix sele=(name OO) end 
 CNSsolve>            minimize rigid 
 CNSsolve>              group (not (resn ANI or resn DAN or resn XAN)) 
 CNSsolve>              translation=false 
 CNSsolve>              for $id in id ((resn ANI or resn DAN or resn XAN) and name OO) loop miniani 
 CNSsolve>                group (byres(id $id)) 
 CNSsolve>                translation=false 
 CNSsolve>              end loop miniani 
 CNSsolve>              translation=false 
 CNSsolve>              nstep 100 
 CNSsolve>              drop 10.0 
 CNSsolve>              nprint 10 
 CNSsolve>            end 
 CNSsolve>            minimize rigid 
 CNSsolve>              eval ($nch1 = 0) 
 CNSsolve>              while ($nch1 < $data.ncomponents) loop nloop1 
 CNSsolve>                eval($nch1 = $nch1 + 1) 
 CNSsolve>                group (segid $Toppar.prot_segid_$nch1 or segid $watersegname_$nch1) 
 CNSsolve>                translation=true 
 CNSsolve>              end loop nloop1 
 CNSsolve>              for $id in id ((resn ANI or resn DAN or resn XAN) and name OO) loop miniani 
 CNSsolve>                group (byres(id $id)) 
 CNSsolve>                translation=true 
 CNSsolve>              end loop miniani 
 CNSsolve>              translation=true 
 CNSsolve>              nstep 250 
 CNSsolve>              nprint 10 
 CNSsolve>            end 
 CNSsolve>          end if 
 CNSsolve>	 
 CNSsolve>	end if 
 CNSsolve>            inline @RUN:protocols/bestener.cns 
 ASSFIL: file bestener.cns opened.
 CNSsolve>! bestener.cns 
 CNSsolve>!   Store best score model from rigid-body dokcing (it0) 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve>    eval ($kinter = 1.0) 
 CNSsolve>    @RUN:protocols/scale_inter_mini.cns 
 ASSFIL: file scale_inter_mini.cns opened.
 CNSsolve>! scale_inter_mini.cns 
 CNSsolve>!    Scaling of intermolecular interations 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve>igroup interaction (not all) (not all) end 
 CNSsolve> 
 CNSsolve>igroup 
 CNSsolve> 
 CNSsolve>  eval($nchain1 = 0) 
 CNSsolve> 
 CNSsolve>  while ($nchain1 < $data.ncomponents) loop nloop1 
 CNSsolve>    eval($nchain1 = $nchain1 + 1) 
 CNSsolve>    eval($nchain2 = $nchain1 ) 
 CNSsolve>    while ($nchain2 < $data.ncomponents) loop nloop2 
 CNSsolve>      eval($nchain2 = $nchain2 + 1) 
 CNSsolve>      eval($scalfac = $kinter * $Toppar.int_$nchain1_$nchain2) 
 CNSsolve>      interaction (segid $Toppar.prot_segid_$nchain1 and not (resn ANI or resn DAN or resn XAN)) 
 CNSsolve>                  (segid $Toppar.prot_segid_$nchain2 and not (resn ANI or resn DAN or resn XAN)) weight * 1.0 vdw $scalfac elec $scalfac end 
 CNSsolve>    end loop nloop2 
 CNSsolve> 
 CNSsolve>  end loop nloop1 
 CNSsolve> 
 CNSsolve>  interaction (resn ANI) (resn ANI) weight * 1.0 vdw 0.0 elec 0.0 end 
 CNSsolve>  interaction (resn DAN) (resn DAN) weight * 1.0 vdw 0.0 elec 0.0 end 
 CNSsolve>  interaction (resn XAN) (resn XAN) weight * 1.0 vdw 0.0 elec 0.0 end 
 CNSsolve> 
 CNSsolve>end 
 CNSsolve> 
 CNSsolve>    evaluate ($unamb_scale = $Data.unamb_cool3) 
 CNSsolve>    evaluate ($ambig_scale = $Data.amb_cool3) 
 CNSsolve>    evaluate ($hbond_scale = $Data.hbond_cool3) 
 CNSsolve> 
 CNSsolve>    noe 
 CNSsolve>      scale dist $unamb_scale 
 CNSsolve>      scale ambi $ambig_scale 
 CNSsolve>      scale hbon $hbond_scale 
 CNSsolve>      scale symm 0.0 
 CNSsolve>    end 
 CNSsolve> 
 CNSsolve>    if ($Data.flags.vean eq true) then 
 CNSsolve>      vean class vea1 force $Data.fin_bor_cool3_1 $Data.fin_cen_cool3_1 end 
 CNSsolve>      vean class vea2 force $Data.fin_bor_cool3_2 $Data.fin_cen_cool3_2 end 
 CNSsolve>      vean class vea3 force $Data.fin_bor_cool3_3 $Data.fin_cen_cool3_3 end 
 CNSsolve>      vean class vea4 force $Data.fin_bor_cool3_4 $Data.fin_cen_cool3_4 end 
 CNSsolve>      vean class vea5 force $Data.fin_bor_cool3_5 $Data.fin_cen_cool3_5 end 
 CNSsolve>    end if 
 CNSsolve> 
 CNSsolve>    if ($Data.flags.sani eq true) then 
 CNSsolve>      sani class rdc1 force $Data.rdc1_hot end 
 CNSsolve>      sani class rdc2 force $Data.rdc2_hot end 
 CNSsolve>      sani class rdc3 force $Data.rdc3_hot end 
 CNSsolve>      sani class rdc4 force $Data.rdc4_hot end 
 CNSsolve>      sani class rdc5 force $Data.rdc5_hot end 
 CNSsolve>    end if 
 CNSsolve> 
 CNSsolve>    if ($Data.flags.xrdc eq true) then 
 CNSsolve>      xrdc class rdc1 force $Data.rdc1_hot end 
 CNSsolve>      xrdc class rdc2 force $Data.rdc2_hot end 
 CNSsolve>      xrdc class rdc3 force $Data.rdc3_hot end 
 CNSsolve>      xrdc class rdc4 force $Data.rdc4_hot end 
 CNSsolve>      xrdc class rdc5 force $Data.rdc5_hot end 
 CNSsolve>    end if 
 CNSsolve> 
 CNSsolve>    if ($Data.flags.xpcs eq true) then 
 CNSsolve>      xpcs class pcs1 force $Data.pcs1_hot end 
 CNSsolve>      xpcs class pcs2 force $Data.pcs2_hot end 
 CNSsolve>      xpcs class pcs3 force $Data.pcs3_hot end 
 CNSsolve>      xpcs class pcs4 force $Data.pcs4_hot end 
 CNSsolve>      xpcs class pcs5 force $Data.pcs5_hot end 
 CNSsolve>      xpcs class pcs6 force $Data.pcs6_hot end 
 CNSsolve>      xpcs class pcs7 force $Data.pcs7_hot end 
 CNSsolve>      xpcs class pcs8 force $Data.pcs8_hot end 
 CNSsolve>      xpcs class pcs9 force $Data.pcs9_hot end 
 CNSsolve>      xpcs class pcsA force $Data.pcsA_hot end 
 CNSsolve>    end if 
 CNSsolve> 
 CNSsolve>    if ($Data.flags.dani eq true) then 
 CNSsolve>      dani class dan1 force $Data.dan1_hot end 
 CNSsolve>      dani class dan2 force $Data.dan2_hot end 
 CNSsolve>      dani class dan3 force $Data.dan3_hot end 
 CNSsolve>      dani class dan4 force $Data.dan4_hot end 
 CNSsolve>      dani class dan5 force $Data.dan5_hot end 
 CNSsolve>    end if 
 CNSsolve> 
 CNSsolve>    evaluate ($ener = 0) 
 CNSsolve>    evaluate ($vdw  = 0) 
 CNSsolve>    evaluate ($elec = 0) 
 CNSsolve>    evaluate ($noe  = 0) 
 CNSsolve>    evaluate ($coll = 0) 
 CNSsolve>    evaluate ($eair = 0) 
 CNSsolve>    evaluate ($cdih = 0) 
 CNSsolve>    evaluate ($vean = 0) 
 CNSsolve>    evaluate ($sani = 0) 
 CNSsolve>    evaluate ($xrdc = 0) 
 CNSsolve>    evaluate ($xpcs = 0) 
 CNSsolve>    evaluate ($dani = 0) 
 CNSsolve>    evaluate ($esym = 0) 
 CNSsolve>    evaluate ($bsa  = 0) 
 CNSsolve>    evaluate ($desolv = 0.0) 
 CNSsolve> 
 CNSsolve>    energy end 
 CNSsolve>    evaluate ($eair = $noe) 
 CNSsolve> 
 CNSsolve>    if ($Data.flags.sym eq true) then 
 CNSsolve>      noe 
 CNSsolve>        scale * 0.0 
 CNSsolve>        scale symm $Data.ksym 
 CNSsolve>      end 
 CNSsolve>      energy end 
 CNSsolve>      evaluate ($esym = $noe) 
 CNSsolve>    end if 
 CNSsolve> 
 CNSsolve>    if ($SaProtocol.rigidtrans eq true) then 
 CNSsolve>      inline @RUN:protocols/bsa.cns 
 ASSFIL: file bsa.cns opened.
 CNSsolve>! bsa.cns 
 CNSsolve>!   Calculate buried surface area of the complex 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve>{====>} {* buried surface area *} 
 CNSsolve>evaluate ($nchain1 = 0) 
 CNSsolve>evaluate ($saafree = 0) 
 CNSsolve>while ($nchain1 < $data.ncomponents) loop nloop1 
 CNSsolve>  evaluate ($nchain1 = $nchain1 + 1) 
 CNSsolve>  {====>} {* buried surface area *} 
 CNSsolve>  do (rmsd = 0) (all) 
 CNSsolve>  surface mode=access accu=0.075 rh2o=1.4 sele=(segid $Toppar.prot_segid_$nchain1) end 
 CNSsolve>  show sum (rmsd) (segid $Toppar.prot_segid_$nchain1 and not ((resn WAT or resn HOH or resn TIP*) or resn DMS)) 
 CNSsolve>  evaluate ($saafree = $saafree + $result) 
 CNSsolve>end loop nloop1 
 CNSsolve> 
 CNSsolve>{====>} {* define ASA-based solvation parameters *} 
 CNSsolve>inline @RUN:protocols/def_solv_param.cns 
 ASSFIL: file def_solv_param.cns opened.
 CNSsolve>! def_solv_param.cns 
 CNSsolve>!    Define atomic solvation parameters taken from Fernandez-Recio et al. JMB 335:843 (2004) 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve>evaluate ($arofac = 6.26) 
 CNSsolve>evaluate ($alifac = 1.27) 
 CNSsolve>evaluate ($polfac = 2.30) 
 CNSsolve>do (store1 =  0.0000) (all) 
 CNSsolve>do (store1 =  0.0151 * $alifac) (name C*) 
 CNSsolve>do (store1 =  0.0176 * $arofac) ((name CG* or name CD* or name CE* or name CH* or name CZ*) and (resn PHE or resn TYR or resn HIS or resn TRP)) 
 CNSsolve>do (store1 = -0.0170 * $polfac) (name N*) 
 CNSsolve>do (store1 = -0.0548 * $polfac) (name NT* or (name NZ* and resn LYS)) 
 CNSsolve>do (store1 = -0.0273 * $polfac) (name NH* and resn ARG) 
 CNSsolve>do (store1 = -0.0136 * $polfac) (name O*) 
 CNSsolve>do (store1 = -0.0185 * $polfac) (name OG* or name OH) 
 CNSsolve>do (store1 = -0.0299 * $polfac) ((name OD* and resn ASP) or (name OE* and resn GLU)) 
 CNSsolve>do (store1 =  0.0112 * $polfac) (name S*) 
 CNSsolve>do (store1 =  0.0022 * $polfac) ((name S* and attr charge = -0.3) or (name SD and resn MET)) 
 CNSsolve> 
 CNSsolve>do (rmsd = 0) (all) 
 CNSsolve>do (store2 = 0) (all) 
 CNSsolve>surface mode=access accu=0.075 rh2o=1.4 sele=(all) end 
 CNSsolve>show sum (rmsd) (all and not ((resn WAT or resn HOH or resn TIP*) or resn DMS)) 
 CNSsolve>evaluate ($satot = $result) 
 CNSsolve>evaluate ($saburied = $saafree - $satot) 
 CNSsolve>evaluate ($bsa = $saburied) 
 CNSsolve>! minimum BSA value set to 15 (one H atom would have SASA of 12.56 A**2) 
 CNSsolve>if ($bsa < 15) then 
 CNSsolve>  evaluate ($bsa = -999999) 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>do (store2 = rmsd * store1) (not ((resn WAT or resn HOH or resn TIP*) or resn DMS)) 
 CNSsolve>show sum (store2) (not ((resn WAT or resn HOH or resn TIP*) or resn DMS)) 
 CNSsolve>evaluate ($esolcplx = $result) 
 CNSsolve>evaluate ($desolv = $esolcplx - $esolfree) 
 CNSsolve> 
 CNSsolve>if ($data.ncomponents eq 1) then 
 CNSsolve>  evaluate ($bsa = 0) 
 CNSsolve>  evaluate ($desolv = 0) 
 CNSsolve>end if 
 CNSsolve>    end if 
 CNSsolve> 
 CNSsolve>    evaluate ($etot = $iterations.w_vdw  * $vdw) 
 CNSsolve>    evaluate ($etot = $etot + $iterations.w_elec * $elec) 
 CNSsolve>    evaluate ($etot = $etot + $iterations.w_dist * $eair) 
 CNSsolve>    evaluate ($etot = $etot + $iterations.w_rg *   $coll) 
 CNSsolve>    evaluate ($etot = $etot + $iterations.w_cdih * $cdih) 
 CNSsolve>    evaluate ($etot = $etot + $iterations.w_sani * $sani) 
 CNSsolve>    evaluate ($etot = $etot + $iterations.w_xrdc * $xrdc) 
 CNSsolve>    evaluate ($etot = $etot + $iterations.w_xpcs * $xpcs) 
 CNSsolve>    evaluate ($etot = $etot + $iterations.w_dani * $dani) 
 CNSsolve>    evaluate ($etot = $etot + $iterations.w_vean * $vean) 
 CNSsolve>    evaluate ($etot = $etot + $iterations.w_sym  * $esym) 
 CNSsolve>    evaluate ($etot = $etot + $iterations.w_bsa  * $bsa) 
 CNSsolve>    evaluate ($etot = $etot + $iterations.w_desolv * $desolv) 
 CNSsolve> 
 CNSsolve>    if ($nfirst = 1) then 
 CNSsolve>      evaluate ($bestener = $etot) 
 CNSsolve>      evaluate ($bestair = $eair) 
 CNSsolve>      evaluate ($ncvbest = $npart) 
 CNSsolve>      do (refx = x) (all) 
 CNSsolve>      do (refy = y) (all) 
 CNSsolve>      do (refz = z) (all) 
 CNSsolve>      evaluate ($nfirst = 0) 
 CNSsolve>      if ($data.waterdock eq true) then 
 CNSsolve>       ident (store3) (not all) 
 CNSsolve>       ident (store3) (store5) 
 CNSsolve>      else 
 CNSsolve>       ident (store3) (not all) 
 CNSsolve>      end if 
 CNSsolve>    else 
 CNSsolve>      if ($etot < $bestener) then 
 CNSsolve>        evaluate ($bestener = $etot) 
 CNSsolve>        evaluate ($bestair = $eair) 
 CNSsolve>        evaluate ($ncvbest = $npart) 
 CNSsolve>        do (refx = x) (all) 
 CNSsolve>        do (refy = y) (all) 
 CNSsolve>        do (refz = z) (all) 
 CNSsolve>        if ($data.waterdock eq true) then 
 CNSsolve>         ident (store3) (not all) 
 CNSsolve>         ident (store3) (store5) 
 CNSsolve>        end if 
 CNSsolve>      end if 
 CNSsolve>    end if 
 CNSsolve> 
 CNSsolve>    evaluate ($kinter = $SaProtocol.inter_rigid) 
 CNSsolve>    @RUN:protocols/scale_inter_mini.cns 
 ASSFIL: file scale_inter_mini.cns opened.
 CNSsolve>! scale_inter_mini.cns 
 CNSsolve>!    Scaling of intermolecular interations 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve>igroup interaction (not all) (not all) end 
 CNSsolve> 
 CNSsolve>igroup 
 CNSsolve> 
 CNSsolve>  eval($nchain1 = 0) 
 CNSsolve> 
 CNSsolve>  while ($nchain1 < $data.ncomponents) loop nloop1 
 CNSsolve>    eval($nchain1 = $nchain1 + 1) 
 CNSsolve>    eval($nchain2 = $nchain1 ) 
 CNSsolve>    while ($nchain2 < $data.ncomponents) loop nloop2 
 CNSsolve>      eval($nchain2 = $nchain2 + 1) 
 CNSsolve>      eval($scalfac = $kinter * $Toppar.int_$nchain1_$nchain2) 
 CNSsolve>      interaction (segid $Toppar.prot_segid_$nchain1 and not (resn ANI or resn DAN or resn XAN)) 
 CNSsolve>                  (segid $Toppar.prot_segid_$nchain2 and not (resn ANI or resn DAN or resn XAN)) weight * 1.0 vdw $scalfac elec $scalfac end 
 CNSsolve>    end loop nloop2 
 CNSsolve> 
 CNSsolve>  end loop nloop1 
 CNSsolve> 
 CNSsolve>  interaction (resn ANI) (resn ANI) weight * 1.0 vdw 0.0 elec 0.0 end 
 CNSsolve>  interaction (resn DAN) (resn DAN) weight * 1.0 vdw 0.0 elec 0.0 end 
 CNSsolve>  interaction (resn XAN) (resn XAN) weight * 1.0 vdw 0.0 elec 0.0 end 
 CNSsolve> 
 CNSsolve>end 
 CNSsolve> 
 CNSsolve>    evaluate ($unamb_scale = $unamb_scale_store) 
 CNSsolve>    evaluate ($ambig_scale = $ambig_scale_store) 
 CNSsolve>    evaluate ($hbond_scale = $hbond_scale_store) 
 CNSsolve>    evaluate ($symm_scale = $symm_scale_store) 
 CNSsolve> 
 CNSsolve>    noe 
 CNSsolve>      scale dist $unamb_scale 
 CNSsolve>      scale ambi $ambig_scale 
 CNSsolve>      scale hbon $hbond_scale 
 CNSsolve>      scale symm $symm_scale 
 CNSsolve>    end 
 CNSsolve>          end loop nloop3 
 CNSsolve> 
 CNSsolve>        end loop nloop4 
 CNSsolve>      end if 
 CNSsolve> 
 CNSsolve>    end loop trials 
 CNSsolve> 
 CNSsolve>  else 
 CNSsolve> 
 CNSsolve>    evaluate ($kinter = $SaProtocol.inter_rigid) 
 EVALUATE: symbol $KINTER set to    1.00000     (real)
 CNSsolve>    @RUN:protocols/scale_inter_only.cns 
 ASSFIL: file scale_inter_only.cns opened.
 CNSsolve>! scale_inter_only.cns 
 CNSsolve>!   Scaling of intermolecular interaction (not internal energies) 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve>igroup interaction (not all) (not all) end 
 SELRPN:      0 atoms have been selected out of   2978
 SELRPN:      0 atoms have been selected out of   2978
 CNSsolve> 
 CNSsolve>igroup 
 IGROup> 
 IGROup>  eval($nchain1 = 0) 
 EVALUATE: symbol $NCHAIN1 set to    0.00000     (real)
 IGROup> 
 IGROup>  while ($nchain1 < $data.ncomponents) loop nloop1 
 NEXTCD: condition evaluated as true
 IGROup>    eval($nchain1 = $nchain1 + 1) 
 EVALUATE: symbol $NCHAIN1 set to    1.00000     (real)
 IGROup>    eval($nchain2 = $nchain1 ) 
 EVALUATE: symbol $NCHAIN2 set to    1.00000     (real)
 IGROup>    while ($nchain2 < $data.ncomponents) loop nloop2 
 NEXTCD: condition evaluated as true
 IGROup>      eval($nchain2 = $nchain2 + 1) 
 EVALUATE: symbol $NCHAIN2 set to    2.00000     (real)
 IGROup>      eval($scalfac = $kinter * $Toppar.int_$nchain1_$nchain2) 
 EVALUATE: symbol $SCALFAC set to    1.00000     (real)
 IGROup>      interaction (segid $Toppar.prot_segid_$nchain1 and not (resn ANI or resn DAN or resn XAN)) 
 SELRPN:   2945 atoms have been selected out of   2978
 SELRPN>                  (segid $Toppar.prot_segid_$nchain2 and not (resn ANI or resn DAN or resn XAN)) weight * 1.0 vdw $scalfac elec $scalfac end 
 SELRPN:     33 atoms have been selected out of   2978
 IGROup>    end loop nloop2 
 IGROup>    while ($nchain2 < $data.ncomponents) loop nloop2 
 NEXTCD: condition evaluated as false
 IGROup>      eval($nchain2 = $nchain2 + 1) 
 IGROup>      eval($scalfac = $kinter * $Toppar.int_$nchain1_$nchain2) 
 IGROup>      interaction (segid $Toppar.prot_segid_$nchain1 and not (resn ANI or resn DAN or resn XAN)) 
 IGROup>                  (segid $Toppar.prot_segid_$nchain2 and not (resn ANI or resn DAN or resn XAN)) weight * 1.0 vdw $scalfac elec $scalfac end 
 IGROup>    end loop nloop2 
 IGROup>    interaction (segid $Toppar.prot_segid_$nchain1 and not (resn ANI or resn DAN or resn XAN)) 
 SELRPN:   2945 atoms have been selected out of   2978
 SELRPN>                ((resn WAT or resn HOH or resn TIP*)) weight * 1.0 vdw $kinter elec $kinter end 
 SELRPN:      0 atoms have been selected out of   2978
 IGROup> 
 IGROup>  end loop nloop1 
 IGROup>  while ($nchain1 < $data.ncomponents) loop nloop1 
 NEXTCD: condition evaluated as true
 IGROup>    eval($nchain1 = $nchain1 + 1) 
 EVALUATE: symbol $NCHAIN1 set to    2.00000     (real)
 IGROup>    eval($nchain2 = $nchain1 ) 
 EVALUATE: symbol $NCHAIN2 set to    2.00000     (real)
 IGROup>    while ($nchain2 < $data.ncomponents) loop nloop2 
 NEXTCD: condition evaluated as false
 IGROup>      eval($nchain2 = $nchain2 + 1) 
 IGROup>      eval($scalfac = $kinter * $Toppar.int_$nchain1_$nchain2) 
 IGROup>      interaction (segid $Toppar.prot_segid_$nchain1 and not (resn ANI or resn DAN or resn XAN)) 
 IGROup>                  (segid $Toppar.prot_segid_$nchain2 and not (resn ANI or resn DAN or resn XAN)) weight * 1.0 vdw $scalfac elec $scalfac end 
 IGROup>    end loop nloop2 
 IGROup>    interaction (segid $Toppar.prot_segid_$nchain1 and not (resn ANI or resn DAN or resn XAN)) 
 SELRPN:     33 atoms have been selected out of   2978
 SELRPN>                ((resn WAT or resn HOH or resn TIP*)) weight * 1.0 vdw $kinter elec $kinter end 
 SELRPN:      0 atoms have been selected out of   2978
 IGROup> 
 IGROup>  end loop nloop1 
 IGROup>  while ($nchain1 < $data.ncomponents) loop nloop1 
 NEXTCD: condition evaluated as false
 IGROup>    eval($nchain1 = $nchain1 + 1) 
 IGROup>    eval($nchain2 = $nchain1 ) 
 IGROup>    while ($nchain2 < $data.ncomponents) loop nloop2 
 IGROup>      eval($nchain2 = $nchain2 + 1) 
 IGROup>      eval($scalfac = $kinter * $Toppar.int_$nchain1_$nchain2) 
 IGROup>      interaction (segid $Toppar.prot_segid_$nchain1 and not (resn ANI or resn DAN or resn XAN)) 
 IGROup>                  (segid $Toppar.prot_segid_$nchain2 and not (resn ANI or resn DAN or resn XAN)) weight * 1.0 vdw $scalfac elec $scalfac end 
 IGROup>    end loop nloop2 
 IGROup>    interaction (segid $Toppar.prot_segid_$nchain1 and not (resn ANI or resn DAN or resn XAN)) 
 IGROup>                ((resn WAT or resn HOH or resn TIP*)) weight * 1.0 vdw $kinter elec $kinter end 
 IGROup> 
 IGROup>  end loop nloop1 
 IGROup> 
 IGROup>  interaction ((resn WAT or resn HOH or resn TIP*)) ((resn WAT or resn HOH or resn TIP*)) weight * 1.0 end 
 SELRPN:      0 atoms have been selected out of   2978
 SELRPN:      0 atoms have been selected out of   2978
 IGROup> 
 IGROup>  interaction (resn ANI) (resn ANI) weight * 1.0 vdw 0.0 elec 0.0 end 
 SELRPN:      0 atoms have been selected out of   2978
 SELRPN:      0 atoms have been selected out of   2978
 IGROup>  interaction (resn DAN) (resn DAN) weight * 1.0 vdw 0.0 elec 0.0 end 
 SELRPN:      0 atoms have been selected out of   2978
 SELRPN:      0 atoms have been selected out of   2978
 IGROup>  interaction (resn XAN) (resn XAN) weight * 1.0 vdw 0.0 elec 0.0 end 
 SELRPN:      0 atoms have been selected out of   2978
 SELRPN:      0 atoms have been selected out of   2978
 IGROup> 
 IGROup>end 
 CNSsolve> 
 CNSsolve>    if ($Data.flags.sani eq true) then 
 NEXTCD: condition evaluated as false
 CNSsolve>      sani class rdc1 force $Data.rdc1_hot end 
 CNSsolve>      sani class rdc2 force $Data.rdc2_hot end 
 CNSsolve>      sani class rdc3 force $Data.rdc3_hot end 
 CNSsolve>      sani class rdc4 force $Data.rdc4_hot end 
 CNSsolve>      sani class rdc5 force $Data.rdc5_hot end 
 CNSsolve>      if ($rantens eq true) then 
 CNSsolve>        @RUN:protocols/mini_tensor.cns 
 ASSFIL: file mini_tensor.cns opened.
 CNSsolve>! mini_tensor.cns 
 CNSsolve>!    Optimize the RDC tensor orientation 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * Originally adapted from Aria 1.2 from Nilges and Linge, EMBL.       * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve>{* Optimize tensor orientation *} 
 CNSsolve> 
 CNSsolve>{* first randomize the tensor orientation because of some CNS problems *} 
 CNSsolve>{* possible resulting in infinite gradient and a failure of the EM     *} 
 CNSsolve> 
 CNSsolve>eval ($erdc = 999999999.0) 
 CNSsolve>eval ($ncount = 0) 
 CNSsolve>while ($ncount < 4) loop trial 
 CNSsolve>  eval ($ncount = $ncount + 1) 
 CNSsolve>  do (xcomp = x) (resn ANI) 
 CNSsolve>  do (ycomp = y) (resn ANI) 
 CNSsolve>  do (zcomp = z) (resn ANI) 
 CNSsolve> 
 CNSsolve>  !random rotation of tensor 
 CNSsolve> 
 CNSsolve>  show aver (x) (resn ANI) 
 CNSsolve>  evaluate ($xc = $result) 
 CNSsolve>  show aver (y) (resn ANI) 
 CNSsolve>  evaluate ($yc = $result) 
 CNSsolve>  show aver (z) (resn ANI) 
 CNSsolve>  evaluate ($zc = $result) 
 CNSsolve> 
 CNSsolve>  evaluate ($xr = ran ()) 
 CNSsolve>  {* rotate around z axis *} 
 CNSsolve>  evaluate ($xr = $xr * 360) 
 CNSsolve>  evaluate ($x1 = cos($xr)) 
 CNSsolve>  evaluate ($x2 = -sin($xr)) 
 CNSsolve>  evaluate ($x3 = 0 ) 
 CNSsolve>  evaluate ($y1 = sin($xr)) 
 CNSsolve>  evaluate ($y2 = cos($xr)) 
 CNSsolve>  evaluate ($y3 = 0 ) 
 CNSsolve>  evaluate ($z1 = 0 ) 
 CNSsolve>  evaluate ($z2 = 0 ) 
 CNSsolve>  evaluate ($z3 = 1 ) 
 CNSsolve>  coor 
 CNSsolve>    center=($xc $yc $zc) 
 CNSsolve>    rotate matrix=($x1 $x2 $x3) ($y1 $y2 $y3) ($z1 $z2 $z3) 
 CNSsolve>    sele=(resn ANI) 
 CNSsolve>  end 
 CNSsolve> 
 CNSsolve>  {* rotate around x axis *} 
 CNSsolve>  evaluate ($xr = ran ()) 
 CNSsolve>  evaluate ($xr = $xr * 360) 
 CNSsolve>  evaluate ($x1 = 1 ) 
 CNSsolve>  evaluate ($x2 = 0 ) 
 CNSsolve>  evaluate ($x3 = 0 ) 
 CNSsolve>  evaluate ($y1 = 0 ) 
 CNSsolve>  evaluate ($y2 = cos($xr)) 
 CNSsolve>  evaluate ($y3 = -sin($xr)) 
 CNSsolve>  evaluate ($z1 = 0 ) 
 CNSsolve>  evaluate ($z2 = sin($xr)) 
 CNSsolve>  evaluate ($z3 = cos($xr)) 
 CNSsolve>  coor 
 CNSsolve>    center=($xc $yc $zc) 
 CNSsolve>    rotate matrix=($x1 $x2 $x3) ($y1 $y2 $y3) ($z1 $z2 $z3) 
 CNSsolve>    sele=(resn ANI) 
 CNSsolve>  end 
 CNSsolve>  {* rotate around y axis *} 
 CNSsolve>  evaluate ($xr = ran ()) 
 CNSsolve>  evaluate ($xr = $xr * 360) 
 CNSsolve>  evaluate ($x1 = cos($xr)) 
 CNSsolve>  evaluate ($x2 = 0 ) 
 CNSsolve>  evaluate ($x3 = -sin($xr)) 
 CNSsolve>  evaluate ($y1 = 0 ) 
 CNSsolve>  evaluate ($y2 = 1 ) 
 CNSsolve>  evaluate ($y3 = 0 ) 
 CNSsolve>  evaluate ($z1 = sin($xr)) 
 CNSsolve>  evaluate ($z2 = 0 ) 
 CNSsolve>  evaluate ($z3 = cos($xr)) 
 CNSsolve>  coor 
 CNSsolve>    center=($xc $yc $zc) 
 CNSsolve>    rotate matrix=($x1 $x2 $x3) ($y1 $y2 $y3) ($z1 $z2 $z3) 
 CNSsolve>    sele=(resn ANI) 
 CNSsolve>  end 
 CNSsolve> 
 CNSsolve>  energy end 
 CNSsolve> 
 CNSsolve>  if ($ncount = 1) then 
 CNSsolve>    eval ($erdc=$sani) 
 CNSsolve>  end if 
 CNSsolve>  if ($sani < $erdc) then 
 CNSsolve>    eval ($erdc=$sani) 
 CNSsolve>    do (xcomp = x) (resn ANI) 
 CNSsolve>    do (ycomp = y) (resn ANI) 
 CNSsolve>    do (zcomp = z) (resn ANI) 
 CNSsolve>  else 
 CNSsolve>    do (x = xcomp) (resn ANI) 
 CNSsolve>    do (y = ycomp) (resn ANI) 
 CNSsolve>    do (z = zcomp) (resn ANI) 
 CNSsolve>  end if 
 CNSsolve> 
 CNSsolve>end loop trial 
 CNSsolve> 
 CNSsolve>fix sele=(not all) end 
 CNSsolve>fix sele=(name OO) end 
 CNSsolve>minimize rigid 
 CNSsolve>  group (not resn ANI) 
 CNSsolve>  translation=false 
 CNSsolve>  for $id in id (resn ANI and name OO) loop miniani 
 CNSsolve>    group (byres(id $id)) 
 CNSsolve>    translation=false 
 CNSsolve>  end loop miniani 
 CNSsolve>  translation=false 
 CNSsolve>  nstep 500 
 CNSsolve>  nprint 10 
 CNSsolve>end 
 CNSsolve>minimize rigid 
 CNSsolve>  eval($nchain1= 1) 
 CNSsolve>  while ($nchain1 <= $data.ncomponents) loop cloop1 
 CNSsolve>    group (segid $Toppar.prot_segid_$nchain1) 
 CNSsolve>    translation=false 
 CNSsolve>    eval($nchain1 = $nchain1 + 1) 
 CNSsolve>  end loop cloop1 
 CNSsolve>  for $id in id (resn ANI and name OO) loop miniani 
 CNSsolve>    group (byres(id $id)) 
 CNSsolve>    translation=false 
 CNSsolve>  end loop miniani 
 CNSsolve>  translation=false 
 CNSsolve>  nstep 500 
 CNSsolve>  nprint 10 
 CNSsolve>end 
 CNSsolve> 
 CNSsolve>      end if 
 CNSsolve>    end if 
 CNSsolve> 
 CNSsolve>    evaluate ($paramin = false) 
 EVALUATE: symbol $PARAMIN set to FALSE (logical)
 CNSsolve>    if ($Data.flags.xrdc eq true) then 
 NEXTCD: condition evaluated as false
 CNSsolve>      xrdc class rdc1 force $Data.rdc1_hot end 
 CNSsolve>      xrdc class rdc2 force $Data.rdc2_hot end 
 CNSsolve>      xrdc class rdc3 force $Data.rdc3_hot end 
 CNSsolve>      xrdc class rdc4 force $Data.rdc4_hot end 
 CNSsolve>      xrdc class rdc5 force $Data.rdc5_hot end 
 CNSsolve>      evaluate ($paramin = true) 
 CNSsolve>    end if 
 CNSsolve> 
 CNSsolve>    if ($Data.flags.xpcs eq true) then 
 NEXTCD: condition evaluated as false
 CNSsolve>      xpcs class pcs1 force $Data.pcs1_hot end 
 CNSsolve>      xpcs class pcs2 force $Data.pcs2_hot end 
 CNSsolve>      xpcs class pcs3 force $Data.pcs3_hot end 
 CNSsolve>      xpcs class pcs4 force $Data.pcs4_hot end 
 CNSsolve>      xpcs class pcs5 force $Data.pcs5_hot end 
 CNSsolve>      xpcs class pcs6 force $Data.pcs6_hot end 
 CNSsolve>      xpcs class pcs7 force $Data.pcs7_hot end 
 CNSsolve>      xpcs class pcs8 force $Data.pcs8_hot end 
 CNSsolve>      xpcs class pcs9 force $Data.pcs9_hot end 
 CNSsolve>      xpcs class pcsA force $Data.pcsA_hot end 
 CNSsolve>      evaluate ($paramin = true) 
 CNSsolve>    end if 
 CNSsolve> 
 CNSsolve>    if ($paramin eq TRUE) then 
 NEXTCD: condition evaluated as false
 CNSsolve>      if ($rantens_para eq true) then 
 CNSsolve>        @RUN:protocols/mini_tensor_para.cns 
 ASSFIL: file mini_tensor_para.cns opened.
 CNSsolve>! mini_tensor_para.cns 
 CNSsolve>!    Optimize the tensor orientation for PCS restraints 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * Originally adapted from Aria 1.2 from Nilges and Linge, EMBL.       * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve>!set message on echo on end 
 CNSsolve> 
 CNSsolve>display STARTing mini_tensor_para.cns 
 CNSsolve> 
 CNSsolve>!write coordinates sele=(resn XAN) output="trial.pdb" end 
 CNSsolve> 
 CNSsolve> 
 CNSsolve>{* minimize tensor position *} 
 CNSsolve>display STARTing minimization of OO-LA distance 
 CNSsolve> 
 CNSsolve>!flag excl * include noe end 
 CNSsolve>flag excl xpcs include noe end 
 CNSsolve>fix sele=(not resn XAN) end 
 CNSsolve> 
 CNSsolve> 
 CNSsolve>igroup 
 CNSsolve>  interaction (not all) (not all) 
 CNSsolve>end 
 CNSsolve> 
 CNSsolve> 
 CNSsolve>minimize rigid 
 CNSsolve>  group (resname XAN) 
 CNSsolve>  translation=true 
 CNSsolve>  nstep 1000 
 CNSsolve>  tole 0.1 
 CNSsolve>  nprint 10 
 CNSsolve>end 
 CNSsolve> 
 CNSsolve>!write coordinates sele=(resn XAN) output="position.pdb" end 
 CNSsolve> 
 CNSsolve>display ENDing minimization of OO-LA distance 
 CNSsolve> 
 CNSsolve>display STARTing minimization of orientation 
 CNSsolve> 
 CNSsolve>{* minimize tensor orientation *} 
 CNSsolve> 
 CNSsolve>evaluate ($protocol = 0) 
 CNSsolve> 
 CNSsolve> 
 CNSsolve>if ($protocol = 0) then {* powell minimization protocol together *} 
 CNSsolve> 
 CNSsolve>  display protocol 0 
 CNSsolve>!  flag excl * include noe xpcs bond end 
 CNSsolve>  flag  include noe xpcs bond end 
 CNSsolve> 
 CNSsolve>  igroup 
 CNSsolve>    interaction (not all) (not all) 
 CNSsolve>    interaction ( resn XAN ) ( resn XAN ) weight * 0 bond 1.0 end 
 CNSsolve>  end 
 CNSsolve> 
 CNSsolve>  fix sele=(not (resn XAN)) end 
 CNSsolve> 
 CNSsolve>  minimize powell 
 CNSsolve>    nstep=5000 
 CNSsolve>    drop=10 
 CNSsolve>    nprint=10 
 CNSsolve>    tolgradient=0.01 
 CNSsolve>  end 
 CNSsolve>elseif ($protocol = 1) then {* powell minimization protocol *} 
 CNSsolve> 
 CNSsolve>  display protocol 1 
 CNSsolve>  flag excl * include noe xpcs bond end 
 CNSsolve> 
 CNSsolve>  for $id in id (resn XAN and name OO) loop miniani 
 CNSsolve>    igroup 
 CNSsolve>      interaction (not all) (not all) 
 CNSsolve>      interaction ( (byres(id $id)) ) ( (byres(id $id)) ) weight * 0 bond 1.0 end 
 CNSsolve>    end 
 CNSsolve> 
 CNSsolve>    fix sele=(not ( (byres(id $id)) )) end 
 CNSsolve> 
 CNSsolve>    minimize powell 
 CNSsolve>      nstep=500 
 CNSsolve>      drop=10 
 CNSsolve>      nprint=10 
 CNSsolve>      tolgradient=0.01 
 CNSsolve>    end 
 CNSsolve>  end loop miniani 
 CNSsolve> 
 CNSsolve>elseif ($protocol = 4) then {* powell minimization protocol simultaneously *} 
 CNSsolve> 
 CNSsolve>  display protocol 4 
 CNSsolve>  flag excl * include noe xpcs end 
 CNSsolve> 
 CNSsolve>  fix sele=(not ( resname XAN )) end 
 CNSsolve> 
 CNSsolve>  minimize powell 
 CNSsolve>    nstep=5000 
 CNSsolve>    drop=10 
 CNSsolve>    nprint=10 
 CNSsolve>    tolgradient=0.01 
 CNSsolve>  end 
 CNSsolve> 
 CNSsolve>elseif ($protocol = 2) then  {* rigid body minimization protocol *} 
 CNSsolve> 
 CNSsolve>  display protocol 2 
 CNSsolve>  flag excl * include noe xpcs end 
 CNSsolve>  for $id in id (resn XAN and name OO) loop miniani 
 CNSsolve>    minimize rigid 
 CNSsolve>      group (byres(id $id)) 
 CNSsolve>      translation=true 
 CNSsolve>      nstep 500 
 CNSsolve>      nprint 10 
 CNSsolve>      drop=10 
 CNSsolve>    end 
 CNSsolve>  end loop miniani 
 CNSsolve> 
 CNSsolve>elseif ($protocol = 3) then {* original rigid body minimization protocol *} 
 CNSsolve>  display protocol 3 
 CNSsolve>  flag excl * include noe xpcs end 
 CNSsolve>  fix sele=(not resname XAN) end 
 CNSsolve>  minimize rigid 
 CNSsolve>    group (not resname XAN) 
 CNSsolve>    translation=true 
 CNSsolve>    for $id in id (resn XAN and name OO) loop miniani 
 CNSsolve>      group (byres(id $id)) 
 CNSsolve>      translation=true 
 CNSsolve>    end loop miniani 
 CNSsolve>    translation=true 
 CNSsolve>    nstep 5000 
 CNSsolve> 
 CNSsolve>    nprint 10 
 CNSsolve>  end 
 CNSsolve>  display XPCS_ENERGY $xpcs 
 CNSsolve>  fix sele=(not all) end 
 CNSsolve> 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>fix sele=(not all) end 
 CNSsolve> 
 CNSsolve>!xpcs print thresh=0.0 class pcs1 end 
 CNSsolve>!xpcs print thresh=0.0 class pcs2 end 
 CNSsolve>!xpcs print thresh=0.0 class pcs3 end 
 CNSsolve>!xpcs print thresh=0.0 class pcs4 end 
 CNSsolve>!xpcs print thresh=0.0 class pcs5 end 
 CNSsolve>!xpcs print thresh=0.0 class pcs6 end 
 CNSsolve>!xpcs print thresh=0.0 class pcs7 end 
 CNSsolve>!xpcs print thresh=0.0 class pcs8 end 
 CNSsolve>!xpcs print thresh=0.0 class pcs9 end 
 CNSsolve>!xpcs print thresh=0.0 class pcsA end 
 CNSsolve> 
 CNSsolve>!write coordinates sele=(resn XAN) output="min.pdb" end 
 CNSsolve> 
 CNSsolve>display ENDing minimization of orientation 
 CNSsolve>      end if 
 CNSsolve>    end if 
 CNSsolve> 
 CNSsolve>    if ($Data.flags.dani eq true) then 
 NEXTCD: condition evaluated as false
 CNSsolve>      dani class dan1 force $Data.dan1_hot end 
 CNSsolve>      dani class dan2 force $Data.dan2_hot end 
 CNSsolve>      dani class dan3 force $Data.dan3_hot end 
 CNSsolve>      dani class dan4 force $Data.dan4_hot end 
 CNSsolve>      dani class dan5 force $Data.dan5_hot end 
 CNSsolve>      if ($rantens_dani eq true) then 
 CNSsolve>        @RUN:protocols/mini_tensor_dani.cns 
 ASSFIL: file mini_tensor_dani.cns opened.
 CNSsolve>! mini_tensor_dani.cns 
 CNSsolve>!    Optimize the tensor orientation for diffusion anisotropy restraints 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * Originally adapted from Aria 1.2 from Nilges and Linge, EMBL.       * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve>{* Optimize tensor orientation *} 
 CNSsolve>{* ADJ van Dijk*} 
 CNSsolve>{* copied from mini_tensor.cns *} 
 CNSsolve> 
 CNSsolve>{* first randomize the tensor orientation because of some CNS problems *} 
 CNSsolve>{* possible resulting in infinite gradient and a failure of the EM     *} 
 CNSsolve> 
 CNSsolve>eval ($edani = 999999999.0) 
 CNSsolve>eval ($ncount = 0) 
 CNSsolve>while ($ncount < 4) loop trial 
 CNSsolve>  eval ($ncount = $ncount + 1) 
 CNSsolve>  do (xcomp = x) (resn DAN) 
 CNSsolve>  do (ycomp = y) (resn DAN) 
 CNSsolve>  do (zcomp = z) (resn DAN) 
 CNSsolve> 
 CNSsolve>  !random rotation of tensor 
 CNSsolve> 
 CNSsolve>  show aver (x) (resn DAN) 
 CNSsolve>  evaluate ($xc = $result) 
 CNSsolve>  show aver (y) (resn DAN) 
 CNSsolve>  evaluate ($yc = $result) 
 CNSsolve>  show aver (z) (resn DAN) 
 CNSsolve>  evaluate ($zc = $result) 
 CNSsolve> 
 CNSsolve>  evaluate ($xr = ran ()) 
 CNSsolve>  {* rotate around z axis *} 
 CNSsolve>  evaluate ($xr = $xr * 360) 
 CNSsolve>  evaluate ($x1 = cos($xr)) 
 CNSsolve>  evaluate ($x2 = -sin($xr)) 
 CNSsolve>  evaluate ($x3 = 0 ) 
 CNSsolve>  evaluate ($y1 = sin($xr)) 
 CNSsolve>  evaluate ($y2 = cos($xr)) 
 CNSsolve>  evaluate ($y3 = 0 ) 
 CNSsolve>  evaluate ($z1 = 0 ) 
 CNSsolve>  evaluate ($z2 = 0 ) 
 CNSsolve>  evaluate ($z3 = 1 ) 
 CNSsolve>  coor 
 CNSsolve>    center=($xc $yc $zc) 
 CNSsolve>    rotate matrix=($x1 $x2 $x3) ($y1 $y2 $y3) ($z1 $z2 $z3) 
 CNSsolve>    sele=(resn DAN) 
 CNSsolve>  end 
 CNSsolve> 
 CNSsolve>  {* rotate around x axis *} 
 CNSsolve>  evaluate ($xr = ran ()) 
 CNSsolve>  evaluate ($xr = $xr * 360) 
 CNSsolve>  evaluate ($x1 = 1 ) 
 CNSsolve>  evaluate ($x2 = 0 ) 
 CNSsolve>  evaluate ($x3 = 0 ) 
 CNSsolve>  evaluate ($y1 = 0 ) 
 CNSsolve>  evaluate ($y2 = cos($xr)) 
 CNSsolve>  evaluate ($y3 = -sin($xr)) 
 CNSsolve>  evaluate ($z1 = 0 ) 
 CNSsolve>  evaluate ($z2 = sin($xr)) 
 CNSsolve>  evaluate ($z3 = cos($xr)) 
 CNSsolve>  coor 
 CNSsolve>    center=($xc $yc $zc) 
 CNSsolve>    rotate matrix=($x1 $x2 $x3) ($y1 $y2 $y3) ($z1 $z2 $z3) 
 CNSsolve>    sele=(resn DAN) 
 CNSsolve>  end 
 CNSsolve>  {* rotate around y axis *} 
 CNSsolve>  evaluate ($xr = ran ()) 
 CNSsolve>  evaluate ($xr = $xr * 360) 
 CNSsolve>  evaluate ($x1 = cos($xr)) 
 CNSsolve>  evaluate ($x2 = 0 ) 
 CNSsolve>  evaluate ($x3 = -sin($xr)) 
 CNSsolve>  evaluate ($y1 = 0 ) 
 CNSsolve>  evaluate ($y2 = 1 ) 
 CNSsolve>  evaluate ($y3 = 0 ) 
 CNSsolve>  evaluate ($z1 = sin($xr)) 
 CNSsolve>  evaluate ($z2 = 0 ) 
 CNSsolve>  evaluate ($z3 = cos($xr)) 
 CNSsolve>  coor 
 CNSsolve>    center=($xc $yc $zc) 
 CNSsolve>    rotate matrix=($x1 $x2 $x3) ($y1 $y2 $y3) ($z1 $z2 $z3) 
 CNSsolve>    sele=(resn DAN) 
 CNSsolve>  end 
 CNSsolve> 
 CNSsolve>  energy end 
 CNSsolve> 
 CNSsolve>  if ($ncount = 1) then 
 CNSsolve>    eval ($edani=$dani) 
 CNSsolve>  end if 
 CNSsolve>  if ($dani < $edani) then 
 CNSsolve>    eval ($edani=$dani) 
 CNSsolve>    do (xcomp = x) (resn DAN) 
 CNSsolve>    do (ycomp = y) (resn DAN) 
 CNSsolve>    do (zcomp = z) (resn DAN) 
 CNSsolve>  else 
 CNSsolve>    do (x = xcomp) (resn DAN) 
 CNSsolve>    do (y = ycomp) (resn DAN) 
 CNSsolve>    do (z = zcomp) (resn DAN) 
 CNSsolve>  end if 
 CNSsolve> 
 CNSsolve>end loop trial 
 CNSsolve> 
 CNSsolve>fix sele=(not all) end 
 CNSsolve>fix sele=(name OO) end 
 CNSsolve>minimize rigid 
 CNSsolve>  group (not resn DAN) 
 CNSsolve>  translation=false 
 CNSsolve>  for $id in id (resn DAN and name OO) loop minidan 
 CNSsolve>    group (byres(id $id)) 
 CNSsolve>    translation=false 
 CNSsolve>  end loop minidan 
 CNSsolve>  nstep 500 
 CNSsolve>  nprint 10 
 CNSsolve>end 
 CNSsolve>minimize rigid 
 CNSsolve>  eval($nchain1= 1) 
 CNSsolve>  while ($nchain1 <= $data.ncomponents) loop cloop1 
 CNSsolve>    group (segid $Toppar.prot_segid_$nchain1) 
 CNSsolve>    eval($nchain1 = $nchain1 + 1) 
 CNSsolve>    translation=false 
 CNSsolve>  end loop cloop1 
 CNSsolve>  for $id in id (resn DAN and name OO) loop minidan 
 CNSsolve>    group (byres(id $id)) 
 CNSsolve>    translation=false 
 CNSsolve>  end loop minidan 
 CNSsolve>  nstep 500 
 CNSsolve>  nprint 10 
 CNSsolve>end 
 CNSsolve> 
 CNSsolve>      end if 
 CNSsolve>    end if 
 CNSsolve> 
 CNSsolve>    do (refx=x) (all) 
 SELRPN:   2978 atoms have been selected out of   2978
 CNSsolve>    do (refy=y) (all) 
 SELRPN:   2978 atoms have been selected out of   2978
 CNSsolve>    do (refz=z) (all) 
 SELRPN:   2978 atoms have been selected out of   2978
 CNSsolve> 
 CNSsolve>    energy end 
 NBONDS: generating intra-molecular exclusion list with mode= 5
 MAKINB: mode   5 found      0 exclusions and      0 interactions(1-4)
 NBONDS: found     4662 intra-atom interactions
 NBONDS: generating intra-molecular exclusion list with mode= 5
 MAKINB: mode   5 found      0 exclusions and      0 interactions(1-4)
 NBONDS: found        0 intra-atom interactions
 NBONDS: generating intra-molecular exclusion list with mode= 5
 MAKINB: mode   5 found      0 exclusions and      0 interactions(1-4)
 NBONDS: found        0 intra-atom interactions
 NBONDS: generating intra-molecular exclusion list with mode= 5
 MAKINB: mode   5 found      0 exclusions and      0 interactions(1-4)
 NBONDS: found        0 intra-atom interactions
 --------------- cycle=     1 --------------------------------------------------
 | Etotal =-5.819     grad(E)=0.191      E(VDW )=-32.262    E(ELEC)=-6.186     |
 | E(NOE )=32.629                                                              |
 -------------------------------------------------------------------------------
 CNSsolve>    evaluate ($bestair = $noe) 
 EVALUATE: symbol $BESTAIR set to    32.6287     (real)
 CNSsolve> 
 CNSsolve>  end if 
 CNSsolve> 
 CNSsolve>{* =========================== write out structure after rigid body refinement *} 
 CNSsolve> 
 CNSsolve>  !bestener.cns: for waterdock, store3 contains store5 from lowest energy structure 
 CNSsolve>  do (x = refx) (not store3) 
 SELRPN: Store empty. No atoms selected.
 SELRPN:   2978 atoms have been selected out of   2978
 CNSsolve>  do (y = refy) (not store3) 
 SELRPN: Store empty. No atoms selected.
 SELRPN:   2978 atoms have been selected out of   2978
 CNSsolve>  do (z = refz) (not store3) 
 SELRPN: Store empty. No atoms selected.
 SELRPN:   2978 atoms have been selected out of   2978
 CNSsolve>  if ($data.waterdock eq true) then 
 NEXTCD: condition evaluated as false
 CNSsolve>    if ($data.solvate_method eq "restraints") then 
 CNSsolve>      noe reset end 
 CNSsolve>      @RUN:protocols/read_noes.cns(Iteration=$Iteration; Data=$Data; count=$count) 
 ASSFIL: file read_noes.cns opened.
 CNSsolve>! read_noes.cns 
 CNSsolve>!    Read distance restraints 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * Originally adapted from Aria 1.2 from Nilges and Linge, EMBL.       * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve> 
 CNSsolve>module(Iteration; Data; count;) 
 CNSsolve> 
 CNSsolve>!NOEs, hbonds 
 CNSsolve>noe 
 CNSsolve>  reset 
 CNSsolve>  nrestraints = 4000000     ! allocate space for NOEs 
 CNSsolve>  ceiling 1000 
 CNSsolve>end 
 CNSsolve> 
 CNSsolve>display reading NEWIT:unambig.tbl in iteration &iteration with option &data.unamb_firstit 
 CNSsolve> 
 CNSsolve> 
 CNSsolve>if (&data.amb_firstit le &iteration)   then 
 CNSsolve>     evaluate ($filenam0 = "NEWIT:ambig.tbl_" + encode($count)) 
 CNSsolve>     fileexist $filenam0 end 
 CNSsolve>     if ($result eq false) then 
 CNSsolve>       evaluate ($filenam0 = "NEWIT:ambig.tbl") 
 CNSsolve>     end if 
 CNSsolve>     noe class ambi @@$filenam0 end 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if (&data.unamb_firstit le &iteration) then 
 CNSsolve>     noe class dist @@NEWIT:unambig.tbl end 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if (&data.hbond_firstit le &iteration) then 
 CNSsolve>   if (&data.hbonds_on eq true) then 
 CNSsolve>      noe @@RUN:data/hbonds/hbonds.tbl end 
 CNSsolve>   end if 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>noe 
 CNSsolve>  averaging  * sum 
 CNSsolve>  potential  * soft 
 CNSsolve>  scale      * 1.0 
 CNSsolve>  sqconstant * 1.0 
 CNSsolve>  sqexponent * 2 
 CNSsolve>  soexponent * 1 
 CNSsolve>  rswitch    * 1.0 
 CNSsolve>  sqoffset   * 0.0 
 CNSsolve>  asymptote  * 2.0 
 CNSsolve>  msoexponent * 1 
 CNSsolve>  masymptote  * -0.1 
 CNSsolve>  mrswitch    * 1.0 
 CNSsolve>  avexpo hbond 20 
 CNSsolve>end 
 CNSsolve> 
 CNSsolve>if (&data.waterdock eq true) then 
 CNSsolve> if (&iteration eq 0) then 
 CNSsolve>  if (&data.solvate_method eq "restraints") then 
 CNSsolve>   evaluate ($nchain=0) 
 CNSsolve>   while ($nchain < &data.ncomponents) loop nloop1 
 CNSsolve>    evaluate ($nchain = $nchain + 1) 
 CNSsolve>    evaluate ($watersegname_$nchain="WAT" + encode($nchain)) 
 CNSsolve>    noe class amwa end 
 CNSsolve>    for $atom_id in id ((resn WAT or resn HOH or resn TIP*) and name OH2 and segid $watersegname_$nchain and not store5) loop waterrestraint 
 CNSsolve>   noe 
 CNSsolve>    assi (segid $toppar.prot_segid_$nchain and (resn arg or resn glu or resn lys or resn asp or resn tyr) and ((id $atom_id) around &data.water_restraint_cutoff)) 
 CNSsolve>        (id $atom_id) &data.water_restraint_cutoff &data.water_restraint_cutoff 0.0 
 CNSsolve>   end 
 CNSsolve>  end loop waterrestraint 
 CNSsolve>   end loop nloop1 
 CNSsolve>  end if 
 CNSsolve> end if 
 CNSsolve>end if 
 CNSsolve>    end if 
 CNSsolve>  end if 
 CNSsolve> 
 CNSsolve>  evaluate ($esym = 0.0) 
 EVALUATE: symbol $ESYM set to    0.00000     (real)
 CNSsolve>  evaluate ($ncs = 0.0) 
 EVALUATE: symbol $NCS set to    0.00000     (real)
 CNSsolve>  evaluate ($rms_test_noe = 0.0) 
 EVALUATE: symbol $RMS_TEST_NOE set to    0.00000     (real)
 CNSsolve>  evaluate ($violations_test_noe = 0) 
 EVALUATE: symbol $VIOLATIONS_TEST_NOE set to    0.00000     (real)
 CNSsolve>  if ($Data.flags.sym eq true) then 
 NEXTCD: condition evaluated as false
 CNSsolve>    noe reset nres= 2000000 end 
 CNSsolve>    @RUN:protocols/symmultimer.cns 
 ASSFIL: file symmultimer.cns opened.
 CNSsolve>! symmultimer.cns 
 CNSsolve>!    Define symmetry restraints 
 CNSsolve>! 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           * 
 CNSsolve>! * Originally adapted from Aria 1.2 from Nilges and Linge, EMBL.       * 
 CNSsolve>! * All rights reserved.                                                * 
 CNSsolve>! * This code is part of the HADDOCK software and governed by its       * 
 CNSsolve>! * license. Please see the LICENSE file that should have been included * 
 CNSsolve>! * as part of this package.                                            * 
 CNSsolve>! *********************************************************************** 
 CNSsolve>! 
 CNSsolve>! Define NCS restraints for symmetrical multimers 
 CNSsolve>if ($Data.flags.ncs eq true) then 
 CNSsolve> 
 CNSsolve>  ncs restraints 
 CNSsolve>    initialize 
 CNSsolve>    eval ($ncount = 0) 
 CNSsolve>    while ($ncount < $data.numncs) loop ncsloop 
 CNSsolve>      eval ($ncount = $ncount + 1) 
 CNSsolve>      group 
 CNSsolve>        equi (not name H* and resid $Toppar.ncs_sta1_$ncount : $Toppar.ncs_end1_$ncount and segid $Toppar.ncs_seg1_$ncount) 
 CNSsolve>        equi (not name H* and resid $Toppar.ncs_sta2_$ncount : $Toppar.ncs_end2_$ncount and segid $Toppar.ncs_seg2_$ncount) 
 CNSsolve>	weight = $Data.kncs 
 CNSsolve>      end 
 CNSsolve>    end loop ncsloop 
 CNSsolve>    ? 
 CNSsolve>  end 
 CNSsolve> 
 CNSsolve>end if 
 CNSsolve> 
 CNSsolve>if ($Data.flags.sym eq true) then 
 CNSsolve> 
 CNSsolve>  noe class symm end 
 CNSsolve> 
 CNSsolve>! Define C2 symmetry restraints for symmetrical multimers 
 CNSsolve>! 
 CNSsolve>  eval ($ncount = 0) 
 CNSsolve>  while ($ncount < $data.numc2sym) loop c2symloop 
 CNSsolve> 
 CNSsolve>    eval ($ncount = $ncount + 1) 
 CNSsolve>    evaluate ($i1start = decode($Toppar.c2sym_sta1_$ncount)) 
 CNSsolve>    evaluate ($i1end   = decode($Toppar.c2sym_end1_$ncount)) 
 CNSsolve>    evaluate ($chain1  = $Toppar.c2sym_seg1_$ncount) 
 CNSsolve>    evaluate ($i2start = decode($Toppar.c2sym_sta2_$ncount)) 
 CNSsolve>    evaluate ($i2end   = decode($Toppar.c2sym_end2_$ncount)) 
 CNSsolve>    evaluate ($chain2  = $Toppar.c2sym_seg2_$ncount) 
 CNSsolve> 
 CNSsolve>    !first check that the chain lengths are equal for the two defined molecules 
 CNSsolve>    evaluate ($diff1 = $i1end - $i1start) 
 CNSsolve>    evaluate ($diff2 = $i2end - $i2start) 
 CNSsolve>    if ($diff1 ne $diff2) then 
 CNSsolve>      display CHAIN LENGHT FOR SYMMETRY RESTRAINTS DO NOT MATCH 
 CNSsolve>      display PLEASE CHECK CAREFULLY YOUR INPUT 
 CNSsolve>      display ... stopping ... 
 CNSsolve>      stop 
 CNSsolve>    end if 
 CNSsolve> 
 CNSsolve>    eval ($icount = 0) 
 CNSsolve>    while ($i1start < $i1end) loop genc2sym 
 CNSsolve> 
 CNSsolve>      evaluate ($resid1 = $i1start) 
 CNSsolve>      evaluate ($resid2 = $i2end - $icount) 
 CNSsolve>      evaluate ($resid3 = $i2start) 
 CNSsolve>      evaluate ($resid4 = $i1end - $icount) 
 CNSsolve> 
 CNSsolve>      noe 
 CNSsolve>	assign (resid $resid1 and (name CA or name P)  and segid $chain1) 
 CNSsolve>	       (resid $resid2 and (name CA or name P)  and segid $chain2) 0 0 0 
 CNSsolve>	assign (resid $resid3 and (name CA or name P)  and segid $chain2) 
 CNSsolve>	       (resid $resid4 and (name CA or name P)  and segid $chain1) 0 0 0 
 CNSsolve>      end 
 CNSsolve> 
 CNSsolve>      evaluate ($icount = $icount + 1) 
 CNSsolve>      evaluate ($i1start = $i1start + 1) 
 CNSsolve>      evaluate ($i2start = $i2start + 1) 
 CNSsolve> 
 CNSsolve>    end loop genc2sym 
 CNSsolve> 
 CNSsolve>  end loop c2symloop 
 CNSsolve> 
 CNSsolve> 
 CNSsolve>! Define C3 symmetry restraints for symmetrical multimers 
 CNSsolve>! 
 CNSsolve> 
 CNSsolve>  eval ($ncount = 0) 
 CNSsolve>  while ($ncount < $data.numc3sym) loop c3symloop 
 CNSsolve> 
 CNSsolve>    eval ($ncount = $ncount + 1) 
 CNSsolve>    evaluate ($i1start = decode($Toppar.c3sym_sta1_$ncount)) 
 CNSsolve>    evaluate ($i1end   = decode($Toppar.c3sym_end1_$ncount)) 
 CNSsolve>    evaluate ($chain1  = $Toppar.c3sym_seg1_$ncount) 
 CNSsolve>    evaluate ($i2start = decode($Toppar.c3sym_sta2_$ncount)) 
 CNSsolve>    evaluate ($i2end   = decode($Toppar.c3sym_end2_$ncount)) 
 CNSsolve>    evaluate ($chain2  = $Toppar.c3sym_seg2_$ncount) 
 CNSsolve>    evaluate ($i3start = decode($Toppar.c3sym_sta3_$ncount)) 
 CNSsolve>    evaluate ($i3end   = decode($Toppar.c3sym_end3_$ncount)) 
 CNSsolve>    evaluate ($chain3  = $Toppar.c3sym_seg3_$ncount) 
 CNSsolve> 
 CNSsolve>    !first check that the chain lengths are equal for the two defined molecules 
 CNSsolve>    evaluate ($diff1 = $i1end - $i1start) 
 CNSsolve>    evaluate ($diff2 = $i2end - $i2start) 
 CNSsolve>    evaluate ($diff3 = $i3end - $i3start) 
 CNSsolve>    if ($diff1 ne $diff2) then 
 CNSsolve>      display CHAIN LENGHT FOR SYMMETRY RESTRAINTS DO NOT MATCH 
 CNSsolve>      display PLEASE CHECK CAREFULLY YOUR INPUT 
 CNSsolve>      display ... stopping ... 
 CNSsolve>      stop 
 CNSsolve>    end if 
 CNSsolve>    if ($diff1 ne $diff3) then 
 CNSsolve>      display CHAIN LENGHT FOR SYMMETRY RESTRAINTS DO NOT MATCH 
 CNSsolve>      display PLEASE CHECK CAREFULLY YOUR INPUT 
 CNSsolve>      display ... stopping ... 
 CNSsolve>      stop 
 CNSsolve>    end if 
 CNSsolve>    if ($diff2 ne $diff3) then 
 CNSsolve>      display CHAIN LENGHT FOR SYMMETRY RESTRAINTS DO NOT MATCH 
 CNSsolve>      display PLEASE CHECK CAREFULLY YOUR INPUT 
 CNSsolve>      display ... stopping ... 
 CNSsolve>      stop 
 CNSsolve>    end if 
 CNSsolve> 
 CNSsolve>    eval ($icount = 0) 
 CNSsolve>    while ($i1start < $i1end) loop genc3sym 
 CNSsolve> 
 CNSsolve>      evaluate ($resst1 = $i1start) 
 CNSsolve>      evaluate ($resst2 = $i2start) 
 CNSsolve>      evaluate ($resst3 = $i3start) 
 CNSsolve>      evaluate ($resen1 = $i1end - $icount) 
 CNSsolve>      evaluate ($resen2 = $i2end - $icount) 
 CNSsolve>      evaluate ($resen3 = $i3end - $icount) 
 CNSsolve> 
 CNSsolve>      noe 
 CNSsolve> 
 CNSsolve>         assign (resid $resst1 and (name CA or name P)  and segid $chain1) 
 CNSsolve>                (resid $resen2 and (name CA or name P)  and segid $chain2) 0 0 0 
 CNSsolve>         assign (resid $resst2 and (name CA or name P)  and segid $chain2) 
 CNSsolve>                (resid $resen3 and (name CA or name P)  and segid $chain3) 0 0 0 
 CNSsolve> 
 CNSsolve>         assign (resid $resst2 and (name CA or name P)  and segid $chain2) 
 CNSsolve>                (resid $resen3 and (name CA or name P)  and segid $chain3) 0 0 0 
 CNSsolve>         assign (resid $resst3 and (name CA or name P)  and segid $chain3) 
 CNSsolve>                (resid $resen1 and (name CA or name P)  and segid $chain1) 0 0 0 
 CNSsolve> 
 CNSsolve>         assign (resid $resst3 and (name CA or name P)  and segid $chain3) 
 CNSsolve>                (resid $resen1 and (name CA or name P)  and segid $chain1) 0 0 0 
 CNSsolve>         assign (resid $resst1 and (name CA or name P)  and segid $chain1) 
 CNSsolve>                (resid $resen2 and (name CA or name P)  and segid $chain2) 0 0 0 
 CNSsolve> 
 CNSsolve>      end 
 CNSsolve> 
 CNSsolve>      evaluate ($icount = $icount + 2) 
 CNSsolve>      evaluate ($i1start = $i1start + 2) 
 CNSsolve>      evaluate ($i2start = $i2start + 2) 
 CNSsolve>      evaluate ($i3start = $i3start + 2) 
 CNSsolve> 
 CNSsolve>    end loop genc3sym 
 CNSsolve> 
 CNSsolve>  end loop c3symloop 
 CNSsolve> 
 CNSsolve>! Define S3 symmetry restraints for symmetrical multimers 
 CNSsolve>! 
 CNSsolve> 
 CNSsolve>  eval ($ncount = 0) 
 CNSsolve>  while ($ncount < $data.nums3sym) loop s3symloop 
 CNSsolve> 
 CNSsolve>    eval ($ncount = $ncount + 1) 
 CNSsolve>    evaluate ($i1start = decode($Toppar.s3sym_sta1_$ncount)) 
 CNSsolve>    evaluate ($i1end   = decode($Toppar.s3sym_end1_$ncount)) 
 CNSsolve>    evaluate ($chain1  = $Toppar.s3sym_seg1_$ncount) 
 CNSsolve>    evaluate ($i2start = decode($Toppar.s3sym_sta2_$ncount)) 
 CNSsolve>    evaluate ($i2end   = decode($Toppar.s3sym_end2_$ncount)) 
 CNSsolve>    evaluate ($chain2  = $Toppar.s3sym_seg2_$ncount) 
 CNSsolve>    evaluate ($i3start = decode($Toppar.s3sym_sta3_$ncount)) 
 CNSsolve>    evaluate ($i3end   = decode($Toppar.s3sym_end3_$ncount)) 
 CNSsolve>    evaluate ($chain3  = $Toppar.s3sym_seg3_$ncount) 
 CNSsolve> 
 CNSsolve>    !first check that the chain lengths are equal for the two defined molecules 
 CNSsolve>    evaluate ($diff1 = $i1end - $i1start) 
 CNSsolve>    evaluate ($diff2 = $i2end - $i2start) 
 CNSsolve>    evaluate ($diff3 = $i3end - $i3start) 
 CNSsolve>    if ($diff1 ne $diff2) then 
 CNSsolve>      display CHAIN LENGHT FOR SYMMETRY RESTRAINTS DO NOT MATCH 
 CNSsolve>      display PLEASE CHECK CAREFULLY YOUR INPUT 
 CNSsolve>      display ... stopping ... 
 CNSsolve>      stop 
 CNSsolve>    end if 
 CNSsolve>    if ($diff1 ne $diff3) then 
 CNSsolve>      display CHAIN LENGHT FOR SYMMETRY RESTRAINTS DO NOT MATCH 
 CNSsolve>      display PLEASE CHECK CAREFULLY YOUR INPUT 
 CNSsolve>      display ... stopping ... 
 CNSsolve>      stop 
 CNSsolve>    end if 
 CNSsolve>    if ($diff2 ne $diff3) then 
 CNSsolve>      display CHAIN LENGHT FOR SYMMETRY RESTRAINTS DO NOT MATCH 
 CNSsolve>      display PLEASE CHECK CAREFULLY YOUR INPUT 
 CNSsolve>      display ... stopping ... 
 CNSsolve>      stop 
 CNSsolve>    end if 
 CNSsolve> 
 CNSsolve>    eval ($icount = 0) 
 CNSsolve>    eval ($istep = 4) 
 CNSsolve>    eval ($istop = $i1end - $istep) 
 CNSsolve>    while ($i1start < $istop) loop gens3sym 
 CNSsolve> 
 CNSsolve>      evaluate ($resst11 = $i1start) 
 CNSsolve>      evaluate ($resst21 = $i1start+1) 
 CNSsolve>      evaluate ($resst12 = $i2start) 
 CNSsolve>      evaluate ($resst22 = $i2start+1) 
 CNSsolve>      evaluate ($resst13 = $i3start) 
 CNSsolve>      evaluate ($resst23 = $i3start+1) 
 CNSsolve> 
 CNSsolve> 
 CNSsolve>      noe 
 CNSsolve> 
 CNSsolve>!         assign (resid $resst11 and (name CA or name P)  and segid $chain1) 
 CNSsolve>!                (resid $resst12 and (name CA or name P)  and segid $chain2) 0 0 0 
 CNSsolve>!         assign (resid $resst21 and (name CA or name P)  and segid $chain1) 
 CNSsolve>!                (resid $resst22 and (name CA or name P)  and segid $chain2) 0 0 0 
 CNSsolve>! 
 CNSsolve>!         assign (resid $resst12 and (name CA or name P)  and segid $chain2) 
 CNSsolve>!                (resid $resst13 and (name CA or name P)  and segid $chain3) 0 0 0 
 CNSsolve>!         assign (resid $resst22 and (name CA or name P)  and segid $chain2) 
 CNSsolve>!                (resid $resst23 and (name CA or name P)  and segid $chain3) 0 0 0 
 CNSsolve> 
 CNSsolve>         assign (resid $resst11 and (name CA or name P)  and segid $chain1) 
 CNSsolve>                (resid $resst12 and (name CA or name P)  and segid $chain2) 0 0 0 
 CNSsolve>         assign (resid $resst12 and (name CA or name P)  and segid $chain2) 
 CNSsolve>                (resid $resst13 and (name CA or name P)  and segid $chain3) 0 0 0 
 CNSsolve> 
 CNSsolve>         assign (resid $resst21 and (name CA or name P)  and segid $chain1) 
 CNSsolve>                (resid $resst22 and (name CA or name P)  and segid $chain2) 0 0 0 
 CNSsolve>         assign (resid $resst22 and (name CA or name P)  and segid $chain2) 
 CNSsolve>                (resid $resst23 and (name CA or name P)  and segid $chain3) 0 0 0 
 CNSsolve> 
 CNSsolve>      end 
 CNSsolve> 
 CNSsolve>      evaluate ($icount = $icount + $istep) 
 CNSsolve>      evaluate ($i1start = $i1start + $istep) 
 CNSsolve>      evaluate ($i2start = $i2start + $istep) 
 CNSsolve>      evaluate ($i3start = $i3start + $istep) 
 CNSsolve> 
 CNSsolve>    end loop gens3sym 
 CNSsolve> 
 CNSsolve>  end loop s3symloop 
 CNSsolve> 
 CNSsolve> 
 CNSsolve>! Define C4 symmetry restraints for symmetrical multimers 
 CNSsolve>! 
 CNSsolve> 
 CNSsolve>  eval ($istep = 10) 
 CNSsolve>  eval ($ncount = 0) 
 CNSsolve>  while ($ncount < $data.numc4sym) loop c4symloop 
 CNSsolve> 
 CNSsolve>    eval ($ncount = $ncount + 1) 
 CNSsolve>    evaluate ($i1start = decode($Toppar.c4sym_sta1_$ncount)) 
 CNSsolve>    evaluate ($i1end   = decode($Toppar.c4sym_end1_$ncount)) 
 CNSsolve>    evaluate ($chain1  = $Toppar.c4sym_seg1_$ncount) 
 CNSsolve>    evaluate ($i2start = decode($Toppar.c4sym_sta2_$ncount)) 
 CNSsolve>    evaluate ($i2end   = decode($Toppar.c4sym_end2_$ncount)) 
 CNSsolve>    evaluate ($chain2  = $Toppar.c4sym_seg2_$ncount) 
 CNSsolve>    evaluate ($i3start = decode($Toppar.c4sym_sta3_$ncount)) 
 CNSsolve>    evaluate ($i3end   = decode($Toppar.c4sym_end3_$ncount)) 
 CNSsolve>    evaluate ($chain3  = $Toppar.c4sym_seg3_$ncount) 
 CNSsolve>    evaluate ($i4start = decode($Toppar.c4sym_sta4_$ncount)) 
 CNSsolve>    evaluate ($i4end   = decode($Toppar.c4sym_end4_$ncount)) 
 CNSsolve>    evaluate ($chain4  = $Toppar.c4sym_seg4_$ncount) 
 CNSsolve> 
 CNSsolve>    !first check that the chain lengths are equal for the four defined molecules 
 CNSsolve>    evaluate ($diff1 = $i1end - $i1start) 
 CNSsolve>    evaluate ($diff2 = $i2end - $i2start) 
 CNSsolve>    evaluate ($diff3 = $i3end - $i3start) 
 CNSsolve>    evaluate ($diff4 = $i4end - $i4start) 
 CNSsolve>    if ($diff1 ne $diff2) then 
 CNSsolve>      display CHAIN LENGHT FOR SYMMETRY RESTRAINTS DO NOT MATCH 
 CNSsolve>      display PLEASE CHECK CAREFULLY YOUR INPUT 
 CNSsolve>      display ... stopping ... 
 CNSsolve>      stop 
 CNSsolve>    end if 
 CNSsolve>    if ($diff1 ne $diff3) then 
 CNSsolve>      display CHAIN LENGHT FOR SYMMETRY RESTRAINTS DO NOT MATCH 
 CNSsolve>      display PLEASE CHECK CAREFULLY YOUR INPUT 
 CNSsolve>      display ... stopping ... 
 CNSsolve>      stop 
 CNSsolve>    end if 
 CNSsolve>    if ($diff1 ne $diff4) then 
 CNSsolve>      display CHAIN LENGHT FOR SYMMETRY RESTRAINTS DO NOT MATCH 
 CNSsolve>      display PLEASE CHECK CAREFULLY YOUR INPUT 
 CNSsolve>      display ... stopping ... 
 CNSsolve>      stop 
 CNSsolve>    end if 
 CNSsolve>    if ($diff2 ne $diff3) then 
 CNSsolve>      display CHAIN LENGHT FOR SYMMETRY RESTRAINTS DO NOT MATCH 
 CNSsolve>      display PLEASE CHECK CAREFULLY YOUR INPUT 
 CNSsolve>      display ... stopping ... 
 CNSsolve>      stop 
 CNSsolve>    end if 
 CNSsolve>    if ($diff2 ne $diff4) then 
 CNSsolve>      display CHAIN LENGHT FOR SYMMETRY RESTRAINTS DO NOT MATCH 
 CNSsolve>      display PLEASE CHECK CAREFULLY YOUR INPUT 
 CNSsolve>      display ... stopping ... 
 CNSsolve>      stop 
 CNSsolve>    end if 
 CNSsolve>    if ($diff3 ne $diff4) then 
 CNSsolve>      display CHAIN LENGHT FOR SYMMETRY RESTRAINTS DO NOT MATCH 
 CNSsolve>      display PLEASE CHECK CAREFULLY YOUR INPUT 
 CNSsolve>      display ... stopping ... 
 CNSsolve>      stop 
 CNSsolve>    end if 
 CNSsolve> 
 CNSsolve>    eval ($icount = 0) 
 CNSsolve>    while ($i1start < $i1end) loop genc4sym 
 CNSsolve> 
 CNSsolve>      evaluate ($resst1 = $i1start) 
 CNSsolve>      evaluate ($resst2 = $i2start) 
 CNSsolve>      evaluate ($resst3 = $i3start) 
 CNSsolve>      evaluate ($resst4 = $i4start) 
 CNSsolve>      evaluate ($resen1 = $i1end - $icount) 
 CNSsolve>      evaluate ($resen2 = $i2end - $icount) 
 CNSsolve>      evaluate ($resen3 = $i3end - $icount) 
 CNSsolve>      evaluate ($resen4 = $i4end - $icount) 
 CNSsolve> 
 CNSsolve>      noe 
 CNSsolve>		 
 CNSsolve>		! N to N sequential restraints to prevent anti-parallel arrangements 
 CNSsolve>         assign (resid $resst1 and (name CA or name P)  and segid $chain1) 
 CNSsolve>                (resid $resst2 and (name CA or name P)  and segid $chain2) 0 0 0 
 CNSsolve>         assign (resid $resst2 and (name CA or name P)  and segid $chain2) 
 CNSsolve>                (resid $resst3 and (name CA or name P)  and segid $chain3) 0 0 0 
 CNSsolve> 
 CNSsolve>         assign (resid $resst2 and (name CA or name P)  and segid $chain2) 
 CNSsolve>                (resid $resst3 and (name CA or name P)  and segid $chain3) 0 0 0 
 CNSsolve>         assign (resid $resst3 and (name CA or name P)  and segid $chain3) 
 CNSsolve>                (resid $resst4 and (name CA or name P)  and segid $chain4) 0 0 0 
 CNSsolve> 
 CNSsolve>         assign (resid $resst3 and (name CA or name P)  and segid $chain3) 
 CNSsolve>                (resid $resst4 and (name CA or name P)  and segid $chain4) 0 0 0 
 CNSsolve>         assign (resid $resst4 and (name CA or name P)  and segid $chain4) 
 CNSsolve>                (resid $resst1 and (name CA or name P)  and segid $chain1) 0 0 0 
 CNSsolve> 
 CNSsolve>         assign (resid $resst4 and (name CA or name P)  and segid $chain4) 
 CNSsolve>                (resid $resst1 and (name CA or name P)  and segid $chain1) 0 0 0 
 CNSsolve>         assign (resid $resst1 and (name CA or name P)  and segid $chain1) 
 CNSsolve>                (resid $resst2 and (name CA or name P)  and segid $chain2) 0 0 0 
 CNSsolve>		 
 CNSsolve>		! N to C sequential restraints to assure planarity 
 CNSsolve>         assign (resid $resst1 and (name CA or name P)  and segid $chain1) 
 CNSsolve>                (resid $resen2 and (name CA or name P)  and segid $chain2) 0 0 0 
 CNSsolve>         assign (resid $resst2 and (name CA or name P)  and segid $chain2) 
 CNSsolve>                (resid $resen3 and (name CA or name P)  and segid $chain3) 0 0 0 
 CNSsolve> 
 CNSsolve>         assign (resid $resst2 and (name CA or name P)  and segid $chain2) 
 CNSsolve>                (resid $resen3 and (name CA or name P)  and segid $chain3) 0 0 0 
 CNSsolve>         assign (resid $resst3 and (name CA or name P)  and segid $chain3) 
 CNSsolve>                (resid $resen4 and (name CA or name P)  and segid $chain4) 0 0 0 
 CNSsolve> 
 CNSsolve>         assign (resid $resst3 and (name CA or name P)  and segid $chain3) 
 CNSsolve>                (resid $resen4 and (name CA or name P)  and segid $chain4) 0 0 0 
 CNSsolve>         assign (resid $resst4 and (name CA or name P)  and segid $chain4) 
 CNSsolve>                (resid $resen1 and (name CA or name P)  and segid $chain1) 0 0 0 
 CNSsolve> 
 CNSsolve>         assign (resid $resst4 and (name CA or name P)  and segid $chain4) 
 CNSsolve>                (resid $resen1 and (name CA or name P)  and segid $chain1) 0 0 0 
 CNSsolve>         assign (resid $resst1 and (name CA or name P)  and segid $chain1) 
 CNSsolve>                (resid $resen2 and (name CA or name P)  and segid $chain2) 0 0 0 
 CNSsolve>		 
 CNSsolve>	 assign (resid $resen1 and (name CA or name P)  and segid $chain1) 
 CNSsolve>                (resid $resst2 and (name CA or name P)  and segid $chain2) 0 0 0 
 CNSsolve>         assign (resid $resen2 and (name CA or name P)  and segid $chain2) 
 CNSsolve>                (resid $resst3 and (name CA or name P)  and segid $chain3) 0 0 0 
 CNSsolve> 
 CNSsolve>         assign (resid $resen2 and (name CA or name P)  and segid $chain2) 
 CNSsolve>                (resid $resst3 and (name CA or name P)  and segid $chain3) 0 0 0 
 CNSsolve>         assign (resid $resen3 and (name CA or name P)  and segid $chain3) 
 CNSsolve>                (resid $resst4 and (name CA or name P)  and segid $chain4) 0 0 0 
 CNSsolve> 
 CNSsolve>         assign (resid $resen3 and (name CA or name P)  and segid $chain3) 
 CNSsolve>                (resid $resst4 and (name CA or name P)  and segid $chain4) 0 0 0 
 CNSsolve>         assign (resid $resen4 and (name CA or name P)  and segid $chain4) 
 CNSsolve>                (resid $resst1 and (name CA or name P)  and segid $chain1) 0 0 0 
 CNSsolve> 
 CNSsolve>         assign (resid $resen4 and (name CA or name P)  and segid $chain4) 
 CNSsolve>                (resid $resst1 and (name CA or name P)  and segid $chain1) 0 0 0 
 CNSsolve>         assign (resid $resen1 and (name CA or name P)  and segid $chain1) 
 CNSsolve>                (resid $resst2 and (name CA or name P)  and segid $chain2) 0 0 0 
 CNSsolve> 
 CNSsolve>		! Cross restraints 
 CNSsolve>		{ 
 CNSsolve>         assign (resid $resst1 and (name CA or name P)  and segid $chain1) 
 CNSsolve>                (resid $resen3 and (name CA or name P)  and segid $chain3) 0 0 0 
 CNSsolve>         assign (resid $resst3 and (name CA or name P)  and segid $chain3) 
 CNSsolve>                (resid $resen1 and (name CA or name P)  and segid $chain1) 0 0 0 
 CNSsolve> 
 CNSsolve>         assign (resid $resst2 and (name CA or name P)  and segid $chain2) 
 CNSsolve>                (resid $resen4 and (name CA or name P)  and segid $chain4) 0 0 0 
 CNSsolve>         assign (resid $resst4 and (name CA or name P)  and segid $chain4) 
 CNSsolve>                (resid $resen2 and (name CA or name P)  and segid $chain2) 0 0 0 
 CNSsolve>		} 
 CNSsolve>      end 
 CNSsolve> 
 CNSsolve>      evaluate ($icount = $icount + $istep) 
 CNSsolve>      evaluate ($i1start = $i1start + $istep) 
 CNSsolve>      evaluate ($i2start = $i2start + $istep) 
 CNSsolve>      evaluate ($i3start = $i3start + $istep) 
 CNSsolve>      evaluate ($i4start = $i4start + $istep) 
 CNSsolve> 
 CNSsolve>    end loop genc4sym 
 CNSsolve> 
 CNSsolve>  end loop c4symloop 
 CNSsolve> 
 CNSsolve> 
 CNSsolve>! Define C5 symmetry restraints for symmetrical multimers 
 CNSsolve>! 
 CNSsolve>  eval ($istep = 4) 
 CNSsolve>  eval ($ncount = 0) 
 CNSsolve>  while ($ncount < $data.numc5sym) loop c5symloop 
 CNSsolve> 
 CNSsolve>    eval ($ncount = $ncount + 1) 
 CNSsolve>    evaluate ($i1start = decode($Toppar.c5sym_sta1_$ncount)) 
 CNSsolve>    evaluate ($i1end   = decode($Toppar.c5sym_end1_$ncount)) 
 CNSsolve>    evaluate ($chain1  = $Toppar.c5sym_seg1_$ncount) 
 CNSsolve>    evaluate ($i2start = decode($Toppar.c5sym_sta2_$ncount)) 
 CNSsolve>    evaluate ($i2end   = decode($Toppar.c5sym_end2_$ncount)) 
 CNSsolve>    evaluate ($chain2  = $Toppar.c5sym_seg2_$ncount) 
 CNSsolve>    evaluate ($i3start = decode($Toppar.c5sym_sta3_$ncount)) 
 CNSsolve>    evaluate ($i3end   = decode($Toppar.c5sym_end3_$ncount)) 
 CNSsolve>    evaluate ($chain3  = $Toppar.c5sym_seg3_$ncount) 
 CNSsolve>    evaluate ($i4start = decode($Toppar.c5sym_sta4_$ncount)) 
 CNSsolve>    evaluate ($i4end   = decode($Toppar.c5sym_end4_$ncount)) 
 CNSsolve>    evaluate ($chain4  = $Toppar.c5sym_seg4_$ncount) 
 CNSsolve>    evaluate ($i5start = decode($Toppar.c5sym_sta5_$ncount)) 
 CNSsolve>    evaluate ($i5end   = decode($Toppar.c5sym_end5_$ncount)) 
 CNSsolve>    evaluate ($chain5  = $Toppar.c5sym_seg5_$ncount) 
 CNSsolve> 
 CNSsolve>    !first check that the chain lengths are equal for the two defined molecules 
 CNSsolve>    evaluate ($diff1 = $i1end - $i1start) 
 CNSsolve>    evaluate ($diff2 = $i2end - $i2start) 
 CNSsolve>    evaluate ($diff3 = $i3end - $i3start) 
 CNSsolve>    evaluate ($diff4 = $i4end - $i4start) 
 CNSsolve>    evaluate ($diff5 = $i5end - $i5start) 
 CNSsolve>    if ($diff1 ne $diff2) then 
 CNSsolve>      display CHAIN LENGHT FOR SYMMETRY RESTRAINTS DO NOT MATCH 
 CNSsolve>      display PLEASE CHECK CAREFULLY YOUR INPUT 
 CNSsolve>      display ... stopping ... 
 CNSsolve>      stop 
 CNSsolve>    end if 
 CNSsolve>    if ($diff1 ne $diff3) then 
 CNSsolve>      display CHAIN LENGHT FOR SYMMETRY RESTRAINTS DO NOT MATCH 
 CNSsolve>      display PLEASE CHECK CAREFULLY YOUR INPUT 
 CNSsolve>      display ... stopping ... 
 CNSsolve>      stop 
 CNSsolve>    end if 
 CNSsolve>    if ($diff2 ne $diff3) then 
 CNSsolve>      display CHAIN LENGHT FOR SYMMETRY RESTRAINTS DO NOT MATCH 
 CNSsolve>      display PLEASE CHECK CAREFULLY YOUR INPUT 
 CNSsolve>      display ... stopping ... 
 CNSsolve>      stop 
 CNSsolve>    end if 
 CNSsolve>    if ($diff3 ne $diff4) then 
 CNSsolve>      display CHAIN LENGHT FOR SYMMETRY RESTRAINTS DO NOT MATCH 
 CNSsolve>      display PLEASE CHECK CAREFULLY YOUR INPUT 
 CNSsolve>      display ... stopping ... 
 CNSsolve>      stop 
 CNSsolve>    end if 
 CNSsolve>    if ($diff4 ne $diff5) then 
 CNSsolve>      display CHAIN LENGHT FOR SYMMETRY RESTRAINTS DO NOT MATCH 
 CNSsolve>      display PLEASE CHECK CAREFULLY YOUR INPUT 
 CNSsolve>      display ... stopping ... 
 CNSsolve>      stop 
 CNSsolve>    end if 
 CNSsolve> 
 CNSsolve>    eval ($icount = 0) 
 CNSsolve>    while ($i1start < $i1end) loop genc5sym 
 CNSsolve> 
 CNSsolve>      evaluate ($resst1 = $i1start) 
 CNSsolve>      evaluate ($resst2 = $i2start) 
 CNSsolve>      evaluate ($resst3 = $i3start) 
 CNSsolve>      evaluate ($resst4 = $i4start) 
 CNSsolve>      evaluate ($resst5 = $i5start) 
 CNSsolve>      evaluate ($resen1 = $i1end - $icount) 
 CNSsolve>      evaluate ($resen2 = $i2end - $icount) 
 CNSsolve>      evaluate ($resen3 = $i3end - $icount) 
 CNSsolve>      evaluate ($resen4 = $i4end - $icount) 
 CNSsolve>      evaluate ($resen5 = $i5end - $icount) 
 CNSsolve> 
 CNSsolve>      noe 
 CNSsolve>{ 
 CNSsolve>         assign (resid $resst1 and (name CA or name P)  and segid $chain1) 
 CNSsolve>                (resid $resen2 and (name CA or name P)  and segid $chain2) 0 0 0 
 CNSsolve>         assign (resid $resst2 and (name CA or name P)  and segid $chain2) 
 CNSsolve>                (resid $resen3 and (name CA or name P)  and segid $chain3) 0 0 0 
 CNSsolve> 
 CNSsolve>         assign (resid $resst2 and (name CA or name P)  and segid $chain2) 
 CNSsolve>                (resid $resen3 and (name CA or name P)  and segid $chain3) 0 0 0 
 CNSsolve>         assign (resid $resst3 and (name CA or name P)  and segid $chain3) 
 CNSsolve>                (resid $resen4 and (name CA or name P)  and segid $chain4) 0 0 0 
 CNSsolve> 
 CNSsolve>         assign (resid $resst3 and (name CA or name P)  and segid $chain3) 
 CNSsolve>                (resid $resen4 and (name CA or name P)  and segid $chain4) 0 0 0 
 CNSsolve>         assign (resid $resst4 and (name CA or name P)  and segid $chain4) 
 CNSsolve>                (resid $resen5 and (name CA or name P)  and segid $chain5) 0 0 0 
 CNSsolve> 
 CNSsolve>         assign (resid $resst4 and (name CA or name P)  and segid $chain4) 
 CNSsolve>                (resid $resen5 and (name CA or name P)  and segid $chain5) 0 0 0 
 CNSsolve>         assign (resid $resst5 and (name CA or name P)  and segid $chain5) 
 CNSsolve>                (resid $resen1 and (name CA or name P)  and segid $chain1) 0 0 0 
 CNSsolve> 
 CNSsolve>         assign (resid $resst5 and (name CA or name P)  and segid $chain5) 
 CNSsolve>                (resid $resen1 and (name CA or name P)  and segid $chain1) 0 0 0 
 CNSsolve>         assign (resid $resst1 and (name CA or name P)  and segid $chain1) 
 CNSsolve>                (resid $resen2 and (name CA or name P)  and segid $chain2) 0 0 0 
 CNSsolve>} 
 CNSsolve>         assign (resid $resst1 and (name CA or name P)  and segid $chain1) 
 CNSsolve>                (resid $resst3 and (name CA or name P)  and segid $chain3) 0 0 0 
 CNSsolve>         assign (resid $resst1 and (name CA or name P)  and segid $chain1) 
 CNSsolve>                (resid $resst4 and (name CA or name P)  and segid $chain4) 0 0 0 
 CNSsolve> 
 CNSsolve>         assign (resid $resst2 and (name CA or name P)  and segid $chain2) 
 CNSsolve>                (resid $resst4 and (name CA or name P)  and segid $chain4) 0 0 0 
 CNSsolve>         assign (resid $resst2 and (name CA or name P)  and segid $chain2) 
 CNSsolve>                (resid $resst5 and (name CA or name P)  and segid $chain5) 0 0 0 
 CNSsolve> 
 CNSsolve>         assign (resid $resst3 and (name CA or name P)  and segid $chain3) 
 CNSsolve>                (resid $resst5 and (name CA or name P)  and segid $chain5) 0 0 0 
 CNSsolve>         assign (resid $resst3 and (name CA or name P)  and segid $chain3) 
 CNSsolve>                (resid $resst1 and (name CA or name P)  and segid $chain1) 0 0 0 
 CNSsolve> 
 CNSsolve>         assign (resid $resst4 and (name CA or name P)  and segid $chain4) 
 CNSsolve>                (resid $resst1 and (name CA or name P)  and segid $chain1) 0 0 0 
 CNSsolve>         assign (resid $resst4 and (name CA or name P)  and segid $chain4) 
 CNSsolve>                (resid $resst2 and (name CA or name P)  and segid $chain2) 0 0 0 
 CNSsolve> 
 CNSsolve>         assign (resid $resst5 and (name CA or name P)  and segid $chain5) 
 CNSsolve>                (resid $resst2 and (name CA or name P)  and segid $chain2) 0 0 0 
 CNSsolve>         assign (resid $resst5 and (name CA or name P)  and segid $chain5) 
 CNSsolve>                (resid $resst3 and (name CA or name P)  and segid $chain3) 0 0 0 
 CNSsolve> 
 CNSsolve>      end 
 CNSsolve> 
 CNSsolve>      evaluate ($icount = $icount + $istep) 
 CNSsolve>      evaluate ($i1start = $i1start + $istep) 
 CNSsolve>      evaluate ($i2start = $i2start + $istep) 
 CNSsolve>      evaluate ($i3start = $i3start + $istep) 
 CNSsolve>      evaluate ($i4start = $i4start + $istep) 
 CNSsolve>      evaluate ($i5start = $i5start + $istep) 
 CNSsolve> 
 CNSsolve>    end loop genc5sym 
 CNSsolve> 
 CNSsolve>  end loop c5symloop 
 CNSsolve> 
 CNSsolve> 
 CNSsolve>  noe 
 CNSsolve>    potential  symm symmetry 
 CNSsolve>    scale      symm $Data.ksym 
 CNSsolve>    sqconstant symm 1.0 
 CNSsolve>    sqexponent symm 2 
 CNSsolve>    soexponent symm 1 
 CNSsolve>    rswitch    symm 0.5 
 CNSsolve>    sqoffset   symm 0.0 
 CNSsolve>    asymptote  symm 1.0 
 CNSsolve>  end 
 CNSsolve> 
 CNSsolve>end if 
 CNSsolve>    noe 
 CNSsolve>      scale symm $Data.ksym 
 CNSsolve>    end 
 CNSsolve>    energy end 
 CNSsolve>    evaluate ($esym = $noe) 
 CNSsolve>    if ($Data.noecv eq true) then 
 CNSsolve>      display Print out of cross-validated violations and rms not 
 CNSsolve>      display possible in combination with symmetry restraints 
 CNSsolve>      display CV values set therefore to 0 
 CNSsolve>    end if 
 CNSsolve>    noe reset end 
 CNSsolve>    set message=normal echo=on end 
 CNSsolve>    !read again the NOE data, needed to remove the symmetry restraints 
 CNSsolve>    @@RUN:protocols/read_noes.cns(Iteration=$Iteration; Data=$Data; count=$count) 
 CNSsolve>    if ( $log_level = verbose ) then 
 CNSsolve>       set message=normal echo=on end 
 CNSsolve>    else 
 CNSsolve>       set message=off echo=off end 
 CNSsolve>    end if 
 CNSsolve>  else 
 CNSsolve>    if ($Data.noecv eq true) then 
 NEXTCD: condition evaluated as true
 CNSsolve>      set message=on echo=on end 
 CNSsolve>      noe cv $ncvbest ? end 
 %WDSUB-ERR: symbol not found:
       noe cv $ncvbest 
              ^^^^^^^^
 %CV excluded partition number:-ERR: integer number expected:
       noe cv $ncvbest 
              ^^^^^^^^
 NOE: total number of restraints:     8 partitioned into      4 classes
 NOE: ceiling=    1000.000 current allocation= 4000000
 CNSsolve>    end if 
 CNSsolve>    if ( $log_level = verbose ) then 
 NEXTCD: condition evaluated as false
 CNSsolve>      set message=normal echo=on end 
 CNSsolve>    else 
 CNSsolve>      set message=off echo=off end 

 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 +++++++++++++++++++++++++++++++ CLASS CONT +++++++++++++++++++++++++++++++++++
 for this class: SCALe=   1.000 AVERage=center POTEntial=biharmonic 
                 TEMPerature= 300.000
 
 ========== restraint     7 ==========
 set-i-atoms
          A    1    GLY  CA  
          A    2    GLU  CA  
          A    3    ALA  CA  
          A    4    PRO  CA  
          A    5    ASN  CA  
          A    6    GLN  CA  
          A    7    ALA  CA  
          A    8    LEU  CA  
          A    9    LEU  CA  
          A    10   ARG  CA  
          A    11   ILE  CA  
          A    12   LEU  CA  
          A    13   LYS  CA  
          A    14   GLU  CA  
          A    15   THR  CA  
          A    16   GLU  CA  
          A    17   PHE  CA  
          A    18   LYS  CA  
          A    19   LYS  CA  
          A    20   ILE  CA  
          A    21   LYS  CA  
          A    22   VAL  CA  
          A    23   LEU  CA  
          A    24   SER  CA  
          A    25   SER  CA  
          A    26   GLY  CA  
          A    27   ALA  CA  
          A    28   PHE  CA  
          A    29   GLY  CA  
          A    30   THR  CA  
          A    31   VAL  CA  
          A    32   TYR  CA  
          A    33   LYS  CA  
          A    34   GLY  CA  
          A    35   LEU  CA  
          A    36   TRP  CA  
          A    37   ILE  CA  
          A    38   PRO  CA  
          A    39   GLU  CA  
          A    40   GLY  CA  
          A    41   GLU  CA  
          A    42   LYS  CA  
          A    43   VAL  CA  
          A    44   LYS  CA  
          A    45   ILE  CA  
          A    46   PRO  CA  
          A    47   VAL  CA  
          A    48   ALA  CA  
          A    49   ILE  CA  
          A    50   LYS  CA  
          A    51   GLU  CA  
          A    52   LEU  CA  
          A    53   ARG  CA  
          A    54   GLU  CA  
          A    55   ALA  CA  
          A    56   THR  CA  
          A    57   SER  CA  
          A    58   PRO  CA  
          A    59   LYS  CA  
          A    60   ALA  CA  
          A    61   ASN  CA  
          A    62   LYS  CA  
          A    63   GLU  CA  
          A    64   ILE  CA  
          A    65   LEU  CA  
          A    66   ASP  CA  
          A    67   GLU  CA  
          A    68   ALA  CA  
          A    69   TYR  CA  
          A    70   VAL  CA  
          A    71   MET  CA  
          A    72   ALA  CA  
          A    73   SER  CA  
          A    74   VAL  CA  
          A    75   ASP  CA  
          A    76   ASN  CA  
          A    77   PRO  CA  
          A    78   HIS  CA  
          A    79   VAL  CA  
          A    80   CYS  CA  
          A    81   ARG  CA  
          A    82   LEU  CA  
          A    83   LEU  CA  
          A    84   GLY  CA  
          A    85   ILE  CA  
          A    86   CYS  CA  
          A    87   LEU  CA  
          A    88   THR  CA  
          A    89   SER  CA  
          A    90   THR  CA  
          A    91   VAL  CA  
          A    92   GLN  CA  
          A    93   LEU  CA  
          A    94   ILE  CA  
          A    95   THR  CA  
          A    96   GLN  CA  
          A    97   LEU  CA  
          A    98   MET  CA  
          A    99   PRO  CA  
          A    100  PHE  CA  
          A    101  GLY  CA  
          A    102  CYS  CA  
          A    103  LEU  CA  
          A    104  LEU  CA  
          A    105  ASP  CA  
          A    106  TYR  CA  
          A    107  VAL  CA  
          A    108  ARG  CA  
          A    109  GLU  CA  
          A    110  HIS  CA  
          A    111  LYS  CA  
          A    112  ASP  CA  
          A    113  ASN  CA  
          A    114  ILE  CA  
          A    115  GLY  CA  
          A    116  SER  CA  
          A    117  GLN  CA  
          A    118  TYR  CA  
          A    119  LEU  CA  
          A    120  LEU  CA  
          A    121  ASN  CA  
          A    122  TRP  CA  
          A    123  CYS  CA  
          A    124  VAL  CA  
          A    125  GLN  CA  
          A    126  ILE  CA  
          A    127  ALA  CA  
          A    128  LYS  CA  
          A    129  GLY  CA  
          A    130  MET  CA  
          A    131  ASN  CA  
          A    132  TYR  CA  
          A    133  LEU  CA  
          A    134  GLU  CA  
          A    135  ASP  CA  
          A    136  ARG  CA  
          A    137  ARG  CA  
          A    138  LEU  CA  
          A    139  VAL  CA  
          A    140  HIS  CA  
          A    141  ARG  CA  
          A    142  ASP  CA  
          A    143  LEU  CA  
          A    144  ALA  CA  
          A    145  ALA  CA  
          A    146  ARG  CA  
          A    147  ASN  CA  
          A    148  VAL  CA  
          A    149  LEU  CA  
          A    150  VAL  CA  
          A    151  LYS  CA  
          A    152  THR  CA  
          A    153  PRO  CA  
          A    154  GLN  CA  
          A    155  HIS  CA  
          A    156  VAL  CA  
          A    157  LYS  CA  
          A    158  ILE  CA  
          A    159  THR  CA  
          A    160  ASP  CA  
          A    161  PHE  CA  
          A    162  GLY  CA  
          A    163  LEU  CA  
          A    164  ALA  CA  
          A    165  LYS  CA  
          A    166  LEU  CA  
          A    167  LEU  CA  
          A    168  GLY  CA  
          A    169  ALA  CA  
          A    170  GLU  CA  
          A    171  GLU  CA  
          A    181  VAL  CA  
          A    182  PRO  CA  
          A    183  ILE  CA  
          A    184  LYS  CA  
          A    185  TRP  CA  
          A    186  MET  CA  
          A    187  ALA  CA  
          A    188  LEU  CA  
          A    189  GLU  CA  
          A    190  SER  CA  
          A    191  ILE  CA  
          A    192  LEU  CA  
          A    193  HIS  CA  
          A    194  ARG  CA  
          A    195  ILE  CA  
          A    196  TYR  CA  
          A    197  THR  CA  
          A    198  HIS  CA  
          A    199  GLN  CA  
          A    200  SER  CA  
          A    201  ASP  CA  
          A    202  VAL  CA  
          A    203  TRP  CA  
          A    204  SER  CA  
          A    205  TYR  CA  
          A    206  GLY  CA  
          A    207  VAL  CA  
          A    208  THR  CA  
          A    209  VAL  CA  
          A    210  TRP  CA  
          A    211  GLU  CA  
          A    212  LEU  CA  
          A    213  MET  CA  
          A    214  THR  CA  
          A    215  PHE  CA  
          A    216  GLY  CA  
          A    217  SER  CA  
          A    218  LYS  CA  
          A    219  PRO  CA  
          A    220  TYR  CA  
          A    221  ASP  CA  
          A    222  GLY  CA  
          A    223  ILE  CA  
          A    224  PRO  CA  
          A    225  ALA  CA  
          A    226  SER  CA  
          A    227  GLU  CA  
          A    228  ILE  CA  
          A    229  SER  CA  
          A    230  SER  CA  
          A    231  ILE  CA  
          A    232  LEU  CA  
          A    233  GLU  CA  
          A    234  LYS  CA  
          A    235  GLY  CA  
          A    236  GLU  CA  
          A    237  ARG  CA  
          A    238  LEU  CA  
          A    239  PRO  CA  
          A    240  GLN  CA  
          A    241  PRO  CA  
          A    242  PRO  CA  
          A    243  ILE  CA  
          A    244  CYS  CA  
          A    245  THR  CA  
          A    246  ILE  CA  
          A    247  ASP  CA  
          A    248  VAL  CA  
          A    249  TYR  CA  
          A    250  MET  CA  
          A    251  ILE  CA  
          A    252  MET  CA  
          A    253  VAL  CA  
          A    254  LYS  CA  
          A    255  CYS  CA  
          A    256  TRP  CA  
          A    257  MET  CA  
          A    258  ILE  CA  
          A    259  ASP  CA  
          A    260  ALA  CA  
          A    261  ASP  CA  
          A    262  SER  CA  
          A    263  ARG  CA  
          A    264  PRO  CA  
          A    265  LYS  CA  
          A    266  PHE  CA  
          A    267  ARG  CA  
          A    268  GLU  CA  
          A    269  LEU  CA  
          A    270  ILE  CA  
          A    271  ILE  CA  
          A    272  GLU  CA  
          A    273  PHE  CA  
          A    274  SER  CA  
          A    275  LYS  CA  
          A    276  MET  CA  
          A    277  ALA  CA  
          A    278  ARG  CA  
          A    279  ASP  CA  
          A    280  PRO  CA  
          A    281  GLN  CA  
          A    282  ARG  CA  
          A    283  TYR  CA  
          A    284  LEU  CA  
          A    285  VAL  CA  
          A    286  ILE  CA  
          A    287  GLN  CA  
          A    288  GLY  CA  
          A    289  ASP  CA  
          A    290  GLU  CA  
          A    291  ARG  CA  
          A    292  MET  CA  
          A    293  HIS  CA  
          A    294  LEU  CA  
          A    307  MET  CA  
          A    308  ASP  CA  
          A    309  GLU  CA  
          A    310  GLU  CA  
          A    311  ASP  CA  
          A    312  MET  CA  
          A    313  ASP  CA  
          A    314  ASP  CA  
          A    315  VAL  CA  
          A    316  VAL  CA  
          A    317  ASP  CA  
          A    318  ALA  CA  
          A    319  ASP  CA  
          A    320  GLU  CA  
          A    321  TYR  CA  
          A    322  LEU  CA  
          A    323  ILE  CA  
          A    324  PRO  CA  
 set-j-atoms
          B    1    IRE  CAO 
          B    1    IRE  CAL 
          B    1    IRE  OAU 
          B    1    IRE  CAM 
          B    1    IRE  CAP 
          B    1    IRE  NBE 
          B    1    IRE  HAA 
          B    1    IRE  CAN 
          B    1    IRE  CAJ 
          B    1    IRE  CAK 
          B    1    IRE  OAV 
          B    1    IRE  CBA 
          B    1    IRE  CAZ 
          B    1    IRE  CAH 
          B    1    IRE  OAT 
          B    1    IRE  CAA 
          B    1    IRE  CAI 
          B    1    IRE  C5  
          B    1    IRE  C4  
          B    1    IRE  N3  
          B    1    IRE  C2  
          B    1    IRE  N1  
          B    1    IRE  C6  
          B    1    IRE  NAS 
          B    1    IRE  HAB 
          B    1    IRE  CAY 
          B    1    IRE  CAG 
          B    1    IRE  CAX 
          B    1    IRE  CL  
          B    1    IRE  CAW 
          B    1    IRE  FAB 
          B    1    IRE  CAD 
          B    1    IRE  CAE 
 R<average>=  10.450 NOE= 0.00 (- 0.00/+ 1.00) Delta= -10.450  E(NOE)=  32.549

 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 +++++++++++++++++++++++++++++++ CLASS SURF +++++++++++++++++++++++++++++++++++
 for this class: SCALe=   1.000 AVERage=sum    POTEntial=biharmonic 
                 TEMPerature= 300.000
 
 ========== restraint     8 ==========
 set-i-atoms
          A    1    GLY  CA  
          A    2    GLU  CA  
          A    3    ALA  CA  
          A    4    PRO  CA  
          A    5    ASN  CA  
          A    6    GLN  CA  
          A    7    ALA  CA  
          A    8    LEU  CA  
          A    9    LEU  CA  
          A    10   ARG  CA  
          A    11   ILE  CA  
          A    12   LEU  CA  
          A    13   LYS  CA  
          A    14   GLU  CA  
          A    15   THR  CA  
          A    16   GLU  CA  
          A    17   PHE  CA  
          A    18   LYS  CA  
          A    19   LYS  CA  
          A    20   ILE  CA  
          A    21   LYS  CA  
          A    22   VAL  CA  
          A    23   LEU  CA  
          A    24   SER  CA  
          A    25   SER  CA  
          A    26   GLY  CA  
          A    27   ALA  CA  
          A    28   PHE  CA  
          A    29   GLY  CA  
          A    30   THR  CA  
          A    31   VAL  CA  
          A    32   TYR  CA  
          A    33   LYS  CA  
          A    34   GLY  CA  
          A    35   LEU  CA  
          A    36   TRP  CA  
          A    37   ILE  CA  
          A    38   PRO  CA  
          A    39   GLU  CA  
          A    40   GLY  CA  
          A    41   GLU  CA  
          A    42   LYS  CA  
          A    43   VAL  CA  
          A    44   LYS  CA  
          A    45   ILE  CA  
          A    46   PRO  CA  
          A    47   VAL  CA  
          A    48   ALA  CA  
          A    49   ILE  CA  
          A    50   LYS  CA  
          A    51   GLU  CA  
          A    52   LEU  CA  
          A    53   ARG  CA  
          A    54   GLU  CA  
          A    55   ALA  CA  
          A    56   THR  CA  
          A    57   SER  CA  
          A    58   PRO  CA  
          A    59   LYS  CA  
          A    60   ALA  CA  
          A    61   ASN  CA  
          A    62   LYS  CA  
          A    63   GLU  CA  
          A    64   ILE  CA  
          A    65   LEU  CA  
          A    66   ASP  CA  
          A    67   GLU  CA  
          A    68   ALA  CA  
          A    69   TYR  CA  
          A    70   VAL  CA  
          A    71   MET  CA  
          A    72   ALA  CA  
          A    73   SER  CA  
          A    74   VAL  CA  
          A    75   ASP  CA  
          A    76   ASN  CA  
          A    77   PRO  CA  
          A    78   HIS  CA  
          A    79   VAL  CA  
          A    80   CYS  CA  
          A    81   ARG  CA  
          A    82   LEU  CA  
          A    83   LEU  CA  
          A    84   GLY  CA  
          A    85   ILE  CA  
          A    86   CYS  CA  
          A    87   LEU  CA  
          A    88   THR  CA  
          A    89   SER  CA  
          A    90   THR  CA  
          A    91   VAL  CA  
          A    92   GLN  CA  
          A    93   LEU  CA  
          A    94   ILE  CA  
          A    95   THR  CA  
          A    96   GLN  CA  
          A    97   LEU  CA  
          A    98   MET  CA  
          A    99   PRO  CA  
          A    100  PHE  CA  
          A    101  GLY  CA  
          A    102  CYS  CA  
          A    103  LEU  CA  
          A    104  LEU  CA  
          A    105  ASP  CA  
          A    106  TYR  CA  
          A    107  VAL  CA  
          A    108  ARG  CA  
          A    109  GLU  CA  
          A    110  HIS  CA  
          A    111  LYS  CA  
          A    112  ASP  CA  
          A    113  ASN  CA  
          A    114  ILE  CA  
          A    115  GLY  CA  
          A    116  SER  CA  
          A    117  GLN  CA  
          A    118  TYR  CA  
          A    119  LEU  CA  
          A    120  LEU  CA  
          A    121  ASN  CA  
          A    122  TRP  CA  
          A    123  CYS  CA  
          A    124  VAL  CA  
          A    125  GLN  CA  
          A    126  ILE  CA  
          A    127  ALA  CA  
          A    128  LYS  CA  
          A    129  GLY  CA  
          A    130  MET  CA  
          A    131  ASN  CA  
          A    132  TYR  CA  
          A    133  LEU  CA  
          A    134  GLU  CA  
          A    135  ASP  CA  
          A    136  ARG  CA  
          A    137  ARG  CA  
          A    138  LEU  CA  
          A    139  VAL  CA  
          A    140  HIS  CA  
          A    141  ARG  CA  
          A    142  ASP  CA  
          A    143  LEU  CA  
          A    144  ALA  CA  
          A    145  ALA  CA  
          A    146  ARG  CA  
          A    147  ASN  CA  
          A    148  VAL  CA  
          A    149  LEU  CA  
          A    150  VAL  CA  
          A    151  LYS  CA  
          A    152  THR  CA  
          A    153  PRO  CA  
          A    154  GLN  CA  
          A    155  HIS  CA  
          A    156  VAL  CA  
          A    157  LYS  CA  
          A    158  ILE  CA  
          A    159  THR  CA  
          A    160  ASP  CA  
          A    161  PHE  CA  
          A    162  GLY  CA  
          A    163  LEU  CA  
          A    164  ALA  CA  
          A    165  LYS  CA  
          A    166  LEU  CA  
          A    167  LEU  CA  
          A    168  GLY  CA  
          A    169  ALA  CA  
          A    170  GLU  CA  
          A    171  GLU  CA  
          A    181  VAL  CA  
          A    182  PRO  CA  
          A    183  ILE  CA  
          A    184  LYS  CA  
          A    185  TRP  CA  
          A    186  MET  CA  
          A    187  ALA  CA  
          A    188  LEU  CA  
          A    189  GLU  CA  
          A    190  SER  CA  
          A    191  ILE  CA  
          A    192  LEU  CA  
          A    193  HIS  CA  
          A    194  ARG  CA  
          A    195  ILE  CA  
          A    196  TYR  CA  
          A    197  THR  CA  
          A    198  HIS  CA  
          A    199  GLN  CA  
          A    200  SER  CA  
          A    201  ASP  CA  
          A    202  VAL  CA  
          A    203  TRP  CA  
          A    204  SER  CA  
          A    205  TYR  CA  
          A    206  GLY  CA  
          A    207  VAL  CA  
          A    208  THR  CA  
          A    209  VAL  CA  
          A    210  TRP  CA  
          A    211  GLU  CA  
          A    212  LEU  CA  
          A    213  MET  CA  
          A    214  THR  CA  
          A    215  PHE  CA  
          A    216  GLY  CA  
          A    217  SER  CA  
          A    218  LYS  CA  
          A    219  PRO  CA  
          A    220  TYR  CA  
          A    221  ASP  CA  
          A    222  GLY  CA  
          A    223  ILE  CA  
          A    224  PRO  CA  
          A    225  ALA  CA  
          A    226  SER  CA  
          A    227  GLU  CA  
          A    228  ILE  CA  
          A    229  SER  CA  
          A    230  SER  CA  
          A    231  ILE  CA  
          A    232  LEU  CA  
          A    233  GLU  CA  
          A    234  LYS  CA  
          A    235  GLY  CA  
          A    236  GLU  CA  
          A    237  ARG  CA  
          A    238  LEU  CA  
          A    239  PRO  CA  
          A    240  GLN  CA  
          A    241  PRO  CA  
          A    242  PRO  CA  
          A    243  ILE  CA  
          A    244  CYS  CA  
          A    245  THR  CA  
          A    246  ILE  CA  
          A    247  ASP  CA  
          A    248  VAL  CA  
          A    249  TYR  CA  
          A    250  MET  CA  
          A    251  ILE  CA  
          A    252  MET  CA  
          A    253  VAL  CA  
          A    254  LYS  CA  
          A    255  CYS  CA  
          A    256  TRP  CA  
          A    257  MET  CA  
          A    258  ILE  CA  
          A    259  ASP  CA  
          A    260  ALA  CA  
          A    261  ASP  CA  
          A    262  SER  CA  
          A    263  ARG  CA  
          A    264  PRO  CA  
          A    265  LYS  CA  
          A    266  PHE  CA  
          A    267  ARG  CA  
          A    268  GLU  CA  
          A    269  LEU  CA  
          A    270  ILE  CA  
          A    271  ILE  CA  
          A    272  GLU  CA  
          A    273  PHE  CA  
          A    274  SER  CA  
          A    275  LYS  CA  
          A    276  MET  CA  
          A    277  ALA  CA  
          A    278  ARG  CA  
          A    279  ASP  CA  
          A    280  PRO  CA  
          A    281  GLN  CA  
          A    282  ARG  CA  
          A    283  TYR  CA  
          A    284  LEU  CA  
          A    285  VAL  CA  
          A    286  ILE  CA  
          A    287  GLN  CA  
          A    288  GLY  CA  
          A    289  ASP  CA  
          A    290  GLU  CA  
          A    291  ARG  CA  
          A    292  MET  CA  
          A    293  HIS  CA  
          A    294  LEU  CA  
          A    307  MET  CA  
          A    308  ASP  CA  
          A    309  GLU  CA  
          A    310  GLU  CA  
          A    311  ASP  CA  
          A    312  MET  CA  
          A    313  ASP  CA  
          A    314  ASP  CA  
          A    315  VAL  CA  
          A    316  VAL  CA  
          A    317  ASP  CA  
          A    318  ALA  CA  
          A    319  ASP  CA  
          A    320  GLU  CA  
          A    321  TYR  CA  
          A    322  LEU  CA  
          A    323  ILE  CA  
          A    324  PRO  CA  
 set-j-atoms
          B    1    IRE  CAO 
          B    1    IRE  CAL 
          B    1    IRE  OAU 
          B    1    IRE  CAM 
          B    1    IRE  CAP 
          B    1    IRE  NBE 
          B    1    IRE  HAA 
          B    1    IRE  CAN 
          B    1    IRE  CAJ 
          B    1    IRE  CAK 
          B    1    IRE  OAV 
          B    1    IRE  CBA 
          B    1    IRE  CAZ 
          B    1    IRE  CAH 
          B    1    IRE  OAT 
          B    1    IRE  CAA 
          B    1    IRE  CAI 
          B    1    IRE  C5  
          B    1    IRE  C4  
          B    1    IRE  N3  
          B    1    IRE  C2  
          B    1    IRE  N1  
          B    1    IRE  C6  
          B    1    IRE  NAS 
          B    1    IRE  HAB 
          B    1    IRE  CAY 
          B    1    IRE  CAG 
          B    1    IRE  CAX 
          B    1    IRE  CL  
          B    1    IRE  CAW 
          B    1    IRE  FAB 
          B    1    IRE  CAD 
          B    1    IRE  CAE 
 R<average>=   2.171 NOE= 4.50 (- 4.50/+ 1.00) Delta=   2.329  E(NOE)=   0.080

 NOEPRI: RMS diff. =   3.785,  #(violat.> 0.3)=     2 of      8 NOEs
 NOEPRI: RMS diff. class DIST =   0.000,  #(viol.> 0.3)=     0 of      6 NOEs
 NOEPRI: RMS diff. class CONT =  10.450,  #(viol.> 0.3)=     1 of      1 NOEs
 NOEPRI: RMS diff. class SURF =   2.329,  #(viol.> 0.3)=     1 of      1 NOEs
 %WDSUB-ERR: symbol not found:
       evaluate ($rms_test_noe=$test_rms)
                               ^^^^^^^^^
 %WDSUB-ERR: symbol not found:
       evaluate ($violations_test_noe=$test_violations)
                                      ^^^^^^^^^^^^^^^^
 NBONDS: generating intra-molecular exclusion list with mode= 5
 MAKINB: mode   5 found      0 exclusions and      0 interactions(1-4)
 NBONDS: found     4662 intra-atom interactions
 --------------- cycle=     2 --------------------------------------------------
 | Etotal =-38.368    grad(E)=0.191      E(BOND)=0.000      E(ANGL)=0.000      |
 | E(IMPR)=0.000      E(VDW )=-32.262    E(ELEC)=-6.186     E(NOE )=0.080      |
 -------------------------------------------------------------------------------
 Total number of dihedral angle restraints=     0
  overall scale =    1.0000
 Number of dihedral angle restraints=    0
 Number of violations greater than    5.000:     0
 RMS deviation=   0.000
 (atom-i        |atom-j        )    dist.   equil.   delta    energy   const. 

 (atom-i        |atom-j        )    dist.   equil.   delta    energy   const. 

 (atom-i        |atom-j        )    dist.   equil.   delta    energy   const. 

 (atom-i        |atom-j        )    dist.   equil.   delta    energy   const. 

 Number of violations greater    0.050:     0
 (atom-i        |atom-j        |atom-k        )  angle    equil.     delta    energy  const. 

 (atom-i        |atom-j        |atom-k        )  angle    equil.     delta    energy  const. 

 (atom-i        |atom-j        |atom-k        )  angle    equil.     delta    energy  const. 

 (atom-i        |atom-j        |atom-k        )  angle    equil.     delta    energy  const. 

 Number of violations greater    5.000:     0
 (atom-i        |atom-j        |atom-k        |atom-L        )    angle    equil.   delta    energy   const.   period

 (atom-i        |atom-j        |atom-k        |atom-L        )    angle    equil.   delta    energy   const.   period

 (atom-i        |atom-j        |atom-k        |atom-L        )    angle    equil.   delta    energy   const.   period

 (atom-i        |atom-j        |atom-k        |atom-L        )    angle    equil.   delta    energy   const.   period

 Number of violations greater    5.000:     0
 (atom-i        |atom-j        |atom-k        |atom-L        )    angle    equil.   delta    energy   const.   period

 (atom-i        |atom-j        |atom-k        |atom-L        )    angle    equil.   delta    energy   const.   period

 (atom-i        |atom-j        |atom-k        |atom-L        )    angle    equil.   delta    energy   const.   period

 (atom-i        |atom-j        |atom-k        |atom-L        )    angle    equil.   delta    energy   const.   period

 Number of violations greater   30.000:     0
The following couplings have delta J
greater than the cutoff:
  (calculated J) (observed J) (delta J)
  RMS diff. =   0.000, #(violat.> 1.00)=    0. of      0 J-couplings
The following anisotropies have
delta SANI greater than the cutoff:
(calc Anis) (obs Anis) (delta Anis)
The following anisotropies have
delta SANI greater than the cutoff:
(calc Anis) (obs Anis) (delta Anis)
The following anisotropies have
delta SANI greater than the cutoff:
(calc Anis) (obs Anis) (delta Anis)
The following anisotropies have
delta SANI greater than the cutoff:
(calc Anis) (obs Anis) (delta Anis)
The following anisotropies have
delta SANI greater than the cutoff:
(calc Anis) (obs Anis) (delta Anis)
 SURFAC: half the sigma value being used for atomic radii.
 SURFAC: ACCEssible surface area
 SURFAC: ACCUracy= 0.07 RH2O=  1.40
         Z-grid=  0.32 number-of-Z-sections=  196
         measures-of-arc= 26746 and 34482
 SURFAC: half the sigma value being used for atomic radii.
 SURFAC: ACCEssible surface area
 SURFAC: ACCUracy= 0.07 RH2O=  1.40
         Z-grid=  0.32 number-of-Z-sections=   62
         measures-of-arc=     9 and    65
 SURFAC: half the sigma value being used for atomic radii.
 SURFAC: ACCEssible surface area
 SURFAC: ACCUracy= 0.07 RH2O=  1.40
         Z-grid=  0.32 number-of-Z-sections=  196
         measures-of-arc= 27334 and 34586
 MOMENTS
 338564.63677373 -55565.19314395 -71552.14784716
                 607981.43570294  67855.27943932
                                 245092.18554871

 HEAP: maximum use      =   988860008 current use      =       96000 bytes
 HEAP: maximum overhead =        2688 current overhead =         752 bytes
 PRIEND:    1 levels not terminated
             LEVEL=   1 KEY=CNSsolve>        ACTION=GO  
          ============================================================
           Maximum dynamic memory allocation:   988860008 bytes
           Maximum dynamic memory overhead:          2688 bytes
           Program started at: 19:16:12 on 28-Dec-2019
           Program stopped at: 19:16:13 on 28-Dec-2019
           CPU time used:       0.8111 seconds
          ============================================================
