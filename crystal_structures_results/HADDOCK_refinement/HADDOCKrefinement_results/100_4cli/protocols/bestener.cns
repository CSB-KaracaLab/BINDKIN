! bestener.cns
!   Store best score model from rigid-body dokcing (it0)
!
! ***********************************************************************
! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           *
! * All rights reserved.                                                *
! * This code is part of the HADDOCK software and governed by its       *
! * license. Please see the LICENSE file that should have been included *
! * as part of this package.                                            *
! ***********************************************************************
!
    eval ($kinter = 1.0)
    @RUN:protocols/scale_inter_mini.cns

    evaluate ($unamb_scale = $Data.unamb_cool3)
    evaluate ($ambig_scale = $Data.amb_cool3)
    evaluate ($hbond_scale = $Data.hbond_cool3)

    noe 
      scale dist $unamb_scale 
      scale ambi $ambig_scale
      scale hbon $hbond_scale
      scale symm 0.0
    end

    if ($Data.flags.vean eq true) then
      vean class vea1 force $Data.fin_bor_cool3_1 $Data.fin_cen_cool3_1 end
      vean class vea2 force $Data.fin_bor_cool3_2 $Data.fin_cen_cool3_2 end
      vean class vea3 force $Data.fin_bor_cool3_3 $Data.fin_cen_cool3_3 end
      vean class vea4 force $Data.fin_bor_cool3_4 $Data.fin_cen_cool3_4 end
      vean class vea5 force $Data.fin_bor_cool3_5 $Data.fin_cen_cool3_5 end
    end if

    if ($Data.flags.sani eq true) then
      sani class rdc1 force $Data.rdc1_hot end
      sani class rdc2 force $Data.rdc2_hot end
      sani class rdc3 force $Data.rdc3_hot end
      sani class rdc4 force $Data.rdc4_hot end
      sani class rdc5 force $Data.rdc5_hot end
    end if
    
    if ($Data.flags.xrdc eq true) then
      xrdc class rdc1 force $Data.rdc1_hot end
      xrdc class rdc2 force $Data.rdc2_hot end
      xrdc class rdc3 force $Data.rdc3_hot end
      xrdc class rdc4 force $Data.rdc4_hot end
      xrdc class rdc5 force $Data.rdc5_hot end
    end if
    
    if ($Data.flags.xpcs eq true) then
      xpcs class pcs1 force $Data.pcs1_hot end
      xpcs class pcs2 force $Data.pcs2_hot end
      xpcs class pcs3 force $Data.pcs3_hot end
      xpcs class pcs4 force $Data.pcs4_hot end
      xpcs class pcs5 force $Data.pcs5_hot end
      xpcs class pcs6 force $Data.pcs6_hot end
      xpcs class pcs7 force $Data.pcs7_hot end
      xpcs class pcs8 force $Data.pcs8_hot end
      xpcs class pcs9 force $Data.pcs9_hot end
      xpcs class pcsA force $Data.pcsA_hot end
    end if
    
    if ($Data.flags.dani eq true) then
      dani class dan1 force $Data.dan1_hot end
      dani class dan2 force $Data.dan2_hot end
      dani class dan3 force $Data.dan3_hot end
      dani class dan4 force $Data.dan4_hot end
      dani class dan5 force $Data.dan5_hot end
    end if
 
    evaluate ($ener = 0)
    evaluate ($vdw  = 0)
    evaluate ($elec = 0)
    evaluate ($noe  = 0)
    evaluate ($coll = 0)
    evaluate ($eair = 0)
    evaluate ($cdih = 0)
    evaluate ($vean = 0)
    evaluate ($sani = 0)
    evaluate ($xrdc = 0)
    evaluate ($xpcs = 0)
    evaluate ($dani = 0)
    evaluate ($esym = 0)
    evaluate ($bsa  = 0)
    evaluate ($desolv = 0.0)

    energy end
    evaluate ($eair = $noe)

    if ($Data.flags.sym eq true) then
      noe
        scale * 0.0
        scale symm $Data.ksym
      end
      energy end
      evaluate ($esym = $noe)
    end if

    if ($SaProtocol.rigidtrans eq true) then
      inline @RUN:protocols/bsa.cns
    end if

    evaluate ($etot = $iterations.w_vdw  * $vdw)
    evaluate ($etot = $etot + $iterations.w_elec * $elec)
    evaluate ($etot = $etot + $iterations.w_dist * $eair)
    evaluate ($etot = $etot + $iterations.w_rg *   $coll)
    evaluate ($etot = $etot + $iterations.w_cdih * $cdih)
    evaluate ($etot = $etot + $iterations.w_sani * $sani)
    evaluate ($etot = $etot + $iterations.w_xrdc * $xrdc)
    evaluate ($etot = $etot + $iterations.w_xpcs * $xpcs)
    evaluate ($etot = $etot + $iterations.w_dani * $dani)
    evaluate ($etot = $etot + $iterations.w_vean * $vean)
    evaluate ($etot = $etot + $iterations.w_sym  * $esym)
    evaluate ($etot = $etot + $iterations.w_bsa  * $bsa)
    evaluate ($etot = $etot + $iterations.w_desolv * $desolv)

    if ($nfirst = 1) then
      evaluate ($bestener = $etot)
      evaluate ($bestair = $eair)
      evaluate ($ncvbest = $npart)
      do (refx = x) (all)
      do (refy = y) (all)
      do (refz = z) (all)
      evaluate ($nfirst = 0)
      if ($data.waterdock eq true) then
       ident (store3) (not all)
       ident (store3) (store5)
      else
       ident (store3) (not all)
      end if
    else
      if ($etot < $bestener) then
        evaluate ($bestener = $etot)
        evaluate ($bestair = $eair)
        evaluate ($ncvbest = $npart)
        do (refx = x) (all)
        do (refy = y) (all)
        do (refz = z) (all)
        if ($data.waterdock eq true) then
         ident (store3) (not all)
         ident (store3) (store5)
        end if
      end if
    end if

    evaluate ($kinter = $SaProtocol.inter_rigid)
    @RUN:protocols/scale_inter_mini.cns

    evaluate ($unamb_scale = $unamb_scale_store)
    evaluate ($ambig_scale = $ambig_scale_store)
    evaluate ($hbond_scale = $hbond_scale_store)
    evaluate ($symm_scale = $symm_scale_store)

    noe 
      scale dist $unamb_scale 
      scale ambi $ambig_scale
      scale hbon $hbond_scale
      scale symm $symm_scale
    end
