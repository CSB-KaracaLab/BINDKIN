! print_coorheader.cns
!    Generate the coordinate header (REMARKS)
!
! ***********************************************************************
! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           *
! * Originally adapted from Aria 1.2 from Nilges and Linge, EMBL.       *
! * All rights reserved.                                                *
! * This code is part of the HADDOCK software and governed by its       *
! * license. Please see the LICENSE file that should have been included *
! * as part of this package.                                            *
! ***********************************************************************
!

if ($Data.flags.dihed eq FALSE) then evaluate ($dihe = 0) end if
if ($Data.flags.sani  eq FALSE) then evaluate ($sani = 0) end if
if ($Data.flags.xrdc  eq FALSE) then evaluate ($xrdc = 0) end if
if ($Data.flags.xpcs  eq FALSE) then evaluate ($xpcs = 0) end if
if ($Data.flags.dani  eq FALSE) then evaluate ($dani = 0) end if
if ($Data.flags.coup  eq FALSE) then evaluate ($coup = 0) end if
if ($Data.flags.vean  eq FALSE) then evaluate ($vean = 0) end if
if ($Data.flags.cdih  eq FALSE) then evaluate ($cdih = 0) end if
if ($Data.flags.noe   eq FALSE) then evaluate ($noe  = 0) end if
if ($Data.flags.rg    eq FALSE) then evaluate ($coll = 0) end if

evaluate($enerall=$etot)
evaluate($bondall=$bond)
evaluate($anglall=$angl)
evaluate($imprall=$impr)
evaluate($diheall=$dihe)
evaluate($vdwall=$vdw)
evaluate($elecall=$elec)
evaluate($noeall=$noe)
evaluate($rgall=$coll)
evaluate($cdihall=$cdih)
evaluate($coupall=$coup)
evaluate($saniall=$sani+$xrdc)
evaluate($veanall=$vean)
evaluate($xpcsall=$xpcs)
evaluate($daniall=$dani)

if ($Data.flags.sym eq true) then
  evaluate ($result=0)
  evaluate ($violations=0)
  print threshold=0.3 noe 
  evaluate ($rms_noe=$result)
  evaluate ($violations_noe=$violations)
end if

if ($Data.noecv eq false) then
  evaluate ($violations_test_noe= 0)
  evaluate ($rms_test_noe = 0)
  evaluate ($npart = 0)
end if

evaluate ($result=0)
evaluate ($violations=0)
print threshold=5. cdih
evaluate ($rms_cdih=$result)
evaluate ($violations_cdih=$violations)
evaluate ($result=0)
print thres=0.05 bonds          
evaluate ($rms_bonds=$result)
evaluate ($result=0)
print thres=5. angles
evaluate ($rms_angles=$result)
evaluate ($result=0)
print thres=5. impropers
evaluate ($rms_impropers=$result)
evaluate ($result=0)
print thres=30. dihedrals 
evaluate ($rms_dihedrals=$result)
evaluate ($result=0)
evaluate ($violations=0)
coupl print thres=1.0 class * end
evaluate ($rms_coup = $result)
evaluate ($violations_coup = $violations)

evaluate ($result=0)
evaluate ($violations=0)
sani print threshold = 0.20 class rdc1 end
evaluate( $rms_sani = $result)
evaluate( $violations_sani = $violations)
evaluate ($result=0)
evaluate ($violations=0)
sani print threshold = 0.20 class rdc2 end
if ($result > 0) then
  evaluate( $rms_sani = (0.5 * $rms_sani) + (0.5 * $result))
end if
evaluate( $violations_sani = $violations_sani + $violations)
evaluate ($result=0)
evaluate ($violations=0)
sani print threshold = 0.20 class rdc3 end
if ($result > 0) then
  evaluate( $rms_sani = (0.5 * $rms_sani) + (0.5 * $result))
end if
evaluate( $violations_sani = $violations_sani + $violations)
evaluate ($result=0)
evaluate ($violations=0)
sani print threshold = 0.20 class rdc4 end
if ($result > 0) then
  evaluate( $rms_sani = (0.5 * $rms_sani) + (0.5 * $result))
end if
evaluate( $violations_sani = $violations_sani + $violations)
evaluate ($result=0)
evaluate ($violations=0)
sani print threshold = 0.20 class rdc5 end
if ($result > 0) then
  evaluate( $rms_sani = (0.5 * $rms_sani) + (0.5 * $result))
end if
evaluate( $violations_sani = $violations_sani + $violations)

if ($Data.flags.xrdc  eq TRUE) then
  evaluate ($result=0)
  evaluate ($violations=0)
  xrdc print threshold = 0.2 class xrd1 end
  evaluate( $rms_xrdc = $result)
  evaluate( $violations_xrdc = $violations)
  evaluate ($result=0)
  evaluate ($violations=0)
  xrdc print threshold = 0.2 class xrd2 end
  if ($result > 0) then
    evaluate( $rms_xrdc = (0.5 * $rms_xrdc) + (0.5 * $result))
  end if
  evaluate( $violations_xrdc = $violations_xrdc + $violations)
  evaluate ($result=0)
  evaluate ($violations=0)
  xrdc print threshold = 0.2 class xrd3 end
  if ($result > 0) then
    evaluate( $rms_xrdc = (0.5 * $rms_xrdc) + (0.5 * $result))
  end if
  evaluate( $violations_xrdc = $violations_xrdc + $violations)
  evaluate ($result=0)
  evaluate ($violations=0)
  xrdc print threshold = 0.2 class xrd4 end
  if ($result > 0) then
    evaluate( $rms_xrdc = (0.5 * $rms_xrdc) + (0.5 * $result))
  end if
  evaluate( $violations_xrdc = $violations_xrdc + $violations)
  evaluate ($result=0)
  evaluate ($violations=0)
  xrdc print threshold = 0.2 class xrd5 end
  if ($result > 0) then
    evaluate( $rms_xrdc = (0.5 * $rms_xrdc) + (0.5 * $result))
  end if
  evaluate( $violations_xrdc = $violations_xrdc + $violations)
else
  evaluate( $rms_xrdc = 0)
  evaluate( $violations_xrdc = 0)
end if
evaluate( $violations_sani = $violations_sani + $violations_xrdc)
evaluate( $rms_sani = $rms_sani + $rms_xrdc)


if ($Data.flags.xpcs  eq TRUE) then
  evaluate ($result=0)
  evaluate ($violations=0)

  xpcs print threshold = 0.2 class pcs1 end
  evaluate( $rms_xpcs = $result)
  evaluate( $violations_xpcs = $violations)
  evaluate ($result=0)
  evaluate ($violations=0)

  xpcs print threshold = 0.2 class pcs2 end
  if ($result > 0) then
    evaluate( $rms_xpcs = (0.5 * $rms_xpcs) + (0.5 * $result))
  end if
  evaluate( $violations_xpcs = $violations_xpcs + $violations)
  evaluate ($result=0)
  evaluate ($violations=0)

  xpcs print threshold = 0.2 class pcs3 end
  if ($result > 0) then
    evaluate( $rms_xpcs = (0.5 * $rms_xpcs) + (0.5 * $result))
  end if
  evaluate( $violations_xpcs = $violations_xpcs + $violations)
  evaluate ($result=0)
  evaluate ($violations=0)

  xpcs print threshold = 0.2 class pcs4 end
  if ($result > 0) then
    evaluate( $rms_xpcs = (0.5 * $rms_xpcs) + (0.5 * $result))
  end if
  evaluate( $violations_xpcs = $violations_xpcs + $violations)
  evaluate ($result=0)
  evaluate ($violations=0)

  xpcs print threshold = 0.2 class pcs5 end
  if ($result > 0) then
    evaluate( $rms_xpcs = (0.5 * $rms_xpcs) + (0.5 * $result))
  end if
  evaluate( $violations_xpcs = $violations_xpcs + $violations)
  evaluate ($result=0)
  evaluate ($violations=0)

  xpcs print threshold = 0.2 class pcs6 end
  if ($result > 0) then
    evaluate( $rms_xpcs = (0.5 * $rms_xpcs) + (0.5 * $result))
  end if
  evaluate( $violations_xpcs = $violations_xpcs + $violations)
  evaluate ($result=0)
  evaluate ($violations=0)

  xpcs print threshold = 0.2 class pcs7 end
  if ($result > 0) then
    evaluate( $rms_xpcs = (0.5 * $rms_xpcs) + (0.5 * $result))
  end if
  evaluate( $violations_xpcs = $violations_xpcs + $violations)
  evaluate ($result=0)
  evaluate ($violations=0)

  xpcs print threshold = 0.2 class pcs8 end
  if ($result > 0) then
    evaluate( $rms_xpcs = (0.5 * $rms_xpcs) + (0.5 * $result))
  end if
  evaluate( $violations_xpcs = $violations_xpcs + $violations)
  evaluate ($result=0)
  evaluate ($violations=0)

  xpcs print threshold = 0.2 class pcs9 end
  if ($result > 0) then
    evaluate( $rms_xpcs = (0.5 * $rms_xpcs) + (0.5 * $result))
  end if
  evaluate( $violations_xpcs = $violations_xpcs + $violations)
  evaluate ($result=0)
  evaluate ($violations=0)

  xpcs print threshold = 0.2 class pcsA end
  if ($result > 0) then
    evaluate( $rms_xpcs = (0.5 * $rms_xpcs) + (0.5 * $result))
  end if
  evaluate( $violations_xpcs = $violations_xpcs + $violations)
else
  evaluate( $rms_xpcs = 0)
  evaluate( $violations_xpcs = 0)
end if

if ($Data.flags.vean  eq TRUE) then
  evaluate ($result=0)
  evaluate ($violations=0)
  vean print threshold = 5.00 class vea1 end
  evaluate( $rms_vean = $result)
  evaluate( $violations_vean = $violations)
  evaluate ($result=0)
  evaluate ($violations=0)
  vean print threshold = 5.00 class vea2 end
  if ($result > 0) then
    evaluate( $rms_vean = (0.5 * $rms_vean) + (0.5 * $result))
  end if
  evaluate( $violations_vean = $violations_vean + $violations)
  evaluate ($result=0)
  evaluate ($violations=0)
  vean print threshold = 5.00 class vea3 end
  if ($result > 0) then
    evaluate( $rms_vean = (0.5 * $rms_vean) + (0.5 * $result))
  end if
  evaluate( $violations_vean = $violations_vean + $violations)
  evaluate ($result=0)
  evaluate ($violations=0)
  vean print threshold = 5.00 class vea4 end
  if ($result > 0) then
    evaluate( $rms_vean = (0.5 * $rms_vean) + (0.5 * $result))
  end if
  evaluate( $violations_vean = $violations_vean + $violations)
  evaluate ($result=0)
  evaluate ($violations=0)
  vean print threshold = 5.00 class vea5 end
  if ($result > 0) then
    evaluate( $rms_vean = (0.5 * $rms_vean) + (0.5 * $result))
  end if
  evaluate( $violations_vean = $violations_vean + $violations)
else
  evaluate( $rms_vean = 0)
  evaluate( $violations_vean = 0)
end if
  

if ($Data.flags.dani  eq TRUE) then
  evaluate ($result=0)
  evaluate ($violations=0)
  dani print threshold = 0.20 class dan1 end
  evaluate( $rms_dani = $result)
  evaluate( $violations_dani = $violations)
  evaluate ($result=0)
  evaluate ($violations=0)
  dani print threshold = 0.20 class dan2 end
  if ($result > 0) then
    evaluate( $rms_dani = (0.5 * $rms_dani) + (0.5 * $result))
  end if
  evaluate( $violations_dani = $violations_dani + $violations)
  evaluate ($result=0)
  evaluate ($violations=0)
  dani print threshold = 0.20 class dan3 end
  if ($result > 0) then
    evaluate( $rms_dani = (0.5 * $rms_dani) + (0.5 * $result))
  end if
  evaluate( $violations_dani = $violations_dani + $violations)
  evaluate ($result=0)
  evaluate ($violations=0)
  dani print threshold = 0.20 class dan4 end
  if ($result > 0) then
    evaluate( $rms_dani = (0.5 * $rms_dani) + (0.5 * $result))
  end if
  evaluate( $violations_dani = $violations_dani + $violations)
  evaluate ($result=0)
  evaluate ($violations=0)
  dani print threshold = 0.20 class dan5 end
  if ($result > 0) then
    evaluate( $rms_dani = (0.5 * $rms_dani) + (0.5 * $result))
  end if
  evaluate( $violations_dani = $violations_dani + $violations)
else
  evaluate( $rms_dani = 0)
  evaluate( $violations_dani = 0)
end if
  
{====>} {* define ASA-based solvation parameters *}
inline @RUN:protocols/def_solv_param.cns

{====>} {* buried surface area *}
evaluate ($nchain1 = 0)
evaluate ($saafree = 0)
while ($nchain1 < $data.ncomponents) loop nloop1
  evaluate ($nchain1 = $nchain1 + 1)
  {====>} {* buried surface area *}
  do (rmsd = 0) (all)
  surface mode=access accu=0.075 rh2o=1.4 sele=(segid $Toppar.prot_segid_$nchain1 and not ((resn WAT or resn HOH or resn TIP*) or resn DMS)) end
  show sum (rmsd) (segid $Toppar.prot_segid_$nchain1 and not ((resn WAT or resn HOH or resn TIP*) or resn DMS))
  evaluate ($saafree = $saafree + $result)
end loop nloop1
     
do (rmsd = 0) (all)
do (store2 = 0) (all)
surface mode=access accu=0.075 rh2o=1.4 sele=(not ((resn WAT or resn HOH or resn TIP*) or resn DMS)) end
show sum (rmsd) (not ((resn WAT or resn HOH or resn TIP*) or resn DMS))
evaluate ($satot = $result)
do (store2 = rmsd * store1) (not ((resn WAT or resn HOH or resn TIP*) or resn DMS))
show sum (store2) (not ((resn WAT or resn HOH or resn TIP*) or resn DMS))
evaluate ($esolcplx = $result)
evaluate ($saburied = $saafree - $satot)
if ($saburied < 0) then
  evaluate ($saburied = -999999)
end if

if ($refine.calcdesolv eq false) then
  evaluate ($edesolv = $esolcplx - $esolfree)
elseif ($iteration < 2) then
  evaluate ($edesolv = $esolcplx - $esolfree)
end if

evaluate ($dhbinding = $edesolv + $eintcplx - $eintfree + $elec + $vdw)

if ($data.ncomponents = 1) then
  evaluate ($saburied = 0)
  evaluate ($edesolv = 0)
  evaluate ($dhbinding = 0)
end if

if ($Data.flags.sym eq true) then
  evaluate ($enerall = $enerall + $esym)
end if
if ($Data.flags.ncs eq true) then
  evaluate ($enerall = $enerall + $ncs)
end if

evaluate ($procwat = false)
if ($refine.keepwater eq true) then
  evaluate ($procwat = true)
end if  
if ($data.waterdock eq true) then
  evaluate ($procwat = true)
end if  

if ($procwat eq true) then
  if ($iteration eq 2) then
    do (store3 = 0) (all)
    eval($nchain1 = 0)
    while ($nchain1 < $data.ncomponents) loop nloop1
      eval($nchain1 = $nchain1 + 1)
      eval($nchain2 = $nchain1)
      while ($nchain2 < $data.ncomponents) loop nloop2
        eval($nchain2 = $nchain2 + 1)
        do (store3 = 1) (byres ((resn WAT or resn HOH or resn TIP* or resn DMS) and (segid $Toppar.prot_segid_$nchain1) around 3.5
                                          and (segid $Toppar.prot_segid_$nchain2) around 3.5))
      end loop nloop2
    end loop nloop1
    dele sele=(attr store3=0 and (resn DMS or (resn WAT or resn HOH or resn TIP*))) end
  end if
  if ($iteration ne 0) then
    ident (store3) (not all)
  end if
  flag exclude * include vdw elec  end
  
  eval($nchain1 = 0)
 
  while ($nchain1 < $data.ncomponents) loop nloop1
    eval($nchain1 = $nchain1 + 1)
   
    igroup
      interaction (segid $Toppar.prot_segid_$nchain1) (((resn WAT or resn HOH or resn TIP*) or resn DMS) and not store3) weight * 1.0 end
      interaction (not segid $Toppar.prot_segid_$nchain1) ((resn WAT or resn HOH or resn TIP*) or resn DMS) weight * 0.0 end
      interaction (segid $Toppar.prot_segid_$nchain1) (not (((resn WAT or resn HOH or resn TIP*) or resn DMS) and store3)) weight * 0.0 end
    end
    energy end
    evaluate ($ener_water_$nchain1 = $ener)
    evaluate ($enerall = $enerall + $ener)
    evaluate ($vdw_water_$nchain1 = $vdw)
    evaluate ($elec_water_$nchain1 = $elec)
   
  end loop nloop1
  if ($data.ncomponents < 6) then
    eval($nchain1 = $data.ncomponents)
    while ($nchain1 < 6) loop nloop1
      eval($nchain1 = $nchain1 + 1)
      evaluate ($ener_water_$nchain1 = 0.0)
      evaluate ($vdw_water_$nchain1 = 0.0)
      evaluate ($elec_water_$nchain1 = 0.0)
    end loop nloop1
  end if

  eval($nchain1 = 0)

  igroup
    while ($nchain1 < $data.ncomponents) loop nloop2
      eval($nchain1 = $nchain1 + 1)
      interaction (segid $Toppar.prot_segid_$nchain1) (all) weight * 0.0 end
    end loop nloop2
    interaction (((resn WAT or resn HOH or resn TIP*) or resn DMS) and not store3) 
                (((resn WAT or resn HOH or resn TIP*) or resn DMS) and not store3)  weight * 1.0 end
    interaction (store3) (store3)  weight * 0.0 end
  end
  energy end
  evaluate ($ener_water_water = $ener)
  evaluate ($enerall = $enerall + $ener)
  evaluate ($vdw_water_water = $vdw)
  evaluate ($elec_water_water = $elec)
else
  eval($nchain1 = 0)

  while ($nchain1 < 6) loop nloop1
    eval($nchain1 = $nchain1 + 1)
    evaluate ($ener_water_$nchain1 = 0.0)
    evaluate ($vdw_water_$nchain1 = 0.0)
    evaluate ($elec_water_$nchain1 = 0.0)
  end loop nloop1
  evaluate ($ener_water_water = 0.0)
  evaluate ($vdw_water_water = 0.0)
  evaluate ($elec_water_water = 0.0)
end if

! File name
evaluate ($initialstruct = $file - "PREVIT:")

remarks =============================================================== 
remarks HADDOCK run for $Filenames.fileroot
remarks initial structure: $initialstruct
remarks final NOE weights: unambig $Data.unamb_cool3 amb: $Data.amb_cool3
remarks =============================================================== 
remarks            total,bonds,angles,improper,dihe,vdw,elec,air,cdih,coup,rdcs,vean,dani,xpcs,rg
remarks energies: $enerall, $bondall, $anglall, $imprall, $diheall, $vdwall, $elecall, $noeall, $cdihall, $coupall, $saniall, $veanall, $daniall, $xpcsall, $rgall
remarks =============================================================== 
remarks            bonds,angles,impropers,dihe,air,cdih,coup,rdcs,vean,dani,xpcs
remarks rms-dev.: $rms_bonds,$rms_angles,$rms_impropers,$rms_dihedrals,$rms_noe,$rms_cdih,$rms_coup, $rms_sani, $rms_vean, $rms_dani, $rms_xpcs
remarks =============================================================== 
remarks               air,cdih,coup,rdcs,vean,dani,xpcs
remarks               >0.3,>5,>1,>0,>5,>0.2,>0.2
remarks violations.: $violations_noe, $violations_cdih, $violations_coup, $violations_sani, $violations_vean, $violations_dani, $violations_xpcs
remarks ===============================================================
remarks                        CVpartition#,violations,rms
remarks AIRs cross-validation: $npart, $violations_test_noe, $rms_test_noe
remarks ===============================================================
remarks NCS energy: $ncs
remarks ===============================================================
remarks Symmetry energy: $esym
remarks =============================================================== 
remarks Desolvation energy: $edesolv 
remarks Internal energy free molecules: $eintfree
remarks Internal energy complex: $eintcplx
remarks Binding energy: $dhbinding
remarks =============================================================== 
remarks buried surface area: $saburied
remarks =============================================================== 
remarks water - chain1: $ener_water_1 $vdw_water_1 $elec_water_1
remarks water - chain2: $ener_water_2 $vdw_water_2 $elec_water_2
remarks water - chain3: $ener_water_3 $vdw_water_3 $elec_water_3
remarks water - chain4: $ener_water_4 $vdw_water_4 $elec_water_4
remarks water - chain5: $ener_water_5 $vdw_water_5 $elec_water_5
remarks water - chain6: $ener_water_6 $vdw_water_6 $elec_water_6
remarks =============================================================== 
remarks water - water: $ener_water_water $vdw_water_water $elec_water_water
remarks =============================================================== 
