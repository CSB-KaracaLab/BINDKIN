! print_geom.inp
!    Analyze and print covalent geometry statistics
!
! ***********************************************************************
! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           *
! * Originally adapted from Aria 1.2 from Nilges and Linge, EMBL.       *
! * All rights reserved.                                                *
! * This code is part of the HADDOCK software and governed by its       *
! * license. Please see the LICENSE file that should have been included *
! * as part of this package.                                            *
! ***********************************************************************
!

@RUN:protocols/initialize.cns(iteration=$iteration;)

@NEWIT:iteration.cns(iteration=$iteration;)

@RUN:run.cns(
iteration =$iteration;
filenames =$filenames;
data      =$data;
iterations=$iterations;
saprotocol=$saprotocol;
refine    =$refine;
toppar    =$toppar;
analysis  =$analysis;
)

!reads in structure, coordinates and parameter files
@RUN:protocols/read_struc.cns

!set the energy flags:
@@RUN:protocols/flags_new.cns(Iteration=$Iteration; Data=$Data; )

set display=NEWIT:analysis/geom.disp end
display # geometry analysis
display # filename	rms_bond	rms_angle	rms_impr rmsd_dihe

flags exclude * include bond angle impr dihe end

evaluate ($sum_rms_bond = 0)
evaluate ($sumsq_rms_bond = 0)
evaluate ($sum_rms_angle = 0)
evaluate ($sumsq_rms_angle = 0)
evaluate ($sum_rms_impr = 0)
evaluate ($sumsq_rms_impr = 0)
evaluate ($sum_rms_dihe = 0)
evaluate ($sumsq_rms_dihe = 0)

@PREVIT:file.cns(filenames=$filenames)

evaluate ($count = 0)
evaluate ($TotalNstruct = 0)
while ($count lt $Iterations.Structures) loop main
   evaluate ($count=$count+1)
   evaluate ($file = $filenames.bestfile_$count)
   if ($file ne "") then
      evaluate ($TotalNstruct = $TotalNstruct + 1)
   end if
end loop main

if ($Iterations.anastruc > $TotalNstruct) then
  evaluate ($Iterations.anastruc = $ToTalNstruct)
end if

evaluate ($count = 1)
evaluate ($nstruc1 = 0)
while ($count le $Iterations.anastruc) loop main
   evaluate ($file = $filenames.bestfile_$count)
   coor init end
   if ($file ne "") then
     coor @@$file
     evaluate ($nstruc1 = $nstruc1 + 1)

     print thresh=0.025 bonds  evaluate ($rms_bond = $result)
     evaluate ($sum_rms_bond = $sum_rms_bond + $rms_bond)
     evaluate ($sumsq_rms_bond = $sumsq_rms_bond + $rms_bond**2)

     print thresh=2.5 angle   evaluate ($rms_angle = $result)
     evaluate ($sum_rms_angle = $sum_rms_angle + $rms_angle)
     evaluate ($sumsq_rms_angle = $sumsq_rms_angle + $rms_angle**2)

     print thresh=2.5 impr      evaluate ($rms_impr = $result)
     evaluate ($sum_rms_impr = $sum_rms_impr + $rms_impr)
     evaluate ($sumsq_rms_impr = $sumsq_rms_impr + $rms_impr**2)
     
     ! the following is needed to avoid having dihedral violations for the
     ! backbone phi/psi dihedrals that are a sum of six cos terms that
     ! are analysed separately in the print dihe statement.
     ! Note that a few ch1 dihedral will be excluded as well...
     igroup interaction (not name C) (not name C) end
     print thresh=30.0 dihe      evaluate ($rms_dihe = $result)
     igroup interaction (all) (all) end
     evaluate ($sum_rms_dihe = $sum_rms_dihe + $rms_dihe)
     evaluate ($sumsq_rms_dihe = $sumsq_rms_dihe + $rms_dihe**2)

     energy end
     display # $file	$rms_bond	$rms_angle	$rms_impr $rms_dihe
   end if
   if ($count ge $Iterations.anastruc) then exit loop main end if
   evaluate ($count = $count + 1)
end loop main

evaluate ($mean_rms_bond = $sum_rms_bond / $nstruc1)
evaluate ($stdev_rms_bond =
          sqrt(($sumsq_rms_bond - $nstruc1*$mean_rms_bond**2)/ $nstruc1))
evaluate ($mean_rms_angle = $sum_rms_angle / $nstruc1)
evaluate ($stdev_rms_angle =
          sqrt(($sumsq_rms_angle - $nstruc1*$mean_rms_angle**2)/ $nstruc1))
evaluate ($mean_rms_impr = $sum_rms_impr / $nstruc1)
evaluate ($stdev_rms_impr =
          sqrt(($sumsq_rms_impr - $nstruc1*$mean_rms_impr**2)/ $nstruc1))
evaluate ($mean_rms_dihe = $sum_rms_dihe / $nstruc1)
evaluate ($stdev_rms_dihe =
          sqrt(($sumsq_rms_dihe - $nstruc1*$mean_rms_dihe**2)/ $nstruc1))

display # mean values all
display # bond $mean_rms_bond (+/- $stdev_rms_bond )
display # angle $mean_rms_angle (+/- $stdev_rms_angle )
display # impr $mean_rms_impr (+/- $stdev_rms_impr )
display # dihe $mean_rms_dihe (+/- $stdev_rms_dihe )
display mean_rms_bond	stdev_rms_bond	mean_rms_angle	stdev_rms_angle	mean_rms_impr	stdev_rms_impr
display $mean_rms_bond	$stdev_rms_bond	$mean_rms_angle	$stdev_rms_angle	$mean_rms_impr	$stdev_rms_impr	$mean_rms_dihe $stdev_rms_dihe

stop
