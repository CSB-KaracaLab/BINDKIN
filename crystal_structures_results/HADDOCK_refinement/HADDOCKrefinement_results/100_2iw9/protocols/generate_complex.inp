! generate_complex.inp
!    Merge the coordinates and topologies of the various components of the complex
!
! ***********************************************************************
! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           *
! * All rights reserved.                                                *
! * This code is part of the HADDOCK software and governed by its       *
! * license. Please see the LICENSE file that should have been included *
! * as part of this package.                                            *
! ***********************************************************************
!
{- begin block parameter definition -} define(

{================== parameter files ===================}

{* protein parameter file *}
{===>} prot_parameter_infile="RUN:toppar/protein-allhdg5-4.param";

{* nucleic acid parameter file *}
{===>} nucl_parameter_infile="RUN:/toppar/dna-rna-allatom-hj-opls-1.3.param";

{* carbohydrate parameter file *}
{===>} carbo_parameter_infile="RUN:/toppar/carbohydrate.param";

{* solvent parameter file *}
{===>} solv_parameter_infile="RUN:/toppar/water-allhdg5-4.param";

{* co-factor parameter file *}
{===>} cofac_parameter_infile="RUN:/toppar/ligand.param";

{* ligands parameter file *}
{===>} ligands_parameter_infile="RUN:/toppar/fragment_probes.param";

{* ion parameter file *}
{===>} ion_parameter_infile="RUN:/toppar/ion.param";

{* heme parameter file *}
{===>} heme_parameter_infile="RUN:/toppar/hemes-allhdg.param";

 ) {- end block parameter definition -}

! a maximum number of structures to be written to avoid
! filling the disk space
evalute ($maxstruc = 4000)

@RUN:protocols/initialize.cns(iteration=$iteration;)

@RUN:begin/iteration.cns(iteration=$iteration;)

@RUN:run.cns(
iteration =$iteration;
filenames =$filenames;
Data      =$Data;
iterations=$iterations;
saprotocol=$saprotocol;
refine    =$refine;
toppar    =$toppar;
analysis  =$analysis;)

parameter
   if ( &BLANK%prot_parameter_infile = false ) then
     @@&prot_parameter_infile
   end if
   if ( &BLANK%ion_parameter_infile = false ) then
     @@&ion_parameter_infile
   end if
   if ( &BLANK%nucl_parameter_infile = false ) then
     @@&nucl_parameter_infile
   end if
   if ( &BLANK%solv_parameter_infile = false ) then
     @@&solv_parameter_infile
   end if
   if ( &BLANK%ligands_parameter_infile = false ) then
     @@&ligands_parameter_infile
   end if
   if ( &BLANK%cofac_parameter_infile = false ) then
     @@&cofac_parameter_infile
   end if
   if ( &BLANK%heme_parameter_infile = false ) then
     @@&heme_parameter_infile
   end if
end

eval($nchain1 = 0)
while ($nchain1 < $data.ncomponents) loop cloop1
  eval($nchain1 = $nchain1 + 1)
  evaluate($coor_infile_$nchain1= "RUN:begin/" + $Toppar.prot_root_$nchain1 + ".pdb")
  evaluate($psf_infile_$nchain1= "RUN:begin/" + $Toppar.prot_root_$nchain1 + ".psf")
  structure
    @@$psf_infile_$nchain1
  end
end loop cloop1

evaluate ($nfa = 0)
evaluate ($nstruc = 1)
for $fileA in ( @@RUN:begin/file_A.list ) loop Acoor
 evaluate ($filename = $fileA)
 evaluate ($nfa = $nfa + 1)  
 coor @@$filename

 if ($data.ncomponents>1) then
  evaluate ($nfb = 0)
  for $fileB in ( @@RUN:begin/file_B.list ) loop Bcoor
    evaluate ($filename = $fileB)
    evaluate ($combine_structures = true)
    evaluate ($nfb = $nfb + 1)  
    if ($saprotocol.crossdock eq false) then
      if ($nfb # $nfa) then
        evaluate ($combine_structures = false)
      end if
    end if
    if ($combine_structures eq true) then
    coor @@$filename
    if ($data.ncomponents>2) then
      evaluate ($nfc = 0)    
      for $fileC in ( @@RUN:begin/file_C.list ) loop Ccoor
        evaluate ($filename = $fileC)
        evaluate ($combine_structures = true)
        evaluate ($nfc = $nfc + 1)  
        if ($saprotocol.crossdock eq false) then
          if ($nfc # $nfa) then
            evaluate ($combine_structures = false)
          end if
        end if
        if ($combine_structures eq true) then        
        coor @@$filename
        if ($data.ncomponents>3) then
          evaluate ($nfd = 0)            
          for $fileD in ( @@RUN:begin/file_D.list ) loop Dcoor
            evaluate ($filename = $fileD)
            evaluate ($combine_structures = true)
            evaluate ($nfd = $nfd + 1)  
            if ($saprotocol.crossdock eq false) then
              if ($nfd # $nfa) then
                evaluate ($combine_structures = false)
              end if
            end if            
            if ($combine_structures eq true) then
            coor @@$filename
            if ($data.ncomponents>4) then
              evaluate ($nfe = 0)                
              for $fileE in ( @@RUN:begin/file_E.list ) loop Ecoor
                evaluate ($filename = $fileE)
                evaluate ($combine_structures = true)
                evaluate ($nfe = $nfe + 1)  
                if ($saprotocol.crossdock eq false) then
                  if ($nfe # $nfa) then
                    evaluate ($combine_structures = false)
                  end if
                end if                            
                if ($combine_structures eq true) then                
                coor @@$filename
                if ($data.ncomponents>5) then
                  evaluate ($nff = 0)                                
                  for $fileF in ( @@RUN:begin/file_F.list ) loop Fcoor
                    evaluate ($filename = $fileF)
                    evaluate ($combine_structures = true)
                    evaluate ($nff = $nff + 1)  
                    if ($saprotocol.crossdock eq false) then
                      if ($nff # $nfa) then
                        evaluate ($combine_structures = false)
                      end if
                    end if                                                
                    if ($combine_structures eq true) then
                    coor @@$filename
		    if ($saprotocol.randorien eq true) then
                      @RUN:protocols/separate.cns(Data=$Data; Toppar=$Toppar)
!		    else
!                      do (store9=0) (all)
!                      do (store9=1) (attr q=0.0)
!                      @@RUN:protocols/rebuild-unknown.cns
		    end if
                    evaluate ($coorfile_$nstruc = "RUN:begin/" + $Filenames.fileroot + "_" + encode($nstruc) + ".pdb")
		    do (q=1) (all)
		    do (b=10) (all)
                    write coor output=$coorfile_$nstruc end
                    evaluate ($nstruc = $nstruc + 1)
                    if ($nstruc > 4000) then
                      display WARNING: THE NUMBER OF INITIAL STRUCTURES FOR DOCKING IS SET TO $maxstruc
                      display          TO AVOID FILLING UP TOO MUCH DISK SPACE
                      display          TO INCREASE IT EDIT THE generate_complex.inp SCRIPT
                      display          NOW STOPPING
                      stop
                    end if
                  end if                    
                  end loop Fcoor
		else
		  if ($saprotocol.randorien eq true) then
		    @RUN:protocols/separate.cns(Data=$Data; Toppar=$Toppar)
!		  else
!                    do (store9=0) (all)
!                    do (store9=1) (attr q=0.0)
!                    @@RUN:protocols/rebuild-unknown.cns
                  end if
                  evaluate ($coorfile_$nstruc = "RUN:begin/" + $Filenames.fileroot + "_" + encode($nstruc) + ".pdb")
		  do (q=1) (all)
		  do (b=10) (all)
                  write coor output=$coorfile_$nstruc end
                  evaluate ($nstruc = $nstruc + 1)
                  if ($nstruc > 4000) then
                    display WARNING: THE NUMBER OF INITIAL STRUCTURES FOR DOCKING IS SET TO $maxstruc
                    display          TO AVOID FILLING UP TOO MUCH DISK SPACE
                    display          TO INCREASE IT EDIT THE generate_complex.inp SCRIPT
                    display          NOW STOPPING
                    stop
                  end if
                end if
              end if
              end loop Ecoor
	    else
	      if ($saprotocol.randorien eq true) then
	        @RUN:protocols/separate.cns(Data=$Data; Toppar=$Toppar)
!              else
!                do (store9=0) (all)
!                do (store9=1) (attr q=0.0)
!                @@RUN:protocols/rebuild-unknown.cns
	      end if
              evaluate ($coorfile_$nstruc = "RUN:begin/" + $Filenames.fileroot + "_" + encode($nstruc) + ".pdb")
	      do (q=1) (all)
	      do (b=10) (all)
              write coor output=$coorfile_$nstruc end
              evaluate ($nstruc = $nstruc + 1)
                if ($nstruc > 4000) then
                display WARNING: THE NUMBER OF INITIAL STRUCTURES FOR DOCKING IS SET TO $maxstruc
                display          TO AVOID FILLING UP TOO MUCH DISK SPACE
                display          TO INCREASE IT EDIT THE generate_complex.inp SCRIPT
                display          NOW STOPPING
                stop
              end if
            end if
          end if            
          end loop Dcoor
	else
	  if ($saprotocol.randorien eq true) then
	    @RUN:protocols/separate.cns(Data=$Data; Toppar=$Toppar)
!	  else
!            do (store9=0) (all)
!            do (store9=1) (attr q=0.0)
!            @@RUN:protocols/rebuild-unknown.cns
	  end if
          evaluate ($coorfile_$nstruc = "RUN:begin/" + $Filenames.fileroot + "_" + encode($nstruc) + ".pdb")
	  do (q=1) (all)
	  do (b=10) (all)
          write coor output=$coorfile_$nstruc end
          evaluate ($nstruc = $nstruc + 1)
          if ($nstruc > 4000) then
            display WARNING: THE NUMBER OF INITIAL STRUCTURES FOR DOCKING IS SET TO $maxstruc
            display          TO AVOID FILLING UP TOO MUCH DISK SPACE
            display          TO INCREASE IT EDIT THE generate_complex.inp SCRIPT
            display          NOW STOPPING
            stop
          end if
        end if
      end if
      end loop Ccoor
    else
      if ($saprotocol.randorien eq true) then
        @RUN:protocols/separate.cns(Data=$Data; Toppar=$Toppar)
!      else
!        do (store9=0) (all)
!        do (store9=1) (attr q=0.0)
!        @RUN:protocols/rebuild-unknown.cns
      end if
      evaluate ($coorfile_$nstruc = "RUN:begin/" + $Filenames.fileroot + "_" + encode($nstruc) + ".pdb")
      do (q=1) (all)
      do (b=10) (all)
      write coor output=$coorfile_$nstruc end
      evaluate ($nstruc = $nstruc + 1)
      if ($nstruc > 4000) then
        display WARNING: THE NUMBER OF INITIAL STRUCTURES FOR DOCKING IS SET TO $maxstruc
        display          TO AVOID FILLING UP TOO MUCH DISK SPACE
        display          TO INCREASE IT EDIT THE generate_complex.inp SCRIPT
        display          NOW STOPPING
        stop
      end if
    end if
  end if
  end loop Bcoor
 else
  if ($saprotocol.randorien eq true) then
    @RUN:protocols/separate.cns(Data=$Data; Toppar=$Toppar)
!  else
!    do (store9=0) (all)
!    do (store9=1) (attr q=0.0)
!    @@RUN:protocols/rebuild-unknown.cns
  end if
  evaluate ($coorfile_$nstruc = "RUN:begin/" + $Filenames.fileroot + "_" + encode($nstruc) + ".pdb")
  do (q=1) (all)
  do (b=10) (all)
  write coor output=$coorfile_$nstruc end
  evaluate ($nstruc = $nstruc + 1)
  if ($nstruc > 4000) then
    display WARNING: THE NUMBER OF INITIAL STRUCTURES FOR DOCKING IS SET TO $maxstruc
    display          TO AVOID FILLING UP TOO MUCH DISK SPACE
    display          TO INCREASE IT EDIT THE generate_complex.inp SCRIPT
    display          NOW STOPPING
    stop
  end if
 end if
end loop Acoor

evaluate ($structurefile = "RUN:begin/" + $Filenames.fileroot + ".psf")
write structure output=$structurefile end     

stop
