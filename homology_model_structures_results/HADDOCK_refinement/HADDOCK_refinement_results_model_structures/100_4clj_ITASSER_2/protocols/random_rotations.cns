! random_rotations.cns
!    Perform a random rotation
!
! ***********************************************************************
! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           *
! * All rights reserved.                                                *
! * This code is part of the HADDOCK software and governed by its       *
! * license. Please see the LICENSE file that should have been included *
! * as part of this package.                                            *
! ***********************************************************************
!
!minimal spacing distance
  evaluate ($minispacing = 25.0)

!first find the largest dimension of all molecules
  evaluate ($ncount = 0)

  evaluate ($mxdim = 0)
  evaluate ($midim = 1000)
  while ($ncount < $data.ncomponents) loop nloop1
    evaluate ($ncount = $ncount +1)
    evaluate ($watersegname_$ncount = "WAT" + encode($ncount))
    show max (x) (segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount)
    evaluate ($xdim = $result)
    show max (y) (segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount)
    evaluate ($ydim = $result)
    show max (z) (segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount)
    evaluate ($zdim = $result)
    show min (x) (segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount)
    evaluate ($xdim = $xdim - $result)
    show min (y) (segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount)
    evaluate ($ydim = $ydim - $result)
    show min (z) (segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount)
    evaluate ($zdim = $zdim - $result)
    if ($xdim > $mxdim) then
      evaluate ($mxdim = $xdim)
    end if
    if ($xdim < $midim) then
      evaluate ($midim = $xdim)
    end if
    if ($ydim > $mxdim) then
      evaluate ($mxdim = $ydim)
    end if
    if ($ydim < $midim) then
      evaluate ($midim = $ydim)
    end if
    if ($zdim > $mxdim) then
      evaluate ($mxdim = $zdim)
    end if
    if ($zdim < $midim) then
      evaluate ($midim = $zdim)
    end if
  end loop nloop2

  evaluate ($spacing=max($minispacing,10+$mxdim-$midim))
  DISPLAY INITIAL SPACING SET TO $spacing ANGSTROM

  evaluate ($trdis=$spacing/2)
  evaluate ($trc=sqrt($spacing**2 - $trdis**2))
  evaluate ($trd=sqrt($spacing**2 - $trdis**2))
   
  evaluate ($ncount = 0)
  while ($ncount < $data.ncomponents) loop nloop1
    evaluate ($ncount = $ncount +1)
    evaluate ($watersegname_$ncount = "WAT" + encode($ncount))
    coor orient sele=(segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount) end
    do (xcomp = x) (segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount )
    do (ycomp = y) (segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount)
    do (zcomp = z) (segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount)
  end loop nloop1
  do (x = xcomp) (not (resn ANI or resn XAN or resn DAN))
  do (y = ycomp) (not (resn ANI or resn XAN or resn DAN))
  do (z = zcomp) (not (resn ANI or resn XAN or resn DAN))

  evaluate ($ncount = 0)
   
  while ($ncount < $data.ncomponents) loop nloop2
    evaluate ($ncount = $ncount +1)
    show ave (x) (segid $Toppar.prot_segid_$ncount)
    evaluate ($xdis=-$result)
    show ave (y) (segid $Toppar.prot_segid_$ncount)
    evaluate ($ydis=-$result)
    show ave (z) (segid $Toppar.prot_segid_$ncount)
    evaluate ($zdis=-$result)
    coor trans sele=(segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount) vector=($xdis,$ydis,$zdis) end
  end loop nloop2

  show max (x) (segid $Toppar.prot_segid_1)
  evaluate ($xt = -$trdis - $result )
  coor trans sele=(segid $Toppar.prot_segid_1 or segid $watersegname_1) vector=($xt,0,0) end
  if ($data.ncomponents>1) then
    show min (x) (segid $Toppar.prot_segid_2)
    evaluate ($xt = $trdis - $result )
    coor trans sele=(segid $Toppar.prot_segid_2 or segid $watersegname_2) vector=($xt,0,0) end
  end if
  if ($data.ncomponents>2) then
    show min (y) (segid $Toppar.prot_segid_3)
    evaluate ($yt = $trc - $result )
    coor trans sele=(segid $Toppar.prot_segid_3 or segid $watersegname_3) vector=(0,$yt,0) end
  end if
  if ($data.ncomponents>3) then
    show min (y) (segid $Toppar.prot_segid_4)
    evaluate ($yt = 0.5 * ($trc - $result) )
    show min (z) (segid $Toppar.prot_segid_4)
    evaluate ($zt = $trd - $result )
    coor trans sele=(segid $Toppar.prot_segid_4 or segid $watersegname_4) vector=(0,$yt,$zt) end
  end if
  if ($data.ncomponents>4) then
    show min (y) (segid $Toppar.prot_segid_5)
    evaluate ($yt = 0.5 * ($trc - $result) )
    show min (z) (segid $Toppar.prot_segid_5)
    evaluate ($zt = -($trd - $result) )
    coor trans sele=(segid $Toppar.prot_segid_5 or segid $watersegname_5) vector=(0,$yt,$zt) end
  end if
  if ($data.ncomponents>5) then
    evaluate ($ncount = 0)
    while ($ncount < $data.ncomponents) loop nloop2
      evaluate ($ncount = $ncount +1)
      show ave (x) (segid $Toppar.prot_segid_$ncount)
      evaluate ($xdis=-$result)
      show ave (y) (segid $Toppar.prot_segid_$ncount)
      evaluate ($ydis=-$result)
      show ave (z) (segid $Toppar.prot_segid_$ncount)
      evaluate ($zdis=-$result)
      coor trans sele=(segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount) vector=($xdis,$ydis,$zdis) end
    end loop nloop2

    show max (x) (segid $Toppar.prot_segid_1)
    evaluate ($xt = -$trdis - $result )
    coor trans sele=(segid $Toppar.prot_segid_1 or segid $watersegname_1) vector=($xt,0,0) end
    show min (x) (segid $Toppar.prot_segid_2)
    evaluate ($xt = $trdis - $result )
    coor trans sele=(segid $Toppar.prot_segid_2 or segid $watersegname_2) vector=($xt,0,0) end
    show max (y) (segid $Toppar.prot_segid_3)
    evaluate ($yt = -$trdis - $result )
    coor trans sele=(segid $Toppar.prot_segid_3 or segid $watersegname_3) vector=(0,$yt,0) end
    show min (y) (segid $Toppar.prot_segid_4)
    evaluate ($yt = $trdis - $result )
    coor trans sele=(segid $Toppar.prot_segid_4 or segid $watersegname_4) vector=(0,$yt,0) end
    show max (z) (segid $Toppar.prot_segid_5)
    evaluate ($zt = -$trdis - $result )
    coor trans sele=(segid $Toppar.prot_segid_5 or segid $watersegname_5) vector=(0,0,$zt) end
    show min (z) (segid $Toppar.prot_segid_6)
    evaluate ($zt = $trdis - $result )
    coor trans sele=(segid $Toppar.prot_segid_6 or segid $watersegname_6) vector=(0,0,$zt) end
  end if

  !random translation within a 10A cube
  evaluate ($ncount = 0)
  while ($ncount < $data.ncomponents) loop nloop3
    evaluate ($ncount = $ncount +1)
    evaluate ($xd = 10.0 * (0.5 - ran()))
    evaluate ($yd = 10.0 * (0.5 - ran()))
    evaluate ($zd = 10.0 * (0.5 - ran()))
    coor trans sele=(segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount) vector=($xd,$yd,$zd) end
  end loop nloop3

!random rotation of molecules
  evaluate ($ncount = 0)
  while ($ncount < $data.ncomponents) loop nloop4
    evaluate ($ncount = $ncount +1)
 
    show aver (x) (segid $Toppar.prot_segid_$ncount)
    evaluate ($xc = $result)
    show aver (y) (segid $Toppar.prot_segid_$ncount)
    evaluate ($yc = $result)
    show aver (z) (segid $Toppar.prot_segid_$ncount)
    evaluate ($zc = $result)

    @RUN:protocols/get_random_rotation.cns(Rotation=$rand_rot;)
    coor 
      center=($xc $yc $zc)
      rotate quaternion $rand_rot.q0 $rand_rot.q1 $rand_rot.q2 $rand_rot.q3
      sele=(segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount) 
    end

  end loop nloop4

!check if symmetry is used and reposition if needed
  if ($data.flags.sym eq true) then

    evaluate ($trdis = $trdis + 20)

    if ($data.ncomponents = 2) then
      if ($data.numc2sym > 0) then
        @RUN:protocols/center.cns
	{* translate and generate symmetric positions by rotation around z *}
        coor trans sele=(all) vector=($trdis,0,0) end
        {* rotate around z axis *}
        evaluate ($xr = 180)
        evaluate ($x1 = cos($xr))
        evaluate ($x2 = -sin($xr))
        evaluate ($x3 = 0 )
        evaluate ($y1 = sin($xr))
        evaluate ($y2 = cos($xr)) 
        evaluate ($y3 = 0 )
        evaluate ($z1 = 0 )
        evaluate ($z2 = 0 )
        evaluate ($z3 = 1 )
        coor 
          center=(0 0 0)
          rotate matrix=($x1 $x2 $x3) ($y1 $y2 $y3) ($z1 $z2 $z3) 
          sele=(segid $Toppar.prot_segid_2 or segid $watersegname_2) 
        end
      end if
    end if

    if ($data.ncomponents = 3) then
      if ($data.numc3sym > 0) then
        @RUN:protocols/center.cns
	{* translate and generate symmetric positions by rotation around z *}
        coor trans sele=(all) vector=($trdis,0,0) end
        {* rotate around z axis *}
        evaluate ($xr = 120)
        evaluate ($x1 = cos($xr))
        evaluate ($x2 = -sin($xr))
        evaluate ($x3 = 0 )
        evaluate ($y1 = sin($xr))
        evaluate ($y2 = cos($xr)) 
        evaluate ($y3 = 0 )
        evaluate ($z1 = 0 )
        evaluate ($z2 = 0 )
        evaluate ($z3 = 1 )
        coor 
          center=(0 0 0)
          rotate matrix=($x1 $x2 $x3) ($y1 $y2 $y3) ($z1 $z2 $z3) 
          sele=(segid $Toppar.prot_segid_2 or segid $watersegname_2) 
        end
        evaluate ($xr = 240)
        evaluate ($x1 = cos($xr))
        evaluate ($x2 = -sin($xr))
        evaluate ($x3 = 0 )
        evaluate ($y1 = sin($xr))
        evaluate ($y2 = cos($xr)) 
        evaluate ($y3 = 0 )
        evaluate ($z1 = 0 )
        evaluate ($z2 = 0 )
        evaluate ($z3 = 1 )
        coor 
          center=(0 0 0)
          rotate matrix=($x1 $x2 $x3) ($y1 $y2 $y3) ($z1 $z2 $z3) 
          sele=(segid $Toppar.prot_segid_3 or segid $watersegname_3) 
        end
      end if
    end if

    if ($data.ncomponents = 4) then
      if ($data.numc4sym > 0) then
        @RUN:protocols/center.cns
	{* translate and generate symmetric positions by rotation around z *}
        coor trans sele=(all) vector=($trdis,0,0) end
        {* rotate around z axis *}
        evaluate ($xr = 90)
        evaluate ($x1 = cos($xr))
        evaluate ($x2 = -sin($xr))
        evaluate ($x3 = 0 )
        evaluate ($y1 = sin($xr))
        evaluate ($y2 = cos($xr)) 
        evaluate ($y3 = 0 )
        evaluate ($z1 = 0 )
        evaluate ($z2 = 0 )
        evaluate ($z3 = 1 )
        coor 
          center=(0 0 0)
          rotate matrix=($x1 $x2 $x3) ($y1 $y2 $y3) ($z1 $z2 $z3) 
          sele=(segid $Toppar.prot_segid_2 or segid $watersegname_2) 
        end
        evaluate ($xr = 180)
        evaluate ($x1 = cos($xr))
        evaluate ($x2 = -sin($xr))
        evaluate ($x3 = 0 )
        evaluate ($y1 = sin($xr))
        evaluate ($y2 = cos($xr)) 
        evaluate ($y3 = 0 )
        evaluate ($z1 = 0 )
        evaluate ($z2 = 0 )
        evaluate ($z3 = 1 )
        coor 
          center=(0 0 0)
          rotate matrix=($x1 $x2 $x3) ($y1 $y2 $y3) ($z1 $z2 $z3) 
          sele=(segid $Toppar.prot_segid_3 or segid $watersegname_3) 
        end
        evaluate ($xr = -90)
        evaluate ($x1 = cos($xr))
        evaluate ($x2 = -sin($xr))
        evaluate ($x3 = 0 )
        evaluate ($y1 = sin($xr))
        evaluate ($y2 = cos($xr)) 
        evaluate ($y3 = 0 )
        evaluate ($z1 = 0 )
        evaluate ($z2 = 0 )
        evaluate ($z3 = 1 )
        coor 
          center=(0 0 0)
          rotate matrix=($x1 $x2 $x3) ($y1 $y2 $y3) ($z1 $z2 $z3) 
          sele=(segid $Toppar.prot_segid_4 or segid $watersegname_4) 
        end
      end if
    end if

    if ($data.ncomponents = 5) then
      if ($data.numc5sym > 0) then
        @RUN:protocols/center.cns
	{* translate and generate symmetric positions by rotation around z *}
        coor trans sele=(all) vector=($trdis,0,0) end
        {* rotate around z axis *}
        evaluate ($xr = 72)
        evaluate ($x1 = cos($xr))
        evaluate ($x2 = -sin($xr))
        evaluate ($x3 = 0 )
        evaluate ($y1 = sin($xr))
        evaluate ($y2 = cos($xr)) 
        evaluate ($y3 = 0 )
        evaluate ($z1 = 0 )
        evaluate ($z2 = 0 )
        evaluate ($z3 = 1 )
        coor 
          center=(0 0 0)
          rotate matrix=($x1 $x2 $x3) ($y1 $y2 $y3) ($z1 $z2 $z3) 
          sele=(segid $Toppar.prot_segid_2 or segid $watersegname_2) 
        end
        evaluate ($xr = 144)
        evaluate ($x1 = cos($xr))
        evaluate ($x2 = -sin($xr))
        evaluate ($x3 = 0 )
        evaluate ($y1 = sin($xr))
        evaluate ($y2 = cos($xr)) 
        evaluate ($y3 = 0 )
        evaluate ($z1 = 0 )
        evaluate ($z2 = 0 )
        evaluate ($z3 = 1 )
        coor 
          center=(0 0 0)
          rotate matrix=($x1 $x2 $x3) ($y1 $y2 $y3) ($z1 $z2 $z3) 
          sele=(segid $Toppar.prot_segid_3 or segid $watersegname_3) 
        end
        evaluate ($xr = -144)
        evaluate ($x1 = cos($xr))
        evaluate ($x2 = -sin($xr))
        evaluate ($x3 = 0 )
        evaluate ($y1 = sin($xr))
        evaluate ($y2 = cos($xr)) 
        evaluate ($y3 = 0 )
        evaluate ($z1 = 0 )
        evaluate ($z2 = 0 )
        evaluate ($z3 = 1 )
        coor 
          center=(0 0 0)
          rotate matrix=($x1 $x2 $x3) ($y1 $y2 $y3) ($z1 $z2 $z3) 
          sele=(segid $Toppar.prot_segid_4 or segid $watersegname_4) 
        end
        evaluate ($xr = -72)
        evaluate ($x1 = cos($xr))
        evaluate ($x2 = -sin($xr))
        evaluate ($x3 = 0 )
        evaluate ($y1 = sin($xr))
        evaluate ($y2 = cos($xr)) 
        evaluate ($y3 = 0 )
        evaluate ($z1 = 0 )
        evaluate ($z2 = 0 )
        evaluate ($z3 = 1 )
        coor 
          center=(0 0 0)
          rotate matrix=($x1 $x2 $x3) ($y1 $y2 $y3) ($z1 $z2 $z3) 
          sele=(segid $Toppar.prot_segid_5 or segid $watersegname_5) 
        end
      end if
    end if
  end if

  do (x = refx) (resn ANI or resn DAN or resn XAN)
  do (y = refy) (resn ANI or resn DAN or resn XAN)
  do (z = refz) (resn ANI or resn DAN or resn XAN)
 
! evaluate ($outname = "RUN:" + "begin/" + $Filenames.fileroot + "_init_" + encode($count) + ".pdb")
! write coor output=$outname end
