! sa_ltad_cool1.cns
!    Perform the first simulated annealing stage of it1
!
! ***********************************************************************
! * Copyright 2003-2015 Alexandre Bonvin, Utrecht University.           *
! * Originally adapted from Aria 1.2 from Nilges and Linge, EMBL.       *
! * All rights reserved.                                                *
! * This code is part of the HADDOCK software and governed by its       *
! * license. Please see the LICENSE file that should have been included *
! * as part of this package.                                            *
! ***********************************************************************
!

module(SaProtocol;Data;Toppar)

! module sa_ltad_cool1.cns
! torsion dynamics cooling

evaluate ($ncycle = 10)

evaluate ($interstep = (&SaProtocol.inter_fin_rigid - &SaProtocol.inter_init_rigid)/($ncycle-1))
evaluate ($kinter = &SaProtocol.inter_init_rigid)

evaluate ($asy_add = (&Data.asy_cool1-&Data.asy_hot)/$ncycle)
evaluate ($masy_add = (&Data.masy_cool1-&Data.masy_hot)/$ncycle)

evaluate ($asy=&Data.asy_hot)
evaluate ($masy=&Data.masy_hot)
noe 
    rswitch ambi &Data.Rswi_hot 
    rswitch dist &Data.Rswi_hot
    rswitch hbon &Data.Rswi_hot

    mrswitch ambi &Data.mRswi_hot 
    mrswitch dist &Data.mRswi_hot
    mrswitch hbon &Data.mRswi_hot

    asym ambi &Data.asy_hot 
    asym dist &Data.asy_hot
    asym hbon &Data.asy_hot

    masym ambi &Data.masy_hot 
    masym dist &Data.masy_hot
    masym hbon &Data.masy_hot
end

restraints dihedral   scale=&Data.dihedrals_cool1   end
couplings class c1 force &Data.c1_cool1 end
couplings class c2 force &Data.c2_cool1 end
couplings class c3 force &Data.c3_cool1 end
couplings class c4 force &Data.c4_cool1 end
couplings class c5 force &Data.c5_cool1 end

evaluate( $k_sani_1  = &Data.rdc1_hot)
if (&Data.rdc1_hot > 0) then
  evaluate( $sani_fac_1 = ( &Data.rdc1_cool1 / &Data.rdc1_hot)^( 1 / $ncycle))
else
  evaluate( $sani_fac_1 = 0)
end if
evaluate( $k_sani_2  = &Data.rdc2_hot)
if (&Data.rdc2_hot > 0) then
  evaluate( $sani_fac_2 = ( &Data.rdc2_cool1 / &Data.rdc2_hot)^( 1 / $ncycle))
else
  evaluate( $sani_fac_2 = 0)
end if
evaluate( $k_sani_3  = &Data.rdc3_hot)
if (&Data.rdc3_hot > 0) then
  evaluate( $sani_fac_3 = ( &Data.rdc3_cool1 / &Data.rdc3_hot)^( 1 / $ncycle))
else
  evaluate( $sani_fac_3 = 0)
end if
evaluate( $k_sani_4  = &Data.rdc4_hot)
if (&Data.rdc4_hot > 0) then
  evaluate( $sani_fac_4 = ( &Data.rdc4_cool1 / &Data.rdc4_hot)^( 1 / $ncycle))
else
  evaluate( $sani_fac_4 = 0)
end if
evaluate( $k_sani_5  = &Data.rdc5_hot)
if (&Data.rdc5_hot > 0) then
  evaluate( $sani_fac_5 = ( &Data.rdc5_cool1 / &Data.rdc5_hot)^( 1 / $ncycle))
else
  evaluate( $sani_fac_5 = 0)
end if

if ($Data.flags.sani eq true) then
  sani class rdc1 force $k_sani_1 end
  sani class rdc2 force $k_sani_2 end
  sani class rdc3 force $k_sani_3 end
  sani class rdc4 force $k_sani_4 end
  sani class rdc5 force $k_sani_5 end
end if

evaluate( $k_dani_1  = &Data.dan1_hot)
if (&Data.dan1_hot > 0) then
  evaluate( $dani_fac_1 = ( &Data.dan1_cool1 / &Data.dan1_hot)^( 1 / $ncycle))
else
  evaluate( $dani_fac_1 = 0)
end if
evaluate( $k_dani_2  = &Data.dan2_hot)
if (&Data.dan2_hot > 0) then
  evaluate( $dani_fac_2 = ( &Data.dan2_cool1 / &Data.dan2_hot)^( 1 / $ncycle))
else
  evaluate( $dani_fac_2 = 0)
end if
evaluate( $k_dani_3  = &Data.dan3_hot)
if (&Data.dan3_hot > 0) then
  evaluate( $dani_fac_3 = ( &Data.dan3_cool1 / &Data.dan3_hot)^( 1 / $ncycle))
else
  evaluate( $dani_fac_3 = 0)
end if
evaluate( $k_dani_4  = &Data.dan4_hot)
if (&Data.dan4_hot > 0) then
  evaluate( $dani_fac_4 = ( &Data.dan4_cool1 / &Data.dan4_hot)^( 1 / $ncycle))
else
  evaluate( $dani_fac_4 = 0)
end if
evaluate( $k_dani_5  = &Data.dan5_hot)
if (&Data.dan5_hot > 0) then
  evaluate( $dani_fac_5 = ( &Data.dan5_cool1 / &Data.dan5_hot)^( 1 / $ncycle))
else
  evaluate( $dani_fac_5 = 0)
end if

if ($Data.flags.dani eq true) then
  dani class dan1 force $k_dani_1 end
  dani class dan2 force $k_dani_2 end
  dani class dan3 force $k_dani_3 end
  dani class dan4 force $k_dani_4 end
  dani class dan5 force $k_dani_5 end
end if

evaluate( $k_xpcs_1  = &Data.pcs1_hot)
if (&Data.pcs1_hot > 0) then
  evaluate( $xpcs_fac_1 = ( &Data.pcs1_cool1 / &Data.pcs1_hot)^( 1 / $ncycle))
else
  evaluate( $xpcs_fac_1 = 0)
end if
evaluate( $k_xpcs_2  = &Data.pcs2_hot)
if (&Data.pcs2_hot > 0) then
  evaluate( $xpcs_fac_2 = ( &Data.pcs2_cool1 / &Data.pcs2_hot)^( 1 / $ncycle))
else
  evaluate( $xpcs_fac_2 = 0)
end if
evaluate( $k_xpcs_3  = &Data.pcs3_hot)
if (&Data.pcs3_hot > 0) then
  evaluate( $xpcs_fac_3 = ( &Data.pcs3_cool1 / &Data.pcs3_hot)^( 1 / $ncycle))
else
  evaluate( $xpcs_fac_3 = 0)
end if
evaluate( $k_xpcs_4  = &Data.pcs4_hot)
if (&Data.pcs4_hot > 0) then
  evaluate( $xpcs_fac_4 = ( &Data.pcs4_cool1 / &Data.pcs4_hot)^( 1 / $ncycle))
else
  evaluate( $xpcs_fac_4 = 0)
end if
evaluate( $k_xpcs_5  = &Data.pcs5_hot)
if (&Data.pcs5_hot > 0) then
  evaluate( $xpcs_fac_5 = ( &Data.pcs5_cool1 / &Data.pcs5_hot)^( 1 / $ncycle))
else
  evaluate( $xpcs_fac_5 = 0)
end if
evaluate( $k_xpcs_6  = &Data.pcs6_hot)
if (&Data.pcs6_hot > 0) then
  evaluate( $xpcs_fac_6 = ( &Data.pcs6_cool1 / &Data.pcs6_hot)^( 1 / $ncycle))
else
  evaluate( $xpcs_fac_6 = 0)
end if
evaluate( $k_xpcs_7  = &Data.pcs7_hot)
if (&Data.pcs7_hot > 0) then
  evaluate( $xpcs_fac_7 = ( &Data.pcs7_cool1 / &Data.pcs7_hot)^( 1 / $ncycle))
else
  evaluate( $xpcs_fac_7 = 0)
end if
evaluate( $k_xpcs_8  = &Data.pcs8_hot)
if (&Data.pcs8_hot > 0) then
  evaluate( $xpcs_fac_8 = ( &Data.pcs8_cool1 / &Data.pcs8_hot)^( 1 / $ncycle))
else
  evaluate( $xpcs_fac_8 = 0)
end if
evaluate( $k_xpcs_9  = &Data.pcs9_hot)
if (&Data.pcs9_hot > 0) then
  evaluate( $xpcs_fac_9 = ( &Data.pcs9_cool1 / &Data.pcs9_hot)^( 1 / $ncycle))
else
  evaluate( $xpcs_fac_9 = 0)
end if
evaluate( $k_xpcs_A  = &Data.pcsA_hot)
if (&Data.pcsA_hot > 0) then
  evaluate( $xpcs_fac_A = ( &Data.pcsA_cool1 / &Data.pcsA_hot)^( 1 / $ncycle))
else
  evaluate( $xpcs_fac_A = 0)
end if


if ($Data.flags.xpcs eq true) then
  xpcs class pcs1 force $k_xpcs_1 end
  xpcs class pcs2 force $k_xpcs_2 end
  xpcs class pcs3 force $k_xpcs_3 end
  xpcs class pcs4 force $k_xpcs_4 end
  xpcs class pcs5 force $k_xpcs_5 end
  xpcs class pcs6 force $k_xpcs_6 end
  xpcs class pcs7 force $k_xpcs_7 end
  xpcs class pcs8 force $k_xpcs_8 end
  xpcs class pcs9 force $k_xpcs_9 end
  xpcs class pcsA force $k_xpcs_A end
end if


evaluate ($tempstep = (&SaProtocol.t1_init - &SaProtocol.t1_final)/$ncycle)
evaluate ($calcsteps = int(&SaProtocol.cool1_steps/$ncycle))
evaluate ($printsteps = int($calcsteps / 4))
evaluate ($timestep = &SaProtocol.timestep*&SaProtocol.tadfactor)

if (&Data.unamb_hot = 0) then 
  evaluate (&Data.unamb_hot = 0.000001)
end if
if (&Data.unamb_cool1 = 0) then
  evaluate (&Data.unamb_cool1 = 0.000001)
end if
if (&Data.amb_hot = 0)then 
  evaluate (&Data.amb_hot = 0.000001)
end if
if (&Data.amb_cool1 = 0) then
  evaluate (&Data.amb_cool1 = 0.000001)
end if
if (&Data.hbond_hot = 0) then
  evaluate (&Data.hbond_hot = 0.000001)
end if
if (&Data.hbond_cool1 = 0) then
  evaluate (&Data.hbond_cool1 = 0.000001)
end if

evaluate ($k_unamb= &Data.unamb_hot)
evaluate ($unamb_fac = (&Data.unamb_cool1/&Data.unamb_hot)^(1/$ncycle))
evaluate ($k_amb= &Data.amb_hot)
evaluate ($amb_fac = (&Data.amb_cool1/&Data.amb_hot)^(1/$ncycle))
evaluate ($k_hbond= &Data.hbond_hot)
evaluate ($hbond_fac = (&Data.hbond_cool1/&Data.hbond_hot)^(1/$ncycle))


!for the vean statement:
evaluate( $k_cen_1 = &Data.ini_cen_cool1_1)
evaluate( $cen_fac_1 = ( &Data.fin_cen_cool1_1 / &Data.ini_cen_cool1_1)^( 1 / $ncycle))
evaluate( $k_bor_1 = &Data.ini_bor_cool1_1)
evaluate( $bor_fac_1 = ( &Data.fin_bor_cool1_1 / &Data.ini_bor_cool1_1)^( 1 / $ncycle))

evaluate( $k_cen_2 = &Data.ini_cen_cool1_2)
evaluate( $cen_fac_2 = ( &Data.fin_cen_cool1_2 / &Data.ini_cen_cool1_2)^( 1 / $ncycle))
evaluate( $k_bor_2 = &Data.ini_bor_cool1_2)
evaluate( $bor_fac_2 = ( &Data.fin_bor_cool1_2 / &Data.ini_bor_cool1_2)^( 1 / $ncycle))

evaluate( $k_cen_3 = &Data.ini_cen_cool1_3)
evaluate( $cen_fac_3 = ( &Data.fin_cen_cool1_3 / &Data.ini_cen_cool1_3)^( 1 / $ncycle))
evaluate( $k_bor_3 = &Data.ini_bor_cool1_3)
evaluate( $bor_fac_3 = ( &Data.fin_bor_cool1_3 / &Data.ini_bor_cool1_3)^( 1 / $ncycle))

evaluate( $k_cen_4 = &Data.ini_cen_cool1_4)
evaluate( $cen_fac_4 = ( &Data.fin_cen_cool1_4 / &Data.ini_cen_cool1_4)^( 1 / $ncycle))
evaluate( $k_bor_4 = &Data.ini_bor_cool1_4)
evaluate( $bor_fac_4 = ( &Data.fin_bor_cool1_4 / &Data.ini_bor_cool1_4)^( 1 / $ncycle))

evaluate( $k_cen_5 = &Data.ini_cen_cool1_5)
evaluate( $cen_fac_5 = ( &Data.fin_cen_cool1_5 / &Data.ini_cen_cool1_5)^( 1 / $ncycle))
evaluate( $k_bor_5 = &Data.ini_bor_cool1_5)
evaluate( $bor_fac_5 = ( &Data.fin_bor_cool1_5 / &Data.ini_bor_cool1_5)^( 1 / $ncycle))

evaluate ($bath  = &SaProtocol.t1_init)
do (vx=maxwell($bath)) ( all )
do (vy=maxwell($bath)) ( all )
do (vz=maxwell($bath)) ( all )



evaluate ($reassign = TRUE)
evaluate ($i_cool = 0)
while ($i_cool < $ncycle) loop cool

      evaluate ($i_cool=$i_cool+1)

      evaluate ($bath  = $bath  - $tempstep)       
      evaluate ($k_unamb = $k_unamb*$unamb_fac)
      evaluate ($k_amb = $k_amb*$amb_fac)
      evaluate ($k_hbond = $k_hbond*$hbond_fac)
      evaluate ($asy=$asy+$asy_add)
      evaluate ($masy=$masy+$masy_add)
      
      evaluate ($k_bor_1 = $k_bor_1 * $bor_fac_1)
      evaluate ($k_bor_2 = $k_bor_2 * $bor_fac_2)
      evaluate ($k_bor_3 = $k_bor_3 * $bor_fac_3)
      evaluate ($k_bor_4 = $k_bor_4 * $bor_fac_4)
      evaluate ($k_bor_5 = $k_bor_5 * $bor_fac_5)

      evaluate ($k_cen_1 = $k_cen_1 * $cen_fac_1)
      evaluate ($k_cen_2 = $k_cen_2 * $cen_fac_2)
      evaluate ($k_cen_3 = $k_cen_3 * $cen_fac_3)
      evaluate ($k_cen_4 = $k_cen_4 * $cen_fac_4)
      evaluate ($k_cen_5 = $k_cen_5 * $cen_fac_5)

      if ($Data.flags.vean eq true) then
        vean class vea1 force $k_bor_1 $k_cen_1 end
        vean class vea2 force $k_bor_2 $k_cen_2 end
        vean class vea3 force $k_bor_3 $k_cen_3 end
        vean class vea4 force $k_bor_4 $k_cen_4 end
        vean class vea5 force $k_bor_5 $k_cen_5 end
      end if

      evaluate ($k_sani_1 = $k_sani_1 * $sani_fac_1)
      evaluate ($k_sani_2 = $k_sani_2 * $sani_fac_2)
      evaluate ($k_sani_3 = $k_sani_3 * $sani_fac_3)
      evaluate ($k_sani_4 = $k_sani_4 * $sani_fac_4)
      evaluate ($k_sani_5 = $k_sani_5 * $sani_fac_5)

      if ($Data.flags.sani eq true) then
        sani class rdc1 force $k_sani_1 end
        sani class rdc2 force $k_sani_2 end
        sani class rdc3 force $k_sani_3 end
        sani class rdc4 force $k_sani_4 end
        sani class rdc5 force $k_sani_5 end
      end if

      evaluate ($k_xpcs_1 = $k_xpcs_1 * $xpcs_fac_1)
      evaluate ($k_xpcs_2 = $k_xpcs_2 * $xpcs_fac_2)
      evaluate ($k_xpcs_3 = $k_xpcs_3 * $xpcs_fac_3)
      evaluate ($k_xpcs_4 = $k_xpcs_4 * $xpcs_fac_4)
      evaluate ($k_xpcs_5 = $k_xpcs_5 * $xpcs_fac_5)
      evaluate ($k_xpcs_6 = $k_xpcs_6 * $xpcs_fac_6)
      evaluate ($k_xpcs_7 = $k_xpcs_7 * $xpcs_fac_7)
      evaluate ($k_xpcs_8 = $k_xpcs_8 * $xpcs_fac_8)
      evaluate ($k_xpcs_9 = $k_xpcs_9 * $xpcs_fac_9)
      evaluate ($k_xpcs_A = $k_xpcs_A * $xpcs_fac_A)

      if ($Data.flags.xpcs eq true) then
        xpcs class pcs1 force $k_xpcs_1 end
        xpcs class pcs2 force $k_xpcs_2 end
        xpcs class pcs3 force $k_xpcs_3 end
        xpcs class pcs4 force $k_xpcs_4 end
        xpcs class pcs5 force $k_xpcs_5 end
        xpcs class pcs6 force $k_xpcs_6 end
        xpcs class pcs7 force $k_xpcs_7 end
        xpcs class pcs8 force $k_xpcs_8 end
        xpcs class pcs9 force $k_xpcs_9 end
        xpcs class pcsA force $k_xpcs_A end
      end if

      evaluate ($k_dani_1 = $k_dani_1 * $dani_fac_1)
      evaluate ($k_dani_2 = $k_dani_2 * $dani_fac_2)
      evaluate ($k_dani_3 = $k_dani_3 * $dani_fac_3)
      evaluate ($k_dani_4 = $k_dani_4 * $dani_fac_4)
      evaluate ($k_dani_5 = $k_dani_5 * $dani_fac_5)
      if ($Data.flags.dani eq true) then
        dani class dan1 force $k_dani_1 end
        dani class dan2 force $k_dani_2 end
        dani class dan3 force $k_dani_3 end
        dani class dan4 force $k_dani_4 end
        dani class dan5 force $k_dani_5 end
      end if

      if ($Data.scaling eq TRUE) then 
        inline @RUN:protocols/set_noe_scale.cns
        noe 
           scale dist $Data.unamb_cool1
           scale ambi $Data.amb_cool1 
           scale hbon $Data.hbond_cool1
           asym ambi $asy
           asym dist $asy
           asym hbon $asy
           masym ambi $masy
           masym dist $masy
           masym hbon $masy
        end
      else
        noe 
           scale dist $k_unamb
           scale ambi $k_amb
           scale hbon $k_hbond
           asym ambi $asy
           asym dist $asy
           asym hbon $asy
           masym ambi $masy
           masym dist $masy
           masym hbon $masy
        end
      end if

      !scale intermolecular interactions
      inline @RUN:protocols/scale_inter.cns
      evaluate ($kinter = $kinter + $interstep)

      dyna tors
         reassign $reassign
         timestep=$timestep
         nstep=$calcsteps
         nprint=$printsteps
         ntrfrq=0
         tcoupling = true  temperature = $bath
      end

      energy end
      if ($ener > 99999999) then
        display ENERGY PROBLEM, THE SYSTEM IS BLOWING UP: ==> STOPPING
	stop
      end if
      evaluate ($reassign = FALSE)
end loop cool

